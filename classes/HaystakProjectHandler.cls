public class HaystakProjectHandler extends ProjectHandler{  
      
   

    //Create Project
public void GenerateProjectAndPieces(Opportunity opp,
 OpportunityLineItem[] oppLines,
  Product_Process__c[] prodProc,
  Territory_State__c territoryState,
  Map<String, POA__c> eixstingPOAList  ) {  
    //Map<Id, POA__c> productPOAMap  ) {
    	
   Map<String,RecordType> projectRecordTypes = StaticData.getInstance().ProjectRecTypesMapByDevName;
   Map<String,RecordType> projectPieceRecordTypes = StaticData.getInstance().ProjectPiecesRecTypesMapByDevName;
   
    boolean requiresImplementationProject = false;
    boolean requiresWebsitesProject = false;
    decimal mrr = 0;

   
    List<OpportunityLineItem> mrrOLI = [SELECT Id, PricebookEntry.Product2.Name, PricebookEntry.Product2.Disable_Price_Change__c, ProductId__c, Quantity, UnitPrice, UserPriceChange__c, List_Price_Formula__c
                                             FROM OpportunityLineItem
                                             WHERE OpportunityId = :opp.Id AND One_Time_Fee__c = false AND Setup_Fee__c = false AND PricebookEntry.Product2.Disable_Price_Change__c = false];
                                             
    for(OpportunityLineItem oli : mrrOLI){
        mrr += oli.List_Price_Formula__c;
    }
    
//Creat all projects that needs to be created for this opportunity
      Map<String,SFDC_520_Quote__c> projectsMapByCategory = new Map<String,SFDC_520_Quote__c>();
    Map<Id, SFDC_520_Quote__c>  projectsMapByProjectDefinitionId = CreateProjectsByProjectDefinitions(opp, 
    oppLines,
    territoryState,
    eixstingPOAList,
    mrr,
    projectsMapByCategory);
     /*
    //Update the Project Names
    for(Id projectDefId : projectsMapByProjectDefinitionId.keySet()){
    	 
    	 if(opp.Account.Name.length() > 66) {    
    projectsMapByProjectDefinitionId.get(projectDefId).Name = StaticData.hayStakIdenitifer+'-' + opp.Account.Name.substring(0,63) + '...' + '-' + system.today().format();
    }
    else {    
    projectsMapByProjectDefinitionId.get(projectDefId).Name = StaticData.hayStakIdenitifer+'-' + opp.Account.Name+ '-' + system.today().format();  
    }
    }
   
    //Create Projects
    insert projectsMapByProjectDefinitionId.values();*/
    
    
        //find if Imp and Web projects are generated
    boolean webProjectGenerated = false;
    boolean impProjectGenerated = false;
    
    for(String projectCategory : projectsMapByCategory.keySet()){
    	if(	projectCategory == 'Implementation'
  	|| projectCategory == 'IMP'){ impProjectGenerated = true;}
    if(	projectCategory == 'Websites'
  	|| projectCategory == 'WEB'){ webProjectGenerated = true;}	
    }	

     //Find the projects generated by this opp being closed won 
    //and create a comma saperated list of Project Short codes
    String allGeneratedProjectsShortCodes = '';
    for(Id projectDefId : projectsMapByProjectDefinitionId.keySet()){
            //get the project definition
            Project_Definition__c projectDefinition = StaticData.getInstance().ProjectDefinitions().get(projectDefId);        
            
            if(allGeneratedProjectsShortCodes==''){
                allGeneratedProjectsShortCodes = projectDefinition.Project_Short_Code__c;
            }
            else{
            allGeneratedProjectsShortCodes += ','+projectDefinition.Project_Short_Code__c;
            }
    }

    		for(String projectCategory : projectsMapByCategory.keySet()){
    		SFDC_520_Quote__c project = projectsMapByCategory.get(projectCategory);
    /*	if(opp.Account.Name.length() > 60) {    
    project.Name = StaticData.hayStakIdenitifer+'-' + projectCategory +'-' +opp.Account.Name.substring(0,60);
    project.Project_Name__c = StaticData.hayStakIdenitifer+'-' + projectCategory +'-' + opp.Account.Name.substring(0,60);
    }
    else {    
    project.Name = StaticData.hayStakIdenitifer+'-' + projectCategory +'-'+ opp.Account.Name;  
    project.Project_Name__c = StaticData.hayStakIdenitifer +'-'+ projectCategory +'-' + opp.Account.Name;
    }*/
    project.Approval_Stage__c = 'Introduction';
    project.Web_Project_Generated__c = webProjectGenerated;
    project.Implementation_Included__c =impProjectGenerated;
    //update all the projects Projects_Generated_by_Opp__c  field with comma saperated list of generated projects short codes
    project.Projects_Generated_by_Opp__c = allGeneratedProjectsShortCodes;
    } 
   
    //Create Projects    
    insert projectsMapByCategory.values();
    
    //Create a list of Project Pieces to be generated   
    LIST<Project_Piece__c> piecesToCreate = CreateProjectPieces(opp,oppLines,projectsMapByProjectDefinitionId,
    prodProc,
    territoryState);
    
    //Generate all the project pieces in the list
    try {
    insert piecesToCreate;     
    system.debug('piecesToCreate.size(): ' + piecesToCreate.size());    
    } 
    catch(Exception Ex) {    
        String fullURL = URL.getSalesforceBaseUrl().toExternalForm() + '/';    
        Messaging.Singleemailmessage mail = new Messaging.Singleemailmessage();
        String[] toAddresses = new String[] {'ramana.mosali@autotradergroup.com'};
        mail.setToAddresses(toAddresses);
        mail.setReplyTo('ramana.mosali@autotradergroup.com');
        mail.setSubject('Error creating project pieces for ' + opp.Id);
        mail.setPlainTextBody('Error creating project pieces for opportunity ' + opp.Id + '<br /> Error: ' + Ex);
        mail.setHtmlBody('Error creating project pieces for opportunity <a href=' + fullURL + opp.Id + '>' +
        opp.Id + '</a><br /> Error:' + Ex);
        //Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });
        system.debug(Ex);
    } 
    
     //Invoke the @future method to update project
    //using future to have an ability to make some changes in Async manner
    if( projectsMapByProjectDefinitionId!= null &&  projectsMapByProjectDefinitionId.Values() != null && projectsMapByProjectDefinitionId.Values().size()> 0){
        if(projectsMapByProjectDefinitionId.Values().size()> 10){
            throw new CoxAutomotiveException('Could not fire more than 10 future methods; current future calls:'+projectsMapByProjectDefinitionId.Values().size());
        }
       for(SFDC_520_Quote__c proj : projectsMapByProjectDefinitionId.Values()){
           //handler_async_ConsolidationOpportunity.assginProjectStage(proj.Id, 'Integration');
           HayAsyncHandler.handleProjectCreation(proj.Id); 
       }     
    }


    
}

public override LIST<Project_Piece__c> CreateProjectPieces(Opportunity opp,OpportunityLineItem[] oppLines,
Map<Id, SFDC_520_Quote__c> projectsMapByProjectDefinitionId,
Product_Process__c[] prodProc,
Territory_State__c territoryState){
	LIST<Project_Piece__c> projectPieces = super.CreateProjectPieces(opp,oppLines,projectsMapByProjectDefinitionId,prodProc,territoryState);

	
	return projectPieces;
}
}
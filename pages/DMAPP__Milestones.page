<apex:page standardController="Opportunity"
    extensions="DMAPP.AssessmentController" 
    showHeader="true" 
    sidebar="false"
    action="{!logMilestonesUsage}"
    docType="html-5.0"
    >
    
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__prefix)}"/>
    <script type="text/javascript" src="{!$Resource.DMAPP__l10njs}"></script>
    <apex:include pageName="DMAPP__tmpCommoncss" />

     <c:jQuery jQueryUI="true"
        underscore="true"
        cookies="true"
        tooltip="true"
        tools="true"
        validate="true"
        paging="true"
        jqGrid="true"
        textareaMaxlength="true"
        chosen="true"/>
        
    <c:MobileRedirect smartOM="true" />
    
    <apex:include pageName="DMAPP__CRUD" />
    <!--  <script type="text/javascript" src="{!URLFOR($Resource.DMAPP__jQueryUI, 'js/jquery.cookies.2.2.0.min.js')}"></script> -->
    <script type="text/javascript" src="{!URLFOR($Resource.ttgomjs, 'ttg/lib/ttgservice.js')}"></script>
    <!--  <script type="text/javascript" src="{!URLFOR($Resource.DMAPP__tooltipjs)}"></script> -->
    
    <apex:include pageName="DMAPP__Debug" />
    <script type="text/javascript" src="{!URLFOR($Resource.ftk, 'forcetk.js')}"></script>
    
    <script type="text/javascript" src="{!URLFOR($Resource.dvls, 'js/flowplayer-3.2.6.js')}"></script>
    
    <apex:include pageName="DMAPP__APIDelegate" />
    <apex:include pageName="DMAPP__Quicklinks" />
    <style>
        @import url("{!URLFOR($Resource.DMAPP__SmartOM,         'css/summarytab.css')}");
        @import url("{!URLFOR($Resource.DMAPP__SmartOM,         'css/chatterpost.css')}");
        
        /* start of additions for Chatter */
    
        @import url("{!URLFOR($Resource.DMAPP__ttgomjs,         'ttg/chatter/css/chatter_side_panel.css')}");
        @import url("{!URLFOR($Resource.DMAPP__ttgomjs,         'ttg/chatter/css/chatter_post.css')}");
        @import url("{!URLFOR($Resource.DMAPP__ttgomjs,         'ttg/graph/css/glyphs/style.css')}");
        @import url("{!URLFOR($Resource.DMAPP__ttgomjs,         'ttg/chatter/css/chatter_summary.css')}");
        
        /* end of additions for Chatter */
        
       /* Restores AJAX spinner size to normal (AMOF-813) */
        .spinner {
            height: auto;
            width: auto;
        }
                
    </style>        
    <div id="TAS">
        <apex:include pageName="DMAPP__SummaryTab2" />
        <br />
        <div id="SPINNER"></div>
        <div class="PAGEWIDTH">
            <div id="AssessmentResult"></div>
            <div id="NOTEDIALOG" style="display: none;">
                <TEXTAREA id="NOTEEDITOR" />
                <span id="NOTE_CRITERIA" /> <span id="NOTE_HELP" /> <input type="hidden" id="NOTEEDITOR_ID" />
            </div>
    
            <div id="QUICKEDITDIALOG" style="display: none;">
                <div id="QE_CRITERIA"></div>
                <div id="QE_SELECTION"></div>
            </div>
        </div>  
    </div>
    
    <script>

        /* 
         * Copyright Â© The TAS Group. All rights reserved.
         *  
         */    
        var spec = {
            ttgApi: ttg.apiLayer.sfdcDelegate( { sessionid : '{!JSENCODE($Api.Session_ID)}', opportunityid : '{!JSENCODE(Opportunity.id)}' } ),
            readonly: {!Editable == false}
            
        };
        
         var ttg_opportunitygauge = (function(_spec) {

            var that = {};
            
            var data;
            var ttgApi = _spec.ttgApi;
            var answersToIndex = [];
            var noteAnswersToIndex = [];
            var optionsToValue = [];
            var optionsToName = [];
            var optionsToColour = [];
            var limitSize = 4096;
            var readonly = _spec.readonly;
            var iPad = navigator.userAgent.match(/iPad/i) != null;          

            function getOpportunityGauge() {
                //console.log('before showAjaxSpinner(true)');
                showAjaxSpinner(true);
                //console.log('before wrapGet()');
                wrapGet ('{!JSENCODE(Opportunity.id)}', completedGet);

            }
            
            function updateRawData(d) {
                data = d; 
            }
            
            function handleResponse(d) {
                response = d;
                if (d.debug != undefined && d.debug != null) {

                    jQuery.each(d.debug,
                        function (key, value) {
                            //console.log(value);
                        }
                    )

                }
                
            }


            function refreshDebug() {
                handleResponse(data);
            }
            
            function handleResponse(response) {
                if (response.debug != undefined && response.debug != null) {

                    jQuery.each(response.debug,
    
                        function (index, item) {
                            //console.log(item);
                        }
                    );
                    
                }
                else {
                    
                    console.warning('response didn\'t have a debug block');

                }
                
            }
            
            function completedGet() {
                showAjaxSpinner(false);
                refreshDebug();
                render();
                setScores();
                updateAllSummaryTotals();
                autoExpandBlocks(2);
            }
            
            function updateAllSummaryTotals() {

                var categoryQuestionsInBlock = 0;
                
                jQuery.each(data.categories,
                    function (index, categoryQuestion) {

                        categoryQuestionsInBlock++;
                        
                        var questionBlock = 0;
                        var total = 0;
                        var max = 0;
                        var total_section_score = 0;
 
                        jQuery.each(categoryQuestion.questions,
                            function (index, question) {                
                                var question_score;
                                var question_block_summary = '#QUESTIONBLOCKSUMMARY_' + categoryQuestionsInBlock;
                                var total_id = '#QUESTION_SUMMARY_OUTER_' + categoryQuestionsInBlock;
                                var summaryId = '#QUESTION_SUMMARY_' + categoryQuestionsInBlock + '_TOTALS';
                                questionBlock++;
                                
                                var id = '#OptionsBlock_' + categoryQuestionsInBlock + '_' + questionBlock;

                                var value = +jQuery('option:selected', id).attr('ttgmilestone');
                                
                                question_score = jQuery('#question_score_' + categoryQuestionsInBlock + '_' + questionBlock);
                                question_score.append('<div>').addClass('question_score_box').text(value);

                                if(value != undefined) {
                                    if(isNaN(value)==true){
                                        value = " ";
                                    }else{
                                        total += value;
                                        if('{!ShowMilestoneScores}' == 'true'){
                                            jQuery(summaryId).text(total);
                                        }
                                    }
                                    
                                    if('{!ShowMilestoneScores}' == 'true'){
                                        var section_max_score = question.maxScore;
                                        if(section_max_score == undefined || section_max_score == '0'){
                                            jQuery(question_block_summary).css('padding-bottom','10px');
                                            jQuery(total_id).remove();
                                        }else if(section_max_score !== undefined || section_max_score !== '0'){
                                            jQuery(id).addClass('narrow_dropdown');
                                        }
                                    }
                                }
                                
                                max += question.maxScore;  
                            }
                        )
                        
                        
                        var summaryId = '#QUESTION_SUMMARY_' + categoryQuestionsInBlock + '_TOTALS';
                        
                        r = 160; g = 160; b = 160; // grey
                        
                        var myLowerThreshold = max * 0.33;
                        var myUpperThreshold = max * 0.66;
                                                
                        low_lower = -10; 
                        low_upper = myLowerThreshold; 
                        medium_lower = myLowerThreshold; 
                        medium_upper = myUpperThreshold; 
                        high_lower = myUpperThreshold; 
                        high_upper = max; 
                               
                        if(total > 0) {
                            if((total >= low_lower) &&  (total <= low_upper)) {
                                r = 204; g = 0; b = 0; // red
                            } else if((total >= medium_lower) &&  (total <= medium_upper)) {
                                r = 255; g = 190; b = 0; // yellow
                            } else if((total >= high_lower) &&  (total <= high_upper)) {
                                r = 1; g = 144; b = 64; // green
                            }
                        }
                        else if(total < 0){
                            r = 204; g = 0; b = 0; // red
                        }                        
                        setRGBStuff(summaryId, r, g, b);
                    }
                )        
            }
            
            function setRGBStuff(id, r, g, b) {
                
                jQuery(id).parent().css('background-color', 'white').css('border-color', 'RGB(' + r + ', ' + g + ', ' + b + ')');
            }
            
            function setScores() {
                var ourAnswerToIndex = [];
                
                jQuery.each(data.answers,
                    function (index, answer) {
                        var questionId = answer.Id;
                        var optionId = answer.ourAnswer[ttg.vfp + 'Milestone_Question_Option__c'];
                        
                        var noteValue = answer.ourAnswer[ttg.vfp + 'Note__c'];
                        
                        var mappedAnswerIndex = answersToIndex[questionId];
                        if (mappedAnswerIndex != undefined) {
                        
                            var mappedOptionValue = optionsToValue[optionId];
                            var mappedOptionName = optionsToName[optionId];
                            var mappedOptionColour = optionsToColour[optionId];
                            if ((mappedOptionValue != undefined) && (mappedOptionName != undefined)) {
                        
                                var mappedOptionValueUnique = mappedOptionValue + mappedOptionName; 
                                var indexOne = idToIndexOne(mappedAnswerIndex);
                                var indexTwo = idToIndexTwo(mappedAnswerIndex);
                                    
                                if (noteValue != undefined) {
                                    if ((indexOne > 0) && (indexTwo > 0)) {
                                        setNoteText('#NOTE_' + indexOne + '_' + indexTwo, noteValue);
                                    }
                                }

                                jQuery('#OptionsBlock_' + indexOne + '_' + indexTwo).val(optionId);

                                updateAnswerScore(indexOne, indexTwo, answer.ourAnswer[ttg.vfp + 'Score__c'])
                                updateSummaryScoreAndColour(indexOne, indexTwo, mappedOptionValue, mappedOptionColour);
                            
                            } else {
                                if (noteValue != undefined) {
                                    
                                    var indexOne = idToIndexOne(mappedAnswerIndex);
                                    var indexTwo = idToIndexTwo(mappedAnswerIndex);
                                    
                                    if ((indexOne > 0) && (indexTwo > 0)) {
                                        setNoteText('#NOTE_' + indexOne + '_' + indexTwo, noteValue);
                                    }
                                }
                            }
                        }
                        
                    }
                )
            }

            function updateSummaryScoreAndColour(indexOne, indexTwo, value, colour) {
                
                var id = '#QUESTION_SUMMARY_' + indexOne + '_' + indexTwo;
                applySummaryStyleAndColour(jQuery(id), Math.max(0, value), colour);
                
                var _id = '#question_score_' + indexOne + '_' + indexTwo;
                applyQuestionScoreStyleAndColour(jQuery(_id), Math.max(0, value), colour);
            }

            function applySummaryStyleAndColour(ctrl, val, colour) {
                var style = ''; 
                
                switch(colour) {
                    case 'Green': style='divScoreVeryHigh'; break;
                    case 'Yellow': style='divScoreMedium'; break;
                    case 'Red': style='divScoreVeryLow'; break;
                    case 'Grey': style='divScoreUnscored'; val =' '; break;
                    default: style='divScoreUnknown'; val =' '; break;
                }
                
                ctrl.removeClass('divScoreVeryHigh');
                ctrl.removeClass('divScoreHigh');
                ctrl.removeClass('divScoreMedium');
                ctrl.removeClass('divScoreLow');
                ctrl.removeClass('divScoreVeryLow');
                ctrl.removeClass('divScoreUnknown');
                ctrl.removeClass('divScoreUnscored');
                
                ctrl.addClass(style);
            } 

            function applyQuestionScoreStyleAndColour(ctrl, val, colour) {
            
                var style = ''; 
                
                switch(colour) {
                    case 'Green': style='spanScoreVeryHigh'; break;
                    case 'Yellow': style='spanScoreMedium'; break;
                    case 'Red': style='spanScoreVeryLow'; break;
                    case 'Grey': style='spanScoreUnscored'; val =' '; break;
                    default: style='spanScoreUnknown'; val =' '; break;
                }
                
                ctrl.removeClass('spanScoreVeryHigh');
                ctrl.removeClass('spanScoreHigh');
                ctrl.removeClass('spanScoreMedium');
                ctrl.removeClass('spanScoreLow');
                ctrl.removeClass('spanScoreVeryLow');
                ctrl.removeClass('spanScoreUnknown');
                ctrl.removeClass('spanScoreUnscored');
                
                ctrl.addClass(style);
            } 
            
            
            function setNoteText(id, v) {

                if (v != undefined) {
                
                    var items = v.split('\n');
                    var html = ''

                    jQuery.each(items,
                        function (index, item) {
                            if (html != '') html += '<br/>';
                            html += jQuery('<div/>').text(item).html(); 
                        }
                    )

                    jQuery(id).html(html);
                    
                    if (html != '') {
                        jQuery(id).addClass('divNote');
                        jQuery(id).click(openNoteDialog)                
                    }
                    else {
                        jQuery(id).removeClass('divNote');
                    }
                    
                    
                }
            }
            
            
            function getNoteText(id) {
                var html = jQuery(id).html()

                html = html.replace(/<br>/gi, '\n');

                var items = html.split('\n');
                var text = ''
                
                jQuery.each(items,
                    function (index, item) {
                        if (text != '') text += '\n';
                        text += jQuery('<div/>').html(item).text(); 
                    }
                )

                return text;
            }
            
            function render() {                
                var categoryQuestionsInQuestion;
                var title = '';
                var categoryQuestionsIndex = 1;
                var table = jQuery('<div>')
                
                var maxQuestions = 0;
                var categoryQuestionsInBlock = 0;
                var myQuestionNumber = 0;
                
                jQuery.each(data.categories,
                    function (index, categoryQuestion) {

                        if(categoryQuestion.numbering == 'Restart Numbering') {
                            myQuestionNumber = 0;
                        }
                        
                        categoryQuestionsInBlock++;
                        
                        if (table != null) jQuery('#AssessmentResult').append(table);
                        
                        table = jQuery('<div>').addClass('divQuestionsBlock').attr('id','QUESTIONBLOCK_' + categoryQuestionsInBlock);
                        
                        tr = jQuery('<div>').addClass('divQuestionBlock').attr('id', 'QUESTIONBLOCKSUMMARY_' + categoryQuestionsInBlock);
                        tr.append(jQuery('<span>').addClass('spanToggle').addClass('tasPointer').click(toggle));
                        tr.append(jQuery('<span>').addClass('spanQuestion').text(categoryQuestion.category));
                        tr.append(
                            jQuery('<span>')
                                .addClass('spanSummaryTotal')
                                .attr('id', 'QUESTION_SUMMARY_' + categoryQuestionsInBlock + '_TOTAL')
                                .text(0)
                        );
                        tr.append(
                            jQuery('<span>')
                                .addClass('spanQuestionSummary')
                                .attr('id', 'QUESTION_SUMMARY_OUTER_' + categoryQuestionsInBlock)
                                .append(blankSummaryBlock('QUESTION_SUMMARY_', categoryQuestionsInBlock))
                        );
                        // add category quicklink if present
                        if ((categoryQuestion['quicklinks'] != undefined) && (categoryQuestion['quicklinks'].length > 0)) {
                            
                            var myQuicklink = jQuery('<div>').addClass('QUICKLINK').addClass('tasPointer').click(function() {
                                var records = categoryQuestion['quicklinks'];
                                quicklink(records, categoryQuestion.category);
                            }).attr('id', index);                           
                                
                            tr.append(jQuery('<span>').addClass('spanCategoryQuicklink').append(myQuicklink));     
                        }
                        
                        tr.append(jQuery('<span>').addClass('spanBreak'));
                        
                        table.append(tr);
                        
                        var questionBlock = 0;
                        
                        jQuery.each(categoryQuestion.questions,
                            function (index, question) {
                        
                                questionBlock++;
                                //myQuestionNumber++;
    
                                var tr = jQuery('<div>')
                                    .addClass('divCriteriaBlock')
                                    .attr('id', 'QUESTIONBLOCK_' + categoryQuestionsInBlock + '_' + questionBlock)
                                    .addClass('HIDDEN');  // TODO revisit id for this div
                                    
                                tr.append(
                                    jQuery('<span>')
                                        .addClass('spanCriteriaIndex')
                                        .text((categoryQuestion.numbering == 'No Numbering') ? '' : ++myQuestionNumber));
                                
                                tr.append(
                                    jQuery('<span>')
                                        .addClass('spanCriteria')
                                        .html(question.name));
                                
                                var myHelp = data.categories[categoryQuestionsInBlock-1].questions[index].help;
                                
                                tr.append(
                                    jQuery('<span>')
                                    .addClass('spanCriteriaInfo')
                                    .append(
                                        jQuery('<div>')
                                        .addClass('NOTEINFOICON')
                                        .addClass('tasPointer')
                                        .attr('id', 'NOTEINFOICON_' + categoryQuestionsInBlock + '_' + questionBlock)
                                        .css('visibility', (!iPad && myHelp) ? 'visible' : 'hidden')
                                    )
                                );
                                
                                tr.append(
                                    jQuery('<span>')
                                        .addClass('spanCriteriaNote')
                                        .append(
                                            jQuery('<div>')
                                                .addClass('NOTEEDITBUTTON')
                                                .addClass('tasPointer')
                                                .attr('id', 'NOTEEDITBUTTON_' + categoryQuestionsInBlock + '_' + questionBlock)
                                        )
                                );
                                
                                tr.append(
                                    jQuery('<span>')
                                        .addClass('spanCriteriaSummary')
                                        .attr('QuestionBlock_', '' + categoryQuestionsInBlock + '_' + questionBlock)
                                        .append(
                                            scoreCtrl('OptionsBlock_' + categoryQuestionsInBlock + '_' + questionBlock, question)
                                            .addClass('options_block')
                                        )
                                );


                                var RHS = jQuery('<span>').addClass('RHS_container');
                                tr.append(RHS);

                                // add quicklink if present                                
                                
                                if ((question['quicklinks'] != undefined) && (question['quicklinks'].length > 0)) {
                                
                                    var ctrlQuicklink = jQuery('<div>').addClass('QUICKLINK').addClass('tasPointer').click(function() {
                                        var records = question['quicklinks'];
                                        quicklink(records, question.name);
                                    }).attr('id', index);                           
                                    
                                    RHS.append(jQuery('<span>').addClass('spanCriteriaQuicklink').append(ctrlQuicklink));
                                    
                                }
                               if('{!ShowMilestoneScores}' == 'true'){ 
                                    RHS.append(
                                        jQuery('<span>')
                                            .addClass('spanCriteriaScore')
                                            .attr('id', 'question_score_' + categoryQuestionsInBlock + '_' + questionBlock)
                                    );
                                }
                                
                                tr.append(jQuery('<div>').attr('id', 'NOTE_' + categoryQuestionsInBlock + '_' + questionBlock));
                                table.append(tr);   
                            }
                        )           
                    }
                )
                
                jQuery('#AssessmentResult').append(table);
                  
                
                if (!iPad) {
                    jQuery('.SCOREBLOCK_SCORE')
                        .tooltip({ delay: 0, showURL: false, bodyHandler: function() { 
                            return getHoverInformation(this, jQuery(this).attr('id'));
                        }});
                    
                    jQuery('.NOTEINFOICON').tooltip({ delay: 0, showURL: false, bodyHandler: function() { 
                        return getHelpInformation(jQuery(this).attr('id')); 
                    }});
                }
                
                setupNoteDialog();
                //setupQuickEditDialog();
                setUpMaxLimitCheck();
                
            }
            
            function getHoverInformation(ctrl, id) {
                            
                var indexOne = noteIdToIndexOne(id);
                var indexTwo = noteIdToIndexTwo(id);
                var questionText = "";
                
                if((indexOne > 0) && (indexTwo > 0)) {
                    var categoryIndex = indexOne - 1;
                    var questionIndex = indexTwo - 1;
                    
                    questionText = data.categories[categoryIndex].questions[questionIndex].name;  
                }
                
                var result = jQuery('<span>').html(questionText); 

                return result;

            }
            
            function setupNoteDialog() {

                if (readonly) {
                    jQuery('#NOTEDIALOG').dialog({ modal: true, width: "640px", resizable: false, autoOpen: false, buttons: {'Cancel': function() { jQuery(this).dialog("close"); } }  });
                    jQuery('#NOTEEDITOR').attr('disabled', 'true');
                }
                else {
                    jQuery('#NOTEDIALOG').dialog({ modal: true, width: "640px", resizable: false, autoOpen: false, buttons: { 'Save': function() { noteOk(jQuery(this)); }, 'Cancel': function() { jQuery(this).dialog("close"); }   }  });
                }
                
                jQuery('.NOTEEDITBUTTON').each( function (index, element) {  
                
                        jQuery(this).click(openNoteDialog)              

                    }
                )
                
            }
            
            function noteOk(ctrl) {

                var id = jQuery('#NOTEEDITOR_ID').val();
                var indexOne = noteIdToIndexOne(id);
                var indexTwo = noteIdToIndexTwo(id);
                
                var value = jQuery('#NOTEEDITOR').val();
              
                
                var noteId = '#NOTE_' + indexOne + '_' + indexTwo;
                setNoteText(noteId, value);

                resizeNoteDisplayArea(jQuery(noteId).parent());

                jQuery('#OptionsBlock_' + indexOne + '_' + indexTwo).trigger('change');
                
                jQuery(ctrl).dialog("close");
                
            }
            
            function resizeNoteDisplayArea(ctrl) {

                var height = jQuery(ctrl).find('.divNote').height();
                if (null != height && height != 0) {
//                    jQuery(ctrl).css('height', jQuery(ctrl).find('.divNote').height() + 60);
                }
                else {
//                    jQuery(ctrl).css('height', 25);
                }
                

            }
            
            /*
            function setupQuickEditDialog() {

                if (readonly) {
                    jQuery('#QUICKEDITDIALOG').dialog({ modal: true, width: "640px", resizable: false, autoOpen: false, buttons: {'Close': function() { jQuery(this).dialog("close"); } }  });
                }
                else {
                    jQuery('#QUICKEDITDIALOG').dialog({ modal: true, width: "640px", resizable: false, autoOpen: false, buttons: {'Cancel': function() { jQuery(this).dialog("close"); }, 'Save': function() { quickEditOk(jQuery(this)); } }  });
                }
            }
            */
            
             function openNoteDialog() {

                
                var id = jQuery(this).attr('id');
                var indexOne = noteIdToIndexOne(id);
                var indexTwo = noteIdToIndexTwo(id);
                
                var noteText = getNoteText('#NOTE_' + indexOne + '_' + indexTwo);

                jQuery('#NOTEEDITOR').val(noteText);

                jQuery('#NOTEEDITOR_ID').val(id);
    
                if(indexOne > 0) {
                    var myIndexOne = indexOne - 1;
                    //console.log('in openNoteDialog(): data.categories[' + myIndexOne +'].category=' + data.categories[myIndexOne].category );
                    jQuery("#NOTEDIALOG").dialog('option', 'title', data.categories[myIndexOne].category);
                    
                    if(indexTwo > 0) {
                        var myIndexTwo = indexTwo - 1;
                        //console.log('in openNoteDialog(): data.categories[' + myIndexOne +'].questions[' + myIndexTwo +'].name=' + data.categories[myIndexOne].questions[myIndexTwo].name );               
                        jQuery('#NOTE_CRITERIA').html(data.categories[myIndexOne].questions[myIndexTwo].name);
                        jQuery('#NOTE_HELP').html(data.categories[myIndexOne].questions[myIndexTwo].help);
                    }
                }

                jQuery('#NOTEDIALOG').dialog('open');

                jQuery(".ui-widget-overlay").click(function(){ jQuery(".ui-dialog-titlebar-close").trigger('click');});

                var height = jQuery('#NOTEDIALOG').height();
                jQuery('#NOTEEDITOR').height(height);
                
            }
            
            function blankSummaryBlock(prefix, categoryNumber) {
                var myPrefix = prefix + categoryNumber;
                var div = jQuery('<div>').attr('id', myPrefix).addClass('SCOREBLOCK');

                div.append(jQuery('<div>').attr('id', myPrefix + '_TOTALS').addClass('SCOREBLOCK_TOTAL'));
                var questionNumber = 0;
                var categoryIndex =  categoryNumber - 1;
               
                jQuery.each(data.categories[categoryIndex].questions,
                    function (index, question) {
                        questionNumber++;
                        div.append(
                            jQuery('<div>')
                                .addClass('SCOREBLOCK_SCORE')
                                .addClass('divScoreUnscored')
                                .attr('id', myPrefix + '_' + questionNumber)
                                .text(' ')
                        );
                
                    }
                )
                return div;
            
            }
            
            function scoreCtrl(id, question) {
            
                answersToIndex[question.id] = id;

                var myScoreCtl = jQuery('<select>').attr('id', id).change(lineChange);
                myScoreCtl.append(jQuery('<option>'));
                
                jQuery.each(question.options,
                    function (index, option) {
                        var optionName = option.name;
                        var optionValue = option.score
                        var optionColour = option.colour;
                        myScoreCtl.append(jQuery('<option>').attr('value', option.id).attr('ttgmilestone', optionValue).text(optionName)); // TODO
                        optionsToValue[option.id] = optionValue;
                        optionsToName[option.id] = optionName;
                        optionsToColour[option.id] = optionColour;  
                    }
                )   
                return myScoreCtl;
            }

            function getClassForOptionColour(optionColour) {
                if('Green' == optionColour) {
                    return 'optionVeryHighAnswer';
                } else if('Yellow' == optionColour) {
                    return 'optionMediumAnswer';
                } else if('Red' == optionColour) {
                    return 'optionVeryLowAnswer';
                } else if('Grey' == optionColour) {
                    return 'optionUnknownAnswer';
                } else {
                    return '';
                }
            }

            function quicklink(quicklinkRecords, criterionText) {

                var qls = [];
                var collection = [];                

                jQuery.each(quicklinkRecords, 
                    function (key, rawLinkData) {
                        
                        collection.push({ id: rawLinkData.id, name: rawLinkData.name, type: rawLinkData[/*ttg.vfp+*/'typeDetails'], description: rawLinkData[/*ttg.vfp+*/'description'], link: rawLinkData[/*ttg.vfp+*/'link'], icon: rawLinkData[/*ttg.vfp+*/'icon'] });
                    }
                )
                
                qls.push(collection);
                var _tasQuicklinks = new QUICKLINKS({});
                
                function quicklinkHitSuccess() {}
                function quicklinkHitError() {} 
                function quicklinkHitComplete() {}
                
                _tasQuicklinks.setQuicklinkHitCallback(function(spec, quicklink) {
                    if(ttgApi) {
                        if ( quicklink ) {
                            ttgApi.logQuicklinkUsageHitJS(quicklink.id, quicklinkHitSuccess, quicklinkHitError, quicklinkHitComplete);
                        }
                    }
                });
                
                _tasQuicklinks.setDM_Quicklinks(qls);
                _tasQuicklinks.quicklinkDlg(0, criterionText);
                   
                                   
            }
            
            function lineChange() {

                var newValue = jQuery('option:selected', this).attr('ttgmilestone'); // TODO
                var newValueUnique = jQuery(this).val();

                var newName = jQuery('option:selected', this).attr('value');

                var indexOne = idToIndexOne(this.id);
                var indexTwo = idToIndexTwo(this.id);
                if ((indexOne > 0) && (indexTwo > 0)) {
                    showAjaxSpinner(true);
                    wrapPutPost(packageLine(indexOne, indexTwo, newValue, newName), completedPut);
                }
                
                
                var colour = getOptionColourFromQuestionIdAndSelectedValue(indexOne, indexTwo, newValue)
                updateSummaryScoreAndColour(indexOne, indexTwo, newValue, colour);
                
                updateAnswerScore(indexOne, indexTwo, newValue);
                updateSectionSummary(indexOne);
            }
            
            
            function updateAnswerScore(indexOne, indexTwo, newValue){
        
               var questionBlock = 0;
               var total = 0;
               var max = 0;
                                  
               var question_score;
               var summaryId = '#QUESTION_SUMMARY_' + indexOne + '_TOTALS';
               questionBlock++;
               
               var id = '#OptionsBlock_' + indexOne + '_' + indexTwo;

               var value = +jQuery('option:selected', id).attr('ttgmilestone');
               
               question_score = jQuery('#question_score_' + indexOne + '_' + indexTwo);
               
               question_score.append('<div>').addClass('question_score_box').text(value);
                                
            }
                
            function updateSectionSummary(summary_index){
            
                var max = null;
                var min = null;
                var total = null;
                var summaryId = '#QUESTION_SUMMARY_' + summary_index + '_TOTALS';           

                jQuery.each(jQuery('DIV#QUESTIONBLOCK_' + summary_index + ' select'), function(index, select){
                
                    var select_min = null;
                    var select_max = null;
                    
                    jQuery.each(jQuery(select).children('option'), function(index_2, option){
                
                        var ttgmilestone = jQuery(option).attr('ttgmilestone');
                        // console.log('updateSectionSummary(): -------> ttgmilestone = ' + ttgmilestone + ', select_min = ' + select_min + ', select_max = ' + select_max)
                        if (ttgmilestone !== undefined) {
                            var ret_attr = parseInt(ttgmilestone);
                            if (!isNaN(ret_attr)) {
        
                                if(jQuery(option).is(':selected')){
                                    total  = (total) ? total : 0;
                                    total += ret_attr;
                                }
                                
                                if (select_max == null || select_max < ret_attr){
                                    select_max = ret_attr;
                                }
                                
                                if (select_min == null || select_min > ret_attr){
                                    select_min = ret_attr;
                                }
                            }
                        }
                    
                    })
                    if (select_max !== null) {
                        max = select_max + ((max) ? max : 0);
                    }
                    if(select_min !== null){
                        min = select_min + ((min) ? min : 0);
                    }
                // console.log('\n\n---> updateSectionSummary(): total = ' + total + ', min = ' + min + ', max = ' + max)
                    
                })
                // console.log('\n\nupdateSectionSummary(): total = ' + total + ', min = ' + min + ', max = ' + max)
                    
                if (total !== null) {
                    var range = max - min;
                    var incr = range / 3;
                    var lowerThreshold = min + incr;
                    var upperThreshold = lowerThreshold + incr;
                    
                    var r = 160; 
                    var g = 160; 
                    var b = 160;

                    // console.log('updateSectionSummary(): total = ' + total + ', range = ' + range + ', incr = ' + incr + ', lowerThreshold = ' + lowerThreshold + ', upperThreshold = ' + upperThreshold)
                    
                    if (total >= min && total < lowerThreshold) {
                        // console.log('updateSectionSummary():  (total >= min && total < lowerThreshold), Setting Red')
                        r = 204; g = 0; b = 0; // red
                    } else if (total >= lowerThreshold && total < upperThreshold) {
                        // console.log('updateSectionSummary():  (total >= lowerThreshold && total <= upperThreshold), Setting Yellow')
                        r = 255; g = 190; b = 0; // yellow
                    } else if (total >= upperThreshold && total <= max) {
                        // console.log('updateSectionSummary():  (total > upperThreshold && total <= max), Setting Green')
                        r = 1; g = 144; b = 64; // green
                    }
                    setRGBStuff(summaryId, r, g, b);
                }
                                        
                if (total == null || total == undefined){
                    total = " ";
                    // console.log('updateSectionSummary(): Total Undefined, Setting Gray')
                    setRGBStuff(summaryId, 160, 160, 160);
                } else if (total <= 0) {
                    // console.log('updateSectionSummary(): Total <= 0, Setting Red')
                    setRGBStuff(summaryId, 204, 0, 0);                    
                }
                jQuery(summaryId).text(total);
            }

            function getOptionColourFromQuestionIdAndSelectedValue(indexOne, indexTwo, newValue) {
            
                var question = getQuestion(indexOne, indexTwo);
                var myColour = '';
                
                if((newValue) && (newValue.length > 0)) {
                    jQuery.each(question.options,
                        function (index, option) {
    
                            var optionValue = option.score;
                            var optionColour = option.colour;
                            
                            if(newValue == optionValue) {
                                myColour = optionColour; 
                            }
                        }
                    )
                }
                
                return myColour;
            }
            
            function completedPut() {
                showAjaxSpinner(false);
            }
            
            function idToIndexOne(id) {
                var index = -1;
                var minLength = 'OptionsBlock_'.length;
                if (id.substring(0,minLength) == 'OptionsBlock_') {
                    index = id.substring(minLength, minLength+1);
                }
                else {
                    //console.log('idToIndexOne() failed, id:' + id);
                }
                
                return index;
            }
            
            function idToIndexTwo(id) {
                var index = -1;
                var minLength = 'OptionsBlock_X_'.length;
                if (id.length > minLength) {
                    index = id.substring(minLength, id.length);
                }
                else {
                    //console.log('idToIndexTwo() failed, id:' + id);
                }
                
                return index;
            }
            
            function noteIdToIndexOne(id) {
                var index = -1;
                
                if (id.substring(0,5) == 'NOTE_') {
                    var minLength = 'NOTE_'.length;
                    if (id.substring(0,minLength) == 'NOTE_') {
                        index = id.substring(minLength, minLength+1);
                        //console.log('noteIdToIndexOne() succeeded, id:' + id + ', index:' + index);   
                    }
                    else {
                        //console.log('notedToIndexOne() failed, id:' + id);
                    }
                } else if (id.substring(0,15) == 'NOTEEDITBUTTON_') {
                
                    var minLength = 'NOTEEDITBUTTON_'.length;
                    if (id.substring(0,minLength) == 'NOTEEDITBUTTON_') {
                        index = id.substring(minLength, minLength+1);
                        //console.log('noteIdToIndexOne() succeeded, id:' + id + ', index:' + index);   
                    }
                    else {
                        //console.log('notedToIndexOne() failed, id:' + id);
                    }
                } else if (id.substring(0,17) == 'QUESTION_SUMMARY_') {
                
                    var minLength = 'QUESTION_SUMMARY_'.length;
                    if (id.substring(0,minLength) == 'QUESTION_SUMMARY_') {
                        index = id.substring(minLength, minLength+1);
                        //console.log('noteIdToIndexOne() succeeded, id:' + id + ', index:' + index);   
                    }
                    else {
                        //console.log('notedToIndexOne() failed, id:' + id);
                    }
                }
                return index;
            }
            
            function noteIdToIndexTwo(id) {
                var index = -1;
                if (id.substring(0,5) == 'NOTE_') {
                    var minLength = 'NOTE_X_'.length;
                    if (id.length > minLength) {
                        index = id.substring(minLength, id.length);
                        //console.log('noteIdToIndexTwo() succeeded, id:' + id + ', index:' + index);
                    }
                    else {
                        //console.log('noteIdToIndexTwo() failed, id:' + id);
                    }
                } else if (id.substring(0,15) == 'NOTEEDITBUTTON_') {
                    var minLength = 'NOTEEDITBUTTON_X_'.length;
                    if (id.length > minLength) {
                        index = id.substring(minLength, id.length);
                        //console.log('noteIdToIndexTwo() succeeded, id:' + id + ', index:' + index);
                    }
                    else {
                        //console.log('noteIdToIndexTwo() failed, id:' + id);
                    }
                } else if (id.substring(0,17) == 'QUESTION_SUMMARY_') {
                    var minLength = 'QUESTION_SUMMARY_X_'.length;
                    if (id.length > minLength) {
                        index = id.substring(minLength, id.length);
                        //console.log('noteIdToIndexTwo() succeeded, id:' + id + ', index:' + index);
                    }
                    else {
                        //console.log('noteIdToIndexTwo() failed, id:' + id);
                    }
                }
                return index;
            }
            
            function packageLine(indexOne, indexTwo, newValue, newName) {
                var line = { }
                var question = getQuestion(indexOne, indexTwo);

                line.questionId = question.id;
                var answer = getAnswer(question, newValue, newName);
                
                if(answer) {
                    line.answer = answer.id;
                } else {
                    line.answer = null;
                }   
                line.note = getNoteText('#NOTE_' + indexOne + '_' + indexTwo);
                    
                return line;
            }
            
            function getAnswer(question, newValue, newName) {
                var found = false;
                var myAnswer;
                
                jQuery.each(question.options,
                    function (index, option) {
                        if((option.score == newValue) && (option.id == newName)) {
                            myAnswer = option;
                            found = true;
                            return false;
                        }   
                    }
                )
                
                if(found == false) {
                    //console.log('getAnswer() failed, newValue:' + newValue);
                } else {
                    //console.log('getAnswer() succeeded, newValue:' + newValue);
                }   
                
                return myAnswer;
            }
            
            function getQuestion(indexOne, indexTwo) {
                
                var myCategoryQuestions = data.categories[indexOne - 1];
                var myQuestion = myCategoryQuestions.questions[indexTwo - 1];
                                
                return myQuestion;
                    
            }
            
            function autoExpandBlocks(questionBlocks) {
                
                var i;
                var cookie;
                var opportunityId = '{!JSENCODE(Opportunity.id)}';
                
                for (i = 1; i < questionBlocks; i++) {
                
                    cookie = jQuery.cookies.get(opportunityId + 'QUESTIONBLOCKSUMMARY_' + i);

                    if (cookie == null) {
                        jQuery.cookies.set(opportunityId + 'QUESTIONBLOCKSUMMARY_' + i, false);
                    }               
                    if ((cookie == null && i == 1) || cookie == true) {

                        jQuery('#QUESTIONBLOCKSUMMARY_' + i).find('.spanToggle').trigger('click');

                    }
                }
            }
            
            function getHelpInformation(id) {
                try {
                    var categorySepIndex = id.indexOf('_');
                    var questionSepIndex = id.lastIndexOf('_');
                    var categoryIndex = id.substring(categorySepIndex + 1, questionSepIndex);
                    var questionIndex = id.substring(questionSepIndex + 1);
                    var myHelp = data.categories[categoryIndex-1].questions[questionIndex-1].help;
                    if((myHelp != undefined) && (myHelp != null) && (myHelp.length > 0)) {
                        return jQuery('<div class="HOVERHELP">').html(myHelp || '');
                    } else {
                        return '';
                    }
                }
                catch(e) {
                    return '';
                }
            }            
            
            
            function toggle() {
                var id = jQuery(this).parent().attr('id');
                var index = id.substring(id.indexOf('_') + 1);
                var expanding = false;
                 
                if (jQuery(this).hasClass('spanToggleExpanded')) {
                    expanding = false;
                    jQuery(this).removeClass('spanToggleExpanded');
                }
                else {
                    expanding = true;
                    jQuery(this).addClass('spanToggleExpanded');
                }
                
                    
                jQuery(this).parent().parent().children('div.divCriteriaBlock').each(
                    function(index, element) {
                    
                        if (expanding) {
                            jQuery(this).removeClass('HIDDEN');
                        }
                        else {
                            jQuery(this).addClass('HIDDEN');
                        }
                    }
                )
                
                var opportunityId = '{!JSENCODE(Opportunity.id)}';
                jQuery.cookies.set(opportunityId + id, expanding);
            }
            
            function setUpMaxLimitCheck() {

                jQuery('TextArea#NOTEEDITOR').on('change keydown keyup mousedown mouseup', function() {
                    var $this = jQuery(this);
                        value = $this.val(),
                        valueLength = value.length || 0;
                    
                    if(valueLength > limitSize) {
                        $this.val(value.substring(0,limitSize));
                    }
            
                });

            };
            
            var ajaxSpinnerCnt = 0;
            
            function showAjaxSpinner(show) {
                
                if (show) { 
                    ajaxSpinnerCnt++;
                    if (ajaxSpinnerCnt == 1) {

                        jQuery('#SPINNER').append(jQuery('<img>').attr('id', 'tas_ajax_spinner').addClass('spinner').attr('src', '{!JSENCODE(URLFOR($Resource.ttgomjs, '/ttg/graph/images/loader.gif'))}'));
                        jQuery('#SPINNER').css("top", ( jQuery(window).height() - jQuery('#SPINNER').height() ) / 2+jQuery(window).scrollTop() + "px");
                        jQuery('#SPINNER').css("left", ( jQuery(window).width() - jQuery('#SPINNER').width() ) / 2+jQuery(window).scrollLeft() + "px");

                    }                   
                }
                else {

                    ajaxSpinnerCnt--;
                    if (ajaxSpinnerCnt <= 0) {                  
                        jQuery('#SPINNER').html('');
                        ajaxSpinnerCnt = 0;
                    }

                }
            }
            
            function wrapGet (opportunityId, callback) {

                addSerialiseCalls('get', opportunityId, callback);

            }
            
            function wrapPutPost (params, callback) {
                addSerialiseCalls('put', params, callback);

            }

            function wrapGet (opportunityId, callback) {

                addSerialiseCalls('get', opportunityId, callback);

            }

            function _wrapPutPost (params, callback) {

                showAjaxSpinner(true);

                var ret = function (result) { showAjaxSpinner(false); callback(data); }

                ttgApi.putMilestonesJS('{!JSENCODE(Opportunity.id)}', { linechange: params }, handleResponse, undefined, ret);

            }

            function _wrapGet (opportunityId, callback) {

                showAjaxSpinner(true);
                
                var ret = function (result) { showAjaxSpinner(false); callback(data); }

                ttgApi.getMilestonesJS(opportunityId, updateRawData, undefined, ret);

            }
            
            var stack = [];
            function addSerialiseCalls(method, params, callback) {
                stack.push({ method: method, params: params, callback: callback });
                if (processing == 0) {
                    processSerialiseCalls();
                }
            }

            var processing = 0;
            
            function processSerialiseCalls() {

                
                var obj = stack.shift();

                if (obj == undefined) {

                }
                else if (obj.method == 'get') {

                    processing++;
                    _wrapGet(obj.params, function (result) { try {obj.callback(result);}finally{ processedSerialiseCalls();} });

                }
                else if (obj.method == 'put') {

                    processing++;
                    _wrapPutPost(obj.params, function (result) { try {obj.callback(result);}finally{ processedSerialiseCalls();} });

                }
                
            }
            
            function processedSerialiseCalls() {
                processing--;
                processSerialiseCalls();
            }               
            
            
            that.getOpportunityGauge = getOpportunityGauge;
            
            return that;
        })(spec);


        jQuery(
            function () {
                ttg_opportunitygauge.getOpportunityGauge();
            }
        )
            
            
    </script>   

<style>
DIV#TAS {
    
}

DIV#TAS A {
    cursor: pointer;
}

DIV#TAS DIV.PAGEWIDTH {
    width: 858px;
}

DIV#AssessmentResult {
    clear: both;
}

DIV#AssessmentResult TABLE {
    border: 0 none;
    border-spacing: 0;
    padding: 0;
}

DIV#AssessmentResult TR.QUESTIONBLOCKSUMMARY {
    background-color: #F0F0F0;
}

DIV#AssessmentResult TextArea.DMAPP_NOTE {
    
}

DIV#AssessmentResult DIV.HIDDEN {
    display: none;
}

DIV#AssessmentResult DIV.NOTEDLG {
    display: none;
}

DIV#NOTEEDIT {
    font-family: Arial, Helvetica, sans-serif;
    font-size: 12px;
}

TEXTAREA#NOTEEDITOR {
    float: left;
    height: 120px;
    width: 260px;
}

SPAN#NOTE_CRITERIA {
    float: right;
    font-weight: bolder;
    width: 340px;
}

SPAN#NOTE_HELP {
    color: #555555;
    float: right;
    width: 340px;
    font-size: 12px;
}

DIV#AssessmentResult DIV.divQuestionsBlock {
    background-color: rgb(203,213,226);
    border: 1px solid rgb(160,181,202);
    border-radius: 7px;
    -moz-border-radius: 7px;
    -webkit-border-radius: 7px;
    box-shadow: 0 1px 0 rgba(255, 255, 255, 0.7) inset;
}

DIV#AssessmentResult DIV.divQuestionBlock {
    bug01-height: 40px;
    padding: 0px;
}

DIV#AssessmentResult DIV.NOTEEDITBUTTON {
    background-image: url('{!URLFOR($Resource.Assessment, 'icon_edit.png')}');
    width: 16px;
    height: 16px;
}

DIV#AssessmentResult DIV.NOTEINFOICON {
    background-image: url('{!URLFOR($Resource.ttgomjs, 'ttg/graph/feimages/icon_info.png')}');
    width: 12px;
    height: 12px;
    margin: 2px;
}

DIV#AssessmentResult DIV.QUICKLINK {
    background-image: url('{!URLFOR($Resource.Assessment, 'icon_movie.png')}');
    width: 20px;
    height: 16px;
    margin: 4px;
}

DIV#AssessmentResult SPAN.spanToggle {
    background-image: url('{!URLFOR($Resource.Assessment, 'drawer_expand.png')}');
    background-repeat: no-repeat;
    
    but01-float: left;
    display: inline-block;
    vertical-align: top;
        
    height: 12px;
    margin: 3px;
    width: 12px;
    margin-top: 13px;
    clear: left;
}

DIV#AssessmentResult SPAN.spanToggleExpanded {
    -webkit-transform: rotate(90deg);
    -moz-transform: rotate(90deg);
    filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1 );
}

DIV#AssessmentResult SPAN.spanQuestion {
    but01-float: left;
    display: inline-block;

    font-size: 16px;
    font-weight: normal;
    width: 570px;
    margin-top: 10px;
    color: #2C3B51;
}

DIV#AssessmentResult SPAN.spanQuestionSummary {
    display: inline-block;
    vertical-align: top;
    position: relative;
    width: 255px;
    margin-right: 6px;
    border: 0px;
    margin-left: -37px;
}

DIV#AssessmentResult .hideCompetitveAnswer {
    visibility: hidden;
}

DIV#AssessmentResult SPAN.spanBreak {
    clear: both;
}

DIV#AssessmentResult DIV.divCriteriaBlock {
    background-color: white;
    border: 1px solid rgb(160,181,202);
    border-radius: 4px 4px 4px 4px;
    
    bug01_height: 20px;
    
    margin: 0px 10px 10px;
    padding: 5px;
    
}

DIV#AssessmentResult SPAN.spanCriteriaIndex {

    bug01_float: left;
    display: inline-block;
    vertical-align: top;

    width: 20px;
    margin-top: 3px;
}

DIV#AssessmentResult SPAN.spanSummaryTotal {
    color : white;
    display: inline-block;
    font-size: 16px;
    font-weight: bold;
    left: 32px;
    margin-top: 9px;
    position: relative;
    vertical-align: top;
    width: 20px;
    z-index: 1;
    display: none;
}

DIV#AssessmentResult SPAN.spanCriteria {

    bug01_float: left;
    display: inline-block;

    /*font-weight: bold;*/
    width: 460px;
    margin-top: 2px;
    line-height: 16px;
}

DIV#AssessmentResult DIV.divNote {
    border: 1px solid #d8d8d8;
    background-color: #f8f8f8;
    border-radius: 4px 4px 4px 4px;
    font-weight: normal;
    margin-top: 4px;
    padding: 10px;
    word-wrap: break-word;
    color: #808080;
}

DIV#AssessmentResult SPAN.spanCriteriaNote {

    bug01_float: left;
    display: inline-block;
    vertical-align: top;
    margin-left: 6px;
    margin-top: 5px;
    width: 20px;
}

DIV#AssessmentResult SPAN.spanCriteriaInfo {
    bug01_float: left;
    display: inline-block;
    vertical-align: top;
    margin-left: 9px;
    margin-top: 5px;
    width: 20px;
}

DIV#AssessmentResult SPAN.spanCriteriaSummary {
    bug01_float: left;
    display: inline-block;
    vertical-align: top;

    width: 150px;
    margin-top: -1px;
    margin-left: 4px;
    margin-right: 5px;
    border-left: 1px solid white;
    border-right: 1px solid white;
}

DIV#AssessmentResult SPAN.spanCriteriaSummary SELECT {
    border: 1px solid #C0C0C0;
    padding: 2px;
    border-radius: 3px;
    -moz-border-radius: 3px;
    -webkit-border-radius: 3px;
    /*width: 250px;*/
    width: 200px;
}

    DIV#AssessmentResult .narrow_dropdown {
        width: 200px !important;
    }

DIV#AssessmentResult .RHS_container{
    display: block;
    float: right;
    width: 64px;
}
    
    DIV#AssessmentResult SPAN.spanCriteriaScore {
        display: block;
        text-align: center;
        float: left;
    }
    
        DIV#AssessmentResult .question_score_box {
            width: 25px;
            height: 20px;
            font-size: 12px;
            border-radius: 4px 4px 4px 4px;
            border-width: 1px 1px 1px 1px;
            padding-top: 5px;
            font-weight: bold;
            color: #fff;
        }
    
    DIV#AssessmentResult SPAN.spanCriteriaQuicklink {
        display: inline-block;
        vertical-align: top;
        float: right;
    }
    
    DIV#AssessmentResult SPAN.spanCategoryQuicklink {
        display: inline-block;
        vertical-align: top;
        margin-top: 7px;
    }

DIV#AssessmentResult DIV.SCOREBLOCK {
    border: 1px solid black;
    border-radius: 4px 4px 4px 4px;
    /*height: 14px;*/
    padding: 4px 7px 2px 7px;
    margin: 5px;
    border-width: 1px 1px 1px 30px;
}

DIV#AssessmentResult DIV.SCOREBLOCK:after { 
   content: " ";
   display: block; 
   height: 0; 
   clear: both;
}

DIV#AssessmentResult DIV.SCOREBLOCK_TOTAL {
    color: #2C3B51;
    float: left;
    font-weight: bolder;
    text-align: center;
    width: 22px;
    margin-left: -34px;
    color: white;
    font-size: 15px;
    margin-top: 1px;
}

DIV#AssessmentResult DIV.SCOREBLOCK_SCORE {
    border-radius: 4px 4px 4px 4px;
    float: left;
    height: 16px;
    margin: 2px;
    text-align: center;
    width: 16px;
    /*cursor: pointer;*/
}

DIV#AssessmentResult DIV.SCOREBLOCK_SCORE_SHADOW {
    margin-top: 2px;
}

DIV#AssessmentResult .spanScoreVeryHigh {
    background-color: #019040;
    color: white;
}

DIV#AssessmentResult DIV.divScoreVeryHigh {
    background: none repeat scroll 0 0 #019040;
    background-image: url('{!URLFOR($Resource.Qualification, 'icon_positive.png')}');
}

DIV#AssessmentResult .spanScoreHigh {
    background-color: #51ED0B;
    color: white;
}


DIV#AssessmentResult .spanScoreMedium {
    background-color: #FFBE00;
    color: white;
}

DIV#AssessmentResult DIV.divScoreMedium {
    background: none repeat scroll 0 0 #FFBE00;
    background-image: url('{!URLFOR($Resource.Qualification, 'icon_indeterminate.png')}');
}

DIV#AssessmentResult .spanScoreLow {
    background-color: #E36054;
    color: white;
}

DIV#AssessmentResult .spanScoreVeryLow {
    background-color: #CC0000;
    color: white;
}

DIV#AssessmentResult DIV.divScoreVeryLow {
    background: none repeat scroll 0 0 #CC0000;
    background-image: url('{!URLFOR($Resource.Qualification, 'icon_negative.png')}');
}

DIV#AssessmentResult DIV.divScoreYes {
    background-color: #019040;
    color: white;
}

DIV#AssessmentResult DIV.divScoreNo {
    background-color: #CC0000;
    color: white;
}

DIV#AssessmentResult DIV.divScoreUnscored {
    background-color: #ABABAB;
    color: #efefef;
}

DIV#AssessmentResult DIV.divScoreUnknown {
    background-color: #ABABAB;
    color: white;
}

DIV#AssessmentResult OPTION {
    background-color: white;
}

DIV#AssessmentResult OPTION.optionYesAnswer {
    color: #019040;
}

DIV#AssessmentResult OPTION.optionVeryHighAnswer {
    color: #019040;
}

DIV#AssessmentResult OPTION.optionHighAnswer {
    color: #51ED0B;
}

DIV#AssessmentResult OPTION.optionNoAnswer {
    color: #CC0000;
}

DIV#AssessmentResult OPTION.optionVeryLowAnswer {
    color: #CC0000;
}

DIV#AssessmentResult OPTION.optionLowAnswer {
    color: #E36054;
}

DIV#AssessmentResult OPTION.optionUnknownAnswer {
    color: #ABABAB;
}

DIV#AssessmentResult OPTION.optionMediumAnswer {
    color: #FFBE00;
}

DIV#AssessmentResult SELECT {
    float: left;
}

DIV#AssessmentResult SELECT.selectYesAnswer {
    background: none repeat scroll 0 0 #FFFFFF;
}

DIV#AssessmentResult SELECT.selectNoAnswer {
    background: none repeat scroll 0 0 #FFFFFF;
}

DIV#AssessmentResult SELECT.selectUnknownAnswer {
    background: none repeat scroll 0 0 #FFFFFF;
}

DIV#AssessmentResult div.competitorBar {
    height: 39px;
    padding-left: 339px;
}

DIV#AssessmentResult div.competitorBarGap {
    height: 20px;
}

DIV#AssessmentResult div.competitorCommonTitle {
    float: left;
    text-align: center;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
    width: 140px;
    border: 1px solid #A0B5CA;
    margin-right: 5px;
    padding: 10px 10px 10px 10px;
    position: relative;
    text-align: center;
    color: #374A61;
}

DIV#AssessmentResult div.competitorTitle {
    xborder-radius: 5px 5px 0px 0px;
    x-moz-border-radius: 5px 5px 0px 0px;
    x-webkit-border-radius: 5px 5px 0px 0px;
    bottom: -3px;
    border-bottom: 0px solid #A0B5CA;
}

DIV#AssessmentResult div.competitorFooter {
    border-top: 0px solid #A0B5CA;
    top: -1px;
}

DIV#AssessmentResult div.competitorGap {
    border-top: 0px solid #A0B5CA;
    border-bottom: 0px solid #A0B5CA;
}

DIV#AssessmentResult div.orgTitle {
    color: #404080;
    font-weight: bolder;
}

DIV#AssessmentResult .tasPointer {
    cursor: pointer;
}

#tooltip {
    position: absolute;
    z-index: 3000;
    border: 1px solid #111;
    background-color: #eee;
    padding: 5px;
    opacity: 0.85;
    border-radius: 4px;
    -moz-border-radius: 4px;
    -webkit-border-radius: 4px;
}

SPAN.HOVERANSWER {
    font-weight: bolder;
}

DIV.HOVERHELP {
    width:340px;
}


DIV#TAS #SPINNER {
    position: absolute;
}

</style>
</apex:page>
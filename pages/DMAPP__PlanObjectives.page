<apex:page standardController="DMAPP__DM_Account_Plan__c" extensions="DMAPP.TAMStandardController" action="{!logAMObjectivesUsage}"
    showHeader="true" 
    sidebar="false"
    docType="html-5.0"
    tabStyle="Account_Plans__tab"
    >
    <script type="text/javascript" src="{!$Resource.DMAPP__l10njs}"></script>
    
    <c:jQuery jQueryUI="true"
    	cookies="true"
    	underscore="true"
    	tooltip="true"
    	tools="true"
    	validate="true"
    	paging="true"
    	jqGrid="true"
    	textareaMaxlength="true"
    	chosen="true"
    	dropdown="true"/>

    <c:MobileRedirect TAM="true" />
				        
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/lib/ttgutils.js')}"/>
    
	<script src="{!URLFOR($Resource.OpportunityMapConfiguration)}"></script> 
	<script type="text/javascript" src="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/lib/jquery-ui-touch-patch.js')}"></script>
	
	<apex:include pageName="DMAPP__Debug" />
	
	<script type="text/javascript" src="{!URLFOR($Resource.ftk, 'forcetk.js')}"></script>
	<script type="text/javascript" src="{!URLFOR($Resource.dvls, 'js/flowplayer-3.2.6.js')}"></script>
	
	
	<apex:include pageName="DMAPP__ObjectivesModel" />    

    <apex:include pageName="DMAPP__Quicklinks" />
    <apex:include pageName="DMAPP__TAMSummaryTab" />
    <apex:include pageName="DMAPP__CRUD" />
    <!-- 
    <script>
        
        var ttg = ttg || {};        
        ttg.pre_fetch = ttg.pre_fetch || {};        
        ttg.pre_fetch['DMAPP.TAMStandardController.getJSR'] = '{!JSENCODE(preFetchObjectives)}';
                
    </script>
    -->
    
    <apex:include pageName="DMAPP__JSRemoting" />

<style>
	@import url("{!URLFOR($Resource.TAM,         	 'css/common.css')}");
	@import url("{!URLFOR($Resource.jQueryUI, 		 'css/custom-theme/jquery-ui-1.8.21.custom.css')}");
	@import url("{!URLFOR($Resource.ttgomjs,         'ttg/chatter/css/chatter_side_panel.css')}");
	@import url("{!URLFOR($Resource.ttgomjs,         'ttg/chatter/css/chatter_post.css')}");
	@import url("{!URLFOR($Resource.ttgomjs,         'ttg/graph/css/glyphs/style.css')}");
	@import url("{!URLFOR($Resource.ttgomjs,         'ttg/chatter/css/chatter_summary.css')}");
	@import url("{! URLFOR($Resource.TAM,            'css/solutionTooltip.css') }");
	
	
	.chosen-choices { /* DMDEV-4914 */
		min-width: 200px;
	}
	
	.chosen-drop { /* DMDEV-4914 */
		min-width: 200px !important;
	}

	.chosen-container-multi .chosen-choices li.search-field input[type=text] { /* DMDEV-4914 */
		min-width: 130px !important;
	}
	
	/* fix for DMDEV-4509 */
	DIV.CRUD #GLOBALERROR{
		width:90%;
	}
	
	DIV#TAS {
		width: 100%;
		max-width: 1400px;
	}
	
	DIV#TAS SPAN.spanToggleExpanded {
		/*
    	transform: rotate(90deg);
		-webkit-transform: rotate(90deg);
		-moz-transform: rotate(90deg);
		filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1 );
		*/
		background-image: url('{!URLFOR($Resource.TAM, 'images/icon_arrow_down.png')}') !important;
	}
	
	DIV#TAS SPAN.spanToggle {
    	/*background-image: url('{!URLFOR($Resource.Assessment, 'drawer_expand.png')}');*/
    	background-image: url('{!URLFOR($Resource.TAM, 'images/icon_arrow_up.png')}');
		background-repeat: no-repeat;
		clear: left;
		float: left;
		height: 12px;
		margin: 6px;
		width: 12px;
	}

    DIV#TAS .tasPointer {
        cursor: pointer;
    }
    

    DIV#TAS TBODY.HIDDEN {
        display: none;
    }
    
    DIV#TAS DIV#ITEMS_FILTER {
        float:  left;
    }
    
    DIV#TAS DIV#ITEMS_PLUS_DETAILS {
        border: 1px solid black;
        float: left;
        max-width: 950px;
        position: relative;
        width: 100%;
    }
    
    DIV#TAS DIV#ITEMS {
        float: left;
        min-height: 355px;
        width: 100%;
        position:relative;
    }
    
    DIV#TAS DIV#ITEM_DETAILS {
        /*
        float:  right;
        width:  20%;
        */
        width: 100%;    /* was 125% */
    }
    
    DIV#TAS DIV#TIMELINE {
        float:  left;
        max-width: 1400px;
        width: 100%;
    }
    
    DIV#TAS TR.rowSelected {
        background-color:   #FFFFCC; /* #C7E3FF; */
    }
    
    DIV#TAS span.add_task {
        background:url('{!URLFOR($Resource.TAM, 'images/icon_add_task.png')}') no-repeat scroll left top transparent;
        border-style: none;
        height: 16px;
        margin: 0 5px 0 0;
        padding: 0;
        vertical-align: text-bottom;
        width: 16px;
    }
    
    DIV#TAS .edit_link {
        background:url('{!URLFOR($Resource.TAM, 'images/icon_edit.png')}') no-repeat scroll left top transparent;
        cursor: pointer;
        display: block;
        float: left;
        height: 16px;
        margin: 0px;
        text-decoration: none;
        text-indent: -999em;
        width: 16px;
        margin-right:5px;
    }
    
    DIV#TAS span.edit_link {
        background-image: url('{!URLFOR($Resource.DecisionCriteria, 'icon_edit_criteria.png')}');
        cursor: pointer;
        height: 16px;
        margin: 0px;
        width: 16px;
        margin-right:5px;
    }
    
    DIV#TAS td.action {
        white-space: nowrap;
        width: 50px;
    }
    
    DIV#TAS .save_link {
        background:url('{!URLFOR($Resource.DecisionCriteria, 'icon_save.png')}') no-repeat scroll left top transparent;
        cursor: pointer;
        display: block;
        float: left;
        height: 16px;
        margin: 0px;
        text-decoration: none;
        text-indent: -999em;
        width: 16px;
        margin-right:5px;
    }
    
    DIV#TAS .undo_link {
        background:url('{!URLFOR($Resource.DecisionCriteria, 'icon_undo.png')}') no-repeat scroll left top transparent;
        cursor: pointer;
        display: block;
        float: left;
        height: 16px;
        margin: 0px;
        text-decoration: none;
        text-indent: -999em;
        width: 16px;
    }
    
    DIV#TAS .del_link {
        background:url('{!URLFOR($Resource.TAM, 'images/icon_delete.png')}') no-repeat scroll left top transparent;
        cursor: pointer;
        display: block;
        float: left;
        height: 16px;
        margin: 0px;
        text-decoration: none;
        text-indent: -999em;
        width: 16px;
    }
    
    DIV#TAS SPAN.HIDDEN {
        display: none;
    }
    
    DIV#TAS div.error {
        color: #FF0000;
        font-weight:bold;
    }
    
    DIV#TAS DIV.imageBlock {        
        height: 16px;
        margin: 0 auto;
        text-align: center;
        width: 16px;
        border-radius:          1px 1px 1px 1px;
        -moz-border-radius:     1px 1px 1px 1px;
        -webkit-border-radius:  1px 1px 1px 1px;
    }
    
    DIV#TAS DIV.imageBlockBig {     
        float: left;
        height: 20px;
        margin-left: 2px;
        text-align: center;
        width: 20px;
        border-radius:          1px 1px 1px 1px;
        -moz-border-radius:     1px 1px 1px 1px;
        -webkit-border-radius:  1px 1px 1px 1px;
    }
    
    /* CSS for 'Done' radio button */
    
    DIV#TAS  DIV.completedPriorityActive {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/complete.png')}');
    }
    
    DIV#TAS  DIV.completedPriorityInactive {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/complete-inactive.png')}');
    }
    
    
    /** CSS for radio buttons Objective/Task Priority */
    
    DIV#TAS  DIV.highPriorityActiveBig {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/high-priority-active-big.png')}');
    }
    
    DIV#TAS  DIV.highPriorityInactiveBig {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/high-priority-inactive-big.png')}');
    }
    
    DIV#TAS  DIV.normalPriorityActiveBig {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/medium-priority-active-big.png')}');
    }
    
    DIV#TAS  DIV.normalPriorityInactiveBig {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/medium-priority-inactive-big.png')}');
    }
    
    DIV#TAS  DIV.lowPriorityActiveBig {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/low-priority-active-big.png')}');
    }
    
    DIV#TAS  DIV.lowPriorityInactiveBig {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/low-priority-inactive-big.png')}');
    }
    
    
    /** CSS for Objective/Task Priority */
    
    DIV#TAS  DIV.highPriorityActive {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/high-priority-active.png')}');
    }
    
    DIV#TAS  DIV.highPriorityInactive {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/high-priority-inactive.png')}');
    }
    
    DIV#TAS  DIV.normalPriorityActive {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/medium-priority-active.png')}');
    }
    
    DIV#TAS  DIV.normalPriorityInactive {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/medium-priority-inactive.png')}');
    }
    
    DIV#TAS  DIV.lowPriorityActive {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/low-priority-active.png')}');
    }
    
    DIV#TAS  DIV.lowPriorityInactive {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/low-priority-inactive.png')}');
    }
    
    
    /** CSS for Objective/Task Status */
    
    DIV#TAS  DIV.notStartedStatus {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/not-started.png')}');
    }
    
    DIV#TAS  DIV.inProgressStatus {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/in-progress.png')}');
    }
    
    DIV#TAS  DIV.pausedDeferredStatus {
        background: none repeat scroll 0 0 #999999; /* was #E5E5E5 */
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/paused-deferred.png')}');
    }
    
    DIV#TAS  DIV.overdueStatus {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/overdue.png')}');
    }
    
    DIV#TAS  DIV.completedStatus {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/complete.png')}');
    }
    
    DIV#TAS  DIV.completedAchievedStatus {
        background: none repeat scroll 0 0 #E5E5E5;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/complete_achieved.png')}');
    }
    
    DIV#TAS  DIV.completedNotAchievedStatus {
        background: none repeat scroll 0 0 transparent;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/complete-inactive.png')}');
    }
    
    DIV#TAS  DIV.openStatusBar {
        background: none repeat scroll 0 0 #999999;     /* grey */
        background-image: url('{!URLFOR($Resource.Assessment, 'common/images/transparent_dot.gif')}');
    }
    
    DIV#TAS  DIV.notStartedStatusBar {
        background: none repeat scroll 0 0 #999999;     /* grey */
        background-image: url('{!URLFOR($Resource.Assessment, 'common/images/transparent_dot.gif')}');
    }
    
    DIV#TAS  DIV.inProgressStatusBar {
        background: none repeat scroll 0 0 #DB6505;     /* yellow */
        background-image: url('{!URLFOR($Resource.Assessment, 'common/images/transparent_dot.gif')}');
    }
    
    DIV#TAS  DIV.pausedDeferredStatusBar {
        background: none repeat scroll 0 0 #DB6505;     /* yellow */
        background-image: url('{!URLFOR($Resource.Assessment, 'common/images/transparent_dot.gif')}');
    }
    
    DIV#TAS  DIV.overdueStatusBar {
        background: none repeat scroll 0 0 #CC0000;     /* red  */
        background-image: url('{!URLFOR($Resource.Assessment, 'common/images/transparent_dot.gif')}');
    }
    
    DIV#TAS  DIV.completedStatusBar {
        background: none repeat scroll 0 0 #43AB07;     /* green */
        background-image: url('{!URLFOR($Resource.Assessment, 'common/images/transparent_dot.gif')}');
    }
    
    
    /* CSS for Objectives table */
    /* CSS for an Objective row when status == 'Completed' */
    DIV#TAS  TD.completed {
        color       :   #AAB0A5 !important;     
    }
    
    DIV#TAS  SPAN.completed {
        color       :   #AAB0A5 !important;     
    }
    
    /* CSS for Objective header */
    DIV#TAS TH {
        background-color: #CBD5E2;  /* same as Team View header background */
        border-right: 1px solid #FFFFFF;
        line-height: 20px;
        padding: 5px 20px 5px 5px;
        color: #454545 !important; /* same as Team View header text color */
        font-weight: normal !important;

    }
    
    
    /* CSS for Objective header */
    DIV#TAS TR {
        background-color    :   white;
        padding             :   3px 20px 3px 5px;
        font-size: 11px !important;
    }
    
    
    /* Overdue count for tasks header */
    DIV#TAS DIV.overdueCount {
        color: #FF0000;
        text-align  :   right;
    }
    
    /* Overdue count for due date in objectives header */
    DIV#TAS DIV.overdueDueDate {
        color: #FF0000;
    }
    
    DIV#TAS DIV.overdueActivityDate {
        color: #FF0000;
    }
    
    /* for Objective Name, Owner, DueDate and for Action List Period (eg. 'This Week') */
    DIV#TAS DIV.boldText {
        font-weight :   bold;
    }
    
    /* for background of Add Objective / Add Task buttons */
    DIV#TAS .addButton {
        background-color: #F3F3F3;
        border: 1px solid #E3E3E3;
        border-radius: 3px 3px 3px 3px;
        float: left;
        font-size: 12px;
        line-height: 20px;
        margin-bottom: 5px;
        padding: 5px 10px;
        cursor: pointer;
    }
    
    /* for action status */
    DIV#TAS SPAN.STATUS_PERCENTBAR {
        /*
        background-color: white;    was #E3E3E3;*/
        border: 1px solid white;    
        border-radius:          1px 1px 1px 1px;
        -moz-border-radius:     1px 1px 1px 1px;
        -webkit-border-radius:  1px 1px 1px 1px;
        */
        display: inline-block;
        height: 16px;
        margin: 1px 1px 1px 1px;
        vertical-align: top;
        /* width: 171px; was 160px; */
    }
    
    DIV#TAS SPAN.STATUS_PERCENTBAR IMG.StatusComplete {
        background  :   #43AB07;        /* green */
    }
    
    DIV#TAS SPAN.STATUS_PERCENTBAR IMG.StatusOpen {
        background  :   #999999;        /* grey */
    }
    
    DIV#TAS SPAN.STATUS_PERCENTBAR IMG.StatusInProgress {
        /*background    :   #95D0F6;*/          /* blue */
        background  :   #DB6505;        /* yellow */
    }
    
    DIV#TAS SPAN.STATUS_PERCENTBAR IMG.StatusNotStarted { 
        /*background    :   #BA6146;*/      /* brown */
        background  :   #999999;        /* grey */
    }
    
    DIV#TAS SPAN.STATUS_PERCENTBAR IMG.StatusOverdue { 
        background  :   #CC0000;        /* red  */
    }
    
    DIV#TAS SPAN.STATUS_PERCENTBAR IMG.StatusPaused { 
        background  :   #999999;        /* grey */
    }


    
    
    /* CSS for filter */
    
    DIV#TAS SPAN.filterTitle {
        font-weight :   bold;
        padding-left:   30px;
    }
    
    DIV#TAS SPAN.filterHideCompleted {
        font-weight :   bold;
        padding-left:   30px;
    }
    
    DIV#TAS SPAN.filterPriorityCheckbox {
        padding-left:   30px;
    }
    
    DIV#TAS SPAN.filterOther {
        display: block;
        font-weight: bold;
        padding-left: 15px;
    }
    
    span#planunitslabel { width: 55px; }
    
    
    /* CSS for objective/task details */
    
    
    DIV#TAS SPAN.detailsTitle {
        font-weight :   bold;
        padding-right:  10px;
    }
    
    DIV#TAS TD.detailsHeader {
        border-bottom   :   2px solid #E1E6EC;
        padding-bottom  :   5px;    
    }
    
    DIV#TAS TD.detailsFirstRow {
        padding-top :   5px;    
    }
    
    DIV#TAS DIV.detailsLinks {
        margin-left:    100px;
    }
    
    DIV#TAS SELECT#task_detail_objectives {
        max-width:  75%;
        width:      75%;
    }   
    
    /* CSS for data table */
    DIV#TAS TABLE.dataTableClass {
        border-collapse: separate;
        border-spacing: 0;
        padding: 4px;
        width: 100%
    }
    
    DIV#TAS TABLE.dataTableClass th { // font-size: 12px; }
    
    DIV#TAS TABLE.dataTableClass .headerColumn0 {
        width   :   20%;
    }
    DIV#TAS TABLE.dataTableClass .headerColumn1 {
        width   :   15%;
    }
    DIV#TAS TABLE.dataTableClass .headerColumn2 {
        width   :   20%;
    }
    DIV#TAS TABLE.dataTableClass .headerColumn3 {
        width   :   10%;
    }
    DIV#TAS TABLE.dataTableClass .headerColumn4 {
        width   :   5%;
    }
    DIV#TAS TABLE.dataTableClass .headerColumn5 {
        width   :   5%;
    }
    DIV#TAS TABLE.dataTableClass .headerColumn6 {
        width   :   20%;
    }
    DIV#TAS TABLE.dataTableClass .headerColumn7 {
        width   :   10%;
    }
    
    DIV#TAS TABLE.dataTableClassExtra {
        border-collapse: separate;
        border-spacing: 0;
        padding: 4px;
        width: 100%
        background: #fff;
        border-radius:10px;
        border-style:solid;
        border-width: 1px;
        -moz-border-radius:10px;
        -webkit-border-radius:10px;
    }
    
    DIV#TAS .dataTableClassExtra TR TD {
        border-bottom: 1px solid #E1E6EC !important;
        padding: 4px;
        text-align: left;
        vertical-align: top;
        /*white-space: nowrap;*/
        cursor  :   default;
    }
    
    DIV#TAS TABLE.dataTableClassExtra .header {
        background-color: #CBD5E2 !important;
        font-size: 12px;
        font-weight: bold;
        padding-left: 5px;
        text-align: left !important;
    }
    
    .action { width: 40%; }
    
    .owner { width: 20%; }
    
    .date { width: 10%; }
    
    .priority { width: 5%; }
    
    .status { width: 15%; }
    
    .edit-delete { width: 10%; }
    
    .edit-delete-div {
        margin: 0 auto;
        width: 38px;
    }
    
             
    DIV#TAS .dataTableClassColumn {
        /*
        padding: 1px 1px;
        text-align: left;
        */
        border-bottom: 0px solid black !important; /* was 1px */
    }
    
    DIV#TAS .dataTableClassToggleColumn {
        /*
        padding: 1px 1px;
        text-align: left;
        */
        border-bottom: 0px solid #E1E6EC !important;
    }
    
    DIV#TAS .dataTableClassFirstColumn {
        padding-left:   10px !important;
    }
     
    DIV#TAS .dataTableClass TR TD {
        border-bottom: 1px solid #E1E6EC !important;
        padding: 4px;
        text-align: left;
        vertical-align: top;
        /*white-space: nowrap;*/
        cursor  :   pointer;
    }
    
    DIV#TAS .dataTableClass TR:hover {
        background-color: #E9EEF3; 
        background-image:none;
    }
    
    DIV#TAS .dataTableClass TR.nohover {
        background-color: #FFFFFF !important; 
    }
    
    DIV#TAS .actionObjectiveName SPAN:hover {
        background-color: #E9EEF3;
        cursor  :   pointer;
    }

    
    /* position Tasks off the page */
    DIV#TAS TABLE.objectiveTasks {
        left: 999px;
        z-index: 40;
        /* display: none; */
        position:   relative;
        background-color: white;
        
        -moz-border-bottom-colors: none;
        -moz-border-left-colors: none;
        -moz-border-right-colors: none;
        -moz-border-top-colors: none;
        border-color: #9ECAED;
        border-image: none;
        border-radius: 7px 7px 7px 7px;
        border-right: 3px solid #9ECAED;
        border-spacing: 5px !important;
        border-style: solid;
        border-width: 0 3px 3px;
        box-shadow: 0 0 10px #9ECAED;
        /* display: none; */
        font-size: 16px !important;
        /* left: 999px; */
        margin: 20px;
        outline: medium none !important;
        /* position: absolute; */
        text-align: left;
        width: 956px !important;
        /* z-index: 40; */
        /* display: none; */
    }
    
    DIV#TAS TABLE.HIDDEN {
        display: none !important;
    }
    
    
    DIV#TAS DIV.priorityHeader {
        /* background: none repeat scroll 0 0 #E5E5E5; */
        background: no-repeat scroll left top transparent;
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/priority-high.png')}');
    }
    
    DIV#TAS DIV.tasksThisPeriodCount {
        float: left;
        padding-top: 4px;
    }
    
    
    /* start: CSS for side/details panel (Task or Objective details) */
    DIV#TAS body{
        
    }

    DIV#TAS #expand_collapse_details {
        cursor: pointer;
        height: 20px;
        padding-right: 8px;
        position: absolute;     
        right: 6px;
        top: 10px;
        width: 20px;
        z-index: 49;
    }

    DIV#TAS .rotated {
    }

    DIV#TAS .slideOutDiv{
        font-family: Arial;
        /*
        width:460px;
        margin: 0 auto;
        */
    }


    DIV#TAS #details_form {
        background-color: #ffffff;
        bottom: 0;
        display: none;
        font-size: 12px;
        left: 0 !important;
        padding: 20px 20px 20px;
        position: absolute;
        right: 0;
        top: 0;
        width: auto !important;
        z-index: 41;
    }


    DIV#TAS #details_form p {
        clear: both;
        float: left;
        margin: 0;
        padding: 0;
        width: 100%;
    }

    DIV#TAS #details_form select {
        float: right;
        border-color: #CBD5E2; /* #9ecaed; */
        box-shadow: 0 0 3px #000;
        background-color: #CBD5E2;  /* #F2F2F2; */
        border-radius: 5px;
    }

    DIV#TAS #details_form p label {
        float: left;
        line-height: 25px;
    }

    DIV#TAS #details_form .topText{
        padding: 10px;
    }

    DIV#TAS #details_form .topText input{
        background-color: #FFF;
        width: 275px;
        height: 25px;
        margin-top: -5px;
        margin-left: -5px;
    }

    DIV#TAS #details_form .texter {
        clear: none;
        float: left;
        margin-top: 10px !important;
        width: 50%;
    }

    DIV#TAS #details_form .texter textarea {
        width:270px;
    }

    DIV#TAS #details_form .topLabel {
        background-color: #ffffff;
        border-bottom: 1px solid #CCCCCC;
        border-radius: 0 0 0 0;
        clear: both;
        float: left;
        position: relative;
        width: 100%;
        height:40px;
        padding-bottom : 8px;
    }

    DIV#TAS #details_form .topLabel {
    }

    DIV#TAS #details_form .topLabel label {
        float: left;
        line-height: 30px;
        margin-bottom: 10px;
        font-size: 18px;
        font-weight: normal;
    }

    DIV#TAS #details_form .topLabel img {
        float: left;
    }

    DIV#TAS #details_form .topLabel img {
        float: left;
        margin-top: -6px;
    }

    DIV#TAS #details_form .topLabel .firstImg {
        margin-left: 40px;
    }

    DIV#TAS #details_form .topLabel .secondImg {
        margin-left: 5px;
    }

    DIV#TAS #details_form .topLabel label {
        margin-top: 1px;

    }

    DIV#TAS #details_form p .calender {
        float: right;
        width: 100px;
    }

    DIV#TAS #details_form .title {
        font-size: 24px;
    }

    
    DIV#TAS #details_form .firstLabel {
        float: left;
        width: 50%;
    }


    DIV#TAS #details_form .secondLabel {
        float: right;
        width: 50%;
    }

    DIV#TAS #details_form .middleDiv {
        height: 100%;
        border-left: 1px solid #ccc;
        width: 1px;
        margin: 0 auto;
        width: 10px;
    }

    DIV#TAS #details_form .rowDiv {
        clear: left;
        display: block;
        float: left;
        line-height: 25px;
        width: 100%;
        font-size: 11px;
    }

    DIV#TAS #details_form .lineDiv {
        border-bottom: 1px solid #E3E3E3;
        float: left;
        height: 1px;
        margin:0px;
        padding:0px;
        width: 100%;
    }

    DIV#TAS #details_form .noDiv {
        height: 1px;
        width: 75%;
        margin: 0 auto;
        border-bottom: 1px solid #fff;
        padding-top: 5px;
        padding-bottom: 5px;
        opacity: 0.4;
    }

    DIV#TAS textarea{
        float: left;
        clear: both;
        margin-bottom: 10px;
    }
    
    DIV#TAS #details_form DIV.detailsButtonLinks {
        position: absolute;
        right: 0;
        top: 10px;
    }
    
    /* end: CSS for side/details panel (Task or Objective details) */
    
    /* CSS for filter radio buttons */
    DIV#TAS INPUT[type=radio] {
        clip: rect(1px, 1px, 1px, 1px);
        position: absolute !important;
    }
    
    /* start: CSS for tabs panel */
    DIV#TAS #page-wrap {
        background-color: #ffffff;
        bottom: 0;
        display: none;
        font-size: 16px;
        left: 170px;
        overflow-y: auto; /*scroll;*/
        position: absolute;
        right: 0;
        top: -1px;
        z-index: 45;
        border-left:1px solid #ccc;
        border-top: 1px solid black;
        /*border-bottom :   1px solid black;*/
    }

    DIV#TAS #tabOne, DIV#TAS #tabTwo{
        overflow-y: y:hidden; /*scroll;*/
        background-color: #ffffff !important;
        font-weight: normal !important;
        border: 0px solid black !important;
    }

    /* AMOF-1196 */
    
    DIV#TAS #tabs {
        height: 100%;
    }
    
    DIV#TAS #tabTwo{
        min-height: 300px !important;
        height: 100%;
    
    }

    .bigSpan{
        text-wrap:normal !important;
        width: 100%;
        /*word-break: break-all;*/
        line-height: 17px !important;
        display:inline-block;
    }

    .bigTitle{
        line-height: 1px !important;
        display:inline-block;
    }

    /* AMOF-1196 IN PROGRESS */ 
    
    
    DIV#TAS .ui-tabs .ui-tabs-nav{ 
        list-style: none; 
        position: relative; 
        padding: 2px 2px 0; 
        overflow: hidden; 
        top: 1px; 
        z-index: 48; 
    }

    DIV#TAS .ui-tabs .ui-tabs-nav li{ 
        position: relative; 
        float: left; 
        border: 1px solid #ccc; 
        border-bottom-width: 0 !important; 
        background: #ccc;
        border-top-left-radius:0.5em;
        border-top-right-radius:0.5em;
        font-weight: normal;
        background-color: #f3f3f3;
        
    }

    DIV#TAS .ui-widget-header {
        border: 1px solid #ffffff !important;
    
    }

    DIV#TAS .ui-tabs .ui-tabs-nav li.ui-tabs-selected {
        padding-bottom: 1px;
        border-bottom-width: 0;
        background: #ffffff !important;
    }
    
    DIV#TAS .ui-tabs .ui-tabs-nav li a{ 
        float: left; 
        text-decoration: none; 
        padding: 5px 10px; 
        color: black; 
    }
    
    DIV#TAS .ui-tabs .ui-tabs-panel{ 
        padding: 17px; 
        display: block; 
        border-width: 0; 
        background: none; 
        border: 1px solid #ccc; 
        position: relative; 
        min-height: 200px; 
    }
    
    DIV#TAS .ui-tabs .ui-tabs-hide{ 
        display: none !important; 
    }
    
    DIV#TAS .ui-tabs .ui-tabs-nav 
    li.ui-tabs-selected { 
        padding-bottom: 1px; 
        border-bottom-width: 0; 
        background: white; 
    }
    

    DIV#TAS #obj1tbl {
        border: 1px solid #CCCCCC;
        border-radius: 0 0 0 0;
        border-spacing: 0 !important;
        display: none;
        font-size: 12px !important;
        text-align: left;
        width: 100%;
        z-index: 40;
    }
    
    DIV#TAS #obj1tbl th {
        font-size: 11px;
    }   
    
    DIV#TAS #obj1tbl2 {
        border: 1px solid #CCCCCC;
        border-radius: 0 0 0 0;
        border-spacing: 0 !important;
        display: none;
        font-size: 12px !important;
        text-align: left;
        width: 100%;
        z-index: 40;
    }
    
    DIV#TAS #page-wrap .ui-tabs {
        border: 0 solid;
        border-radius: 0 0 0 0 !important;
    }
    
    /* end: CSS for tabs panel */
    
    
    DIV#TAS #action_details_div {
        background-color: #FFFFFF;
        border-left: 1px solid #CCCCCC;
        bottom: 0;
        left: 193px;
        padding: 20px;
        position: absolute;
        right: 0;
        top: 0;
        display: none;
    }
    
    DIV#TAS #action_details_div #expand_collapse_details {
        background-color: #CBD5E2; /* #A0B5CA; */
        height: 26px;
        left: 4px;
        padding-right: 10px;
        padding-top: 5px;
        right: 4px;
        text-align: right;
        top: 4px;
        width: auto;
    }
    
    #action_details_div #details_form {
        margin-top: 25px;
    }
    
    DIV#TAS #SPINNER {
        position: absolute;
    }
    
    DIV#TAS DIV.actionsByCompletedTitle {
        font-size       :   12px;
        /* padding-left :   3px; */
        margin-bottom   :   5px;
        margin-top      :   15px;
        padding-top     :   10px;
        font-weight     :   bold;
    }
    
    #task_priority_{
        width: 7% !important;
    }


    DIV#TAS .sortIconPadding {
        margin-bottom: 5px !important;
        margin-left: 0px !important;
    }
    
    /* CSS for sorting by column header names */
    
    DIV#TAS SPAN.spanSorted {
        /* background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/arrow_sans_up.png')}'); */
        background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/sort_ascending.png')}');
        background-position: right;
        background-repeat: no-repeat;
        clear: left;
        height: 8px;
        margin: 5px 5px 0 0;
        width: auto;
        padding-right: 5px;
        -webkit-touch-callout: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
        -webkit-user-select: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
        -khtml-user-select: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
        -moz-user-select: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
        -ms-user-select: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
        user-select: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
        color: #454545 !important;
    }
    
    DIV#TAS SPAN.spanNotSorted {
        /* background-image: url('{!URLFOR($Resource.Assessment, 'common/images/transparent_dot.gif')}'); */
        /* background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/sort_unselected.png')}'); */
        background-position: right;
        background-repeat: no-repeat;
        clear: left;
        height: 8px;
        margin: 5px 5px 0 0;
        width: auto;
        padding-right: 5px;
        -webkit-touch-callout: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
        -webkit-user-select: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
        -khtml-user-select: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
        -moz-user-select: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
        -ms-user-select: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
        user-select: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
        color: #454545 !important;
    }


	DIV#TAS SPAN.spanSortedDesc {
		/* background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/arrow_sans_down.png')}'); */
		background-image: url('{!URLFOR($Resource.TAM, 'images/objectives/sort_descending.png')}');
		background-position: right;
		background-repeat: no-repeat;
		clear: left;
	    height: 8px;
	    margin: 5px 5px 0 0;
	    width: auto;
	    padding-right: 5px;
		-webkit-touch-callout: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
		-webkit-user-select: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
		-khtml-user-select: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
		-moz-user-select: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
		-ms-user-select: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
		user-select: none;  /* REMOVES TEXT HIGHLIGHT ON CLICK */
		color: #454545 !important;
	}
	
	div#radio { width: 68px; }


	/* Settings dropdown fix jQueryMigration  */
	.TAMAdminLink{
		position: relative;
	}
	
	.dropdown .dropdown-menu, .dropdown .dropdown-panel {
		min-width: 80px;
	}
	
	.dropdown {
		left: -39px !important;
	}
	
    /*   iPAD PORTRAIT STYLES */    
    @media only screen 
        and (min-device-width : 768px) 
        and (max-device-width : 1024px) 
        and (orientation : portrait) {
            
            .salesforce1 .CRUD_dialog_container{
                top: 55px !important;
            }
            
            .salesforce1 DIV#TAS SPAN.filterTitle {
                padding-left:   0px;
            }
            
            .salesforce1 DIV#TAS SPAN.filterOther {
                padding-left: 5px;
            }
            
            .salesforce1 #planunits{
                width:150px;
            }
    }


	/*  iPAD LANDSCAPE STYLES */			
	@media only screen 
		and (min-device-width : 768px) 
		and (max-device-width : 1024px) 
		and (orientation : landscape) {                                                

            .salesforce1 .CRUD_dialog_container{
                top: 10px !important;
            }

			.salesforce1 DIV#TAS DIV#ITEMS_PLUS_DETAILS {
				max-width: 98% !important;
				width: 98% !important;
				margin-top: 1%;
				margin-left: 1%;
			}	
	}


</style>

    <div id="TAS">
        <div id="ITEMS_FILTER"></div>
        <div id="ITEMS_PLUS_DETAILS">
            <div id="ITEMS"></div>
            <div id="ITEM_DETAILS"></div>
        </div>  
        <div id="TIMELINE"></div>
        <div id="SPINNER"></div>
    </div>



<script id='objective_details_template2' type='text/template'>
<body>
<div class='slideOutDiv'>

<form id='details_form'>
    
    <div class='topLabel'> 
        <label class='title'><%- objective.subject %></label>
        <div class='detailsButtonLinks'>            
            <% if(!spec.readonly) { %> 
                <div class='detailsLinks'>
                    <span class='edit_link action' id='editobjective_<%= objective.id %>_' ttgid='editobjective' />
                    <span class='del_link action' id='deleteobjective_<%= objective.id %>_' ttgid='deleteobjective' />
                    <span class='save_link action HIDDEN' id='saveobjective_<%= objective.id %>_' ttgid='saveobjective' />
                    <span class='undo_link action HIDDEN' id='undoeditobjective_<%= objective.id %>_' ttgid='undoeditobjective' />
                </div>
            <% } %>
        </div>
    </div>


    <div class='rowDiv'>
		<label class='firstLabel'><b>{!$Label.resource_Objective} Type:</b> <span><%- objective.type %><!--Marketing--></span></label>

        <% var ownerName = ''; %>
        <% var selectedOwnerId = objective.owner.id; %>
        <% for (var i = 0; i < data.owners.owner.length; i++) { %>
            <% var owner = data.owners.owner[i]; %>
                            
            <% if(owner.id == selectedOwnerId) { %>
                <% ownerName = owner.name; %>
            <% } %>
                            
        <% } %>
        <% if(!ownerName && objective.owner) { ownerName = objective.owner.name || ''; } %>

        <label class='secondLabel'><b>Owner:</b> <span><%- ownerName %></span></label>
    </div>

    <div class='lineDiv'></div>

    <div class='rowDiv'>
        <label class='firstLabel'><b>Due Date:</b> <span><%= objective.formattedDueDate %></span></label>

    	<label class='secondLabel'><b>{!$Label.resource_Objective} Status:</b> <span><%- objective.status %><!--In Progress--></span></label>
    </div>

    <div class='lineDiv'></div>

    <div class='rowDiv'>
        
        <% var planUnitName = ''; %>
        <% var selectedValue = objective.planunit.id; %>
        <% for (var i = 0; i < data.planunits.planunit.length; i++) { %>
            <% var planunit = data.planunits.planunit[i]; %>
                            
            <% if(planunit.id == selectedValue) { %>
                <% planUnitName =planunit.name; %>
            <% } %>
                            
        <% } %>

        <label class='firstLabel'><b>Plan Unit:</b> <span><%- planUnitName %><!--EMEA--></span></label>

        <label class='secondLabel'><b>Priority:</b> <span><%= objective.priority %><!--Medium--></span></label>
    </div>

    <div class='lineDiv'></div>

    <div class='rowDiv'>
        <label class='firstLabel' style='width:100%;'><b class="bigTitle">Metric:</b> <span class="bigSpan"><%- objective.metric %></span></label>
    </div>

    <div class='lineDiv'></div>

    <div class='rowDiv'>
        <label class='firstLabel' style='width:100%;'><b class="bigTitle">Relevance:</b> <span class="bigSpan"><%- objective.comments %></span></label>
    </div>

    <div class='lineDiv'></div>

    <div class='rowDiv'>
        <label class='firstLabel' style='width:100%;'><b class="bigTitle">Strategy:</b> <span class="bigSpan"><%- objective.strategy %></span></label>
    </div>

</form>
</div>
</body>

</script>


<script id='task_details_template2' type='text/template'>
<body>
<div id='action_details_div'>
<div class='slideOutDiv'>
<div id='expand_collapse_details'>
    <img border='0' src='{!URLFOR($Resource.TAM, 'images/objectives/arrow_sans_down.png')}' alt='toggleArrow' width='20' height='20'>
</div>
<form id='details_form'>
    
    <div class='topLabel'> 
        <label class='title'><%- task.Subject %></label>
        <div class='detailsButtonLinks'>
            <div class='detailsLinks'>              
                <span class='edit_link action' id='edittask_<%= task.Id %>_' ttgid='edittask' />
                <span class='save_link action HIDDEN' id='savetask_<%= task.Id %>_' ttgid='savetask' />
                <span class='undo_link action HIDDEN' id='undoedittask_<%= task.Id %>_' ttgid='undoedittask' />
                <span class='del_link action' id='deletetask_<%= task.Id %>_' ttgid='deletetask' />
            </div>
        </div>
    </div>

    <p>
        <% var ownerName = ''; %>
        
        <% if(task.Owner && task.Owner.Name) { %>
            
            <% ownerName = task.Owner.Name; %>

        <% } %>

        <label><i>Owned by <%- ownerName %></i></label>

    </p>

    <div class='lineDiv'></div>

    <div class='rowDiv'>

        <% var objectiveSubject = ''; %>

        <% var selectedValue = task.WhatId; %>
                    
        <% for (var i = 0; i < data.planobjectives.planobjective.length; i++) { %>
            <% var objective = data.planobjectives.planobjective[i]; %>

            <% if(objective.id == selectedValue) { %>
                <% objectiveSubject = objective.subject; %>
            <% } %>
        <% } %>

        <% var linkObjectiveId = 'objective_' + selectedValue + '_'; %>

		<label class='firstLabel actionObjectiveName'><b>{!$Label.resource_Objective} :</b> <span id='<%= linkObjectiveId %>'><%-  objectiveSubject %></span></label>

    </div>

    <div class='lineDiv'></div>

    <div class='rowDiv'>

        <% var contact = ''; %>
            <% if((task.Who) && (task.Who.Name)) { %>
                <% contact = task.Who.Name; %>
            <% } %>

        <label class='firstLabel'><b>
        </b> <span><%- contact %></span></label>

        
        <label class='secondLabel'><b>Priority:</b> <span><%= task.Priority %><!--In Progress--></span></label>
        
    </div>

    <div class='lineDiv'></div>

    <div class='rowDiv'>
        <label class='firstLabel'><b>Due Date:</b> <span><%= task.formattedActivityDate %></span></label>

        <label class='secondLabel'><b>Action Status:</b> <span><%= task.Status %><!--In Progress--></span></label>
    </div>

    <div class='lineDiv'></div>

    <div class='rowDiv'>
        <label class='firstLabel' style='width:100%;'><b>Comments:</b> <span><%- task.Description %></span></label>
    </div>
    
</form>
</div>
</div>
</body>

</script>


<script id='objectives_filter_template' type='text/template'>
    <table>
    <tr id='objectives_filter'>
        <td>
            <span class='filterTitle'><!--Objectives--></span><!-- this is removed as confusing, the Filter params apply to the Objectives except for the Action List (2nd item in picklist) -->
        </td>

		<td>
			<span class='filterOther'>View</span>
		</td>
		<td>
			<select name='view' id='view'>
				<option value='objectives'>{!$Label.resource_Objectives}</option>
				<option value='tasks'>Action List</option>
				<!--<option value='timeline'>Timeline</option>-->
			</select>
		</td>

        <!-- replace checkboxes with radio buttons

        <td>
            <span class='filterOther'>Priority</span>
        </td>

        <td>
            <div class='imageBlock highPriorityActive'></div>
            <input type='checkbox' name='highPriorityCheckbox' id='highPriorityCheckbox' value='true'>
        </td>

        <td>
            <div class='imageBlock normalPriorityActive'></div>
            <input type='checkbox' name='normalPriorityCheckbox' id='normalPriorityCheckbox' value='true'>
        </td>

        <td>
            <div class='imageBlock lowPriorityActive'></div>
            <input type='checkbox' name='lowPriorityCheckbox' id='lowPriorityCheckbox' value='true'>
        </td>

        -->

        <!-- replace Done checkbox with picklist 

        <td>
            <span class='filterHideCompleted'>Done<input type='checkbox' name='hideCompleted' id='hideCompleted' value='true' checked='checked'></span>
        </td>

        -->

        <!-- replace radio button with checkbox

        <td>
            <span class='filterOther'>Done</span>
        </td>
        <td>
            <% var labelIsCompleted = "<div id='radioLabel3' class='imageBlock completedPriorityActive' />"; %>
            <input id='radio3' type='radio' checked='checked' value='Done' name='radio3'>
            <label for='radio3'><%= labelIsCompleted %></label>
        </td>

        -->

        <td>
            <span class='filterOther'>Status</span>
        </td>
        <td>
            <select name='completed' id='completed'>
                <option value='All'>All</option>
                <option value='Open' selected='selected'>Open</option>
                <option value='Closed'>Closed</option>
            </select>
        </td>


        <!-- replace radio buttons with checkboxes -->

        <td>
            <span class='filterOther'>Priority</span>
        </td>
        <td>
            <div id='radio'>
            <% for (var i = 0; i < data.priorities.length; i++) { %>

                <% var priority = data.priorities[i]; %>

                    <% 
                        var label = ''; // priority.label;
                        var labelId = 'radioLabel' + i;
 
                        if(priority.value == 'High') {
                            label = "<div id=" + labelId + " class='imageBlockBig highPriorityInactiveBig' />";
                        } else if(priority.value == 'Normal') {
                            label = "<div id=" + labelId + " class='imageBlockBig normalPriorityInactiveBig' />";
                        } else if(priority.value == 'Low') {
                            label = "<div id=" + labelId + " class='imageBlockBig lowPriorityInactiveBig' />";
                        }
                    %>                              
                                    
                    <% var radioid = 'radio' + i; %>
                    <input type='radio' id='<%= radioid %>' name='<%= radioid %>' value='<%= priority.value %>' ><label for='<%= radioid %>'><%= label %></label>

            <% } %>
            </div>
        </td>



        <td>
            <span class='filterOther' id='planunitslabel'>Plan Units</span>
        </td>
        <td>
            <select name='planunits' id='planunits'>

                <option value='NULL'>Plan Level</option>
                <option value='' selected='selected'>All</option>
                
                <% for (var i = 0; i < data.planunits.planunit.length; i++) { %>
                    <% var planunit = data.planunits.planunit[i]; %>
            
                    <option value='<%= planunit.id %>'><%- planunit.name %></option>
            
                <% } %> 
            </select>
        </td>



        <td>
            <span class='filterOther'>Owners</span>
        </td>
        <td>
            <select name='owners' id='owners' <!--multiple='multiple'--> data-placeholder='Choose Owners'>
                <option value=''>All</option>

                <% var owners = data.owners.owner; %>       

                <% for (var i = 0; i < owners.length; i++) { %>
                    <% var owner = owners[i]; %>
            
                    <option value='<%= owner.id %>'><%- owner.name %></option>
            
                <% } %> 
            </select>
        </td>



    </tr>
    </table>
</script>       


<script id='objectives_template' type='text/template'>
    <div style='overflow-y: auto; max-height: 600px;'>
    <table class='dataTableClass'>
        <thead>
                    <!--<th>for the expand / collapse icon</th>-->                  
                    
                    <% var objective_subject_class = 'sortIconPadding tasPointer spanNotSorted '; %>
                    <% var objective_owner_class = 'sortIconPadding tasPointer spanNotSorted '; %>
                    <% var objective_type_class = 'sortIconPadding tasPointer spanNotSorted '; %>
                    <% var objective_planunit_class = 'sortIconPadding tasPointer spanNotSorted '; %>
                    <% var objective_duedate_class = 'sortIconPadding tasPointer spanNotSorted '; %>
                    <% var objective_priority_class = 'sortIconPadding tasPointer spanNotSorted '; %>
                    <% var objective_status_class = 'sortIconPadding tasPointer spanNotSorted '; %>

                    <% if(sortConfig.type == 'objective') { %>
                        
                        <% if(sortConfig.fieldname == 'subject') { %>

                            <% objective_subject_class = 'sortIconPadding tasPointer spanSorted '; %>

                            <% if(!(sortConfig.ascending)) { %>

                                <% objective_subject_class += 'sortIconPadding spanSortedDesc'; %>

                            <% } %>

                        <% } else if(sortConfig.fieldname == 'owner') { %>

                            <% objective_owner_class = 'sortIconPadding tasPointer spanSorted '; %>

                            <% if(!(sortConfig.ascending)) { %>

                                <% objective_owner_class += 'sortIconPadding spanSortedDesc'; %>

                            <% } %>

                        <% } else if(sortConfig.fieldname == 'type') { %>

                            <% objective_type_class = 'sortIconPadding tasPointer spanSorted '; %>

                            <% if(!(sortConfig.ascending)) { %>

                                <% objective_type_class += 'sortIconPadding spanSortedDesc'; %>

                            <% } %>

                        <% } else if(sortConfig.fieldname == 'planunit') { %>

                            <% objective_planunit_class = 'sortIconPadding tasPointer spanSorted '; %>

                            <% if(!(sortConfig.ascending)) { %>

                                <% objective_planunit_class += 'sortIconPadding spanSortedDesc'; %>

                            <% } %>

                        <% } else if(sortConfig.fieldname == 'duedate') { %>

                            <% objective_duedate_class = 'sortIconPadding tasPointer spanSorted '; %>

                            <% if(!(sortConfig.ascending)) { %>

                                <% objective_duedate_class += 'sortIconPadding spanSortedDesc'; %>

                            <% } %>
                    
                        <% } else if(sortConfig.fieldname == 'priority') { %>

                            <% objective_priority_class = 'sortIconPadding tasPointer spanSorted '; %>

                            <% if(!(sortConfig.ascending)) { %>

                                <% objective_priority_class += 'sortIconPadding spanSortedDesc'; %>

                            <% } %>
                    
                        <% } else if(sortConfig.fieldname == 'status') { %>

                            <% objective_status_class = 'sortIconPadding tasPointer spanSorted '; %>

                            <% if(!(sortConfig.ascending)) { %>

                                <% objective_status_class += 'sortIconPadding spanSortedDesc'; %>

                            <% } %>
                    
                        <% } %>

                    <% } %>

					<th class='headerColumn0'><span id='objective_subject_' class='<%= objective_subject_class %>'>{!$Label.resource_Objective} &nbsp;</span></th>
					<th class='headerColumn1'><span id='objective_owner_' class='<%= objective_owner_class %>'>Owner &nbsp;</span></th>
					<th class='headerColumn2'><span id='objective_type_' class='<%= objective_type_class %>'>Type &nbsp;</span></th>
					<th class='headerColumn7'><span id='objective_planunit_' class='<%= objective_planunit_class %>'>Unit &nbsp;</span></th>
					<th class='headerColumn3'><span id='objective_duedate_' class='<%= objective_duedate_class %>'>Date &nbsp;</span></th>
                    <th class='headerColumn4'><span id='objective_priority_' class='<%= objective_priority_class %>'>Priority &nbsp;</span><!--<div class='imageBlock priorityHeader'></div>--></th>
                    <th class='headerColumn5'><span id='objective_status_' class='<%= objective_status_class %>'>Status &nbsp;</span><!--<div class='imageBlock completedStatus'></div>--></th>
                    <th class='headerColumn6'>Open Actions</th>

        </thead>

        <tbody>

            <% var actionsExpanded = false; %>      <!-- this is hard-coded now to NOT display the tasks per objective, when the page loads -->
            <% var objectiveSpanToggleExpanded = (actionsExpanded ? 'spanToggleExpanded' : ''); %>

            <% for (var i = 0; i < objectives.length; i++) { %>
                <% var objective = objectives[i]; %>

                <% var completed = objective.completed; %>
                <% var completedObjective = (completed ? 'completed' : ''); %>

                <% var rowSelectedClass = ''; %>
                <% if(objective.id == selectedRowId) { %>
                    
                    <% rowSelectedClass = ' class="rowSelected"'; %>

                <% } %>

            
                <tr id='objective_<%= objective.id %>_' <%= rowSelectedClass %> >
                    <!--<td class='dataTableClassToggleColumn'><span id='toggle_<%= objective.id %>' class="spanToggle tasPointer <%= objectiveSpanToggleExpanded %>"></span></td>-->

                    <!-- check if objective DueDate is Overdue -->
                    <% var overdueDueDateClass = ''; %>
                    <% if(objective.overdue) { %>
            
                        <% overdueDueDateClass = 'overdueDueDate'; %>

                    <% } %>

                    <td class='dataTableClassColumn <%= completedObjective %>' ttgid='TBLOBJECTIVES_name' style='width:200px;'><div class='<%= overdueDueDateClass %>'><%- objective.subject %></div></td>

                    <% var ownerName = ''; %>
                    <% var selectedOwnerId = objective.owner.id; %>
                    <% for (var m = 0; m < data.owners.owner.length; m++) { %>
                    <% var owner = data.owners.owner[m]; %>
                            
                        <% if(owner.id == selectedOwnerId) { %>
                            <% ownerName = owner.name; %>
                        <% } %>
                            
                    <% } %>
                    <% if(!ownerName && objective.owner) { ownerName = objective.owner.name || ''; } %>

                    <td class='dataTableClassColumn <%= completedObjective %>' ttgid='TBLOBJECTIVES_owner'><div class='<%= overdueDueDateClass %>'><%- ownerName %></div></td>
                    <td class='dataTableClassColumn <%= completedObjective %>' ttgid='TBLOBJECTIVES_type'><div class='<%= overdueDueDateClass %>'><%- objective.type %></div></td>
                    
                    <% var planUnitName = ''; %>
                    <% var selectedValue = objective.planunit.id; %>
                    <% for (var n = 0; n < data.planunits.planunit.length; n++) { %>
                        <% var planunit = data.planunits.planunit[n]; %>
                            
                        <% if(planunit.id == selectedValue) { %>
                            <% planUnitName = planunit.name; %>
                        <% } %>
                            
                    <% } %>

                    <td class='dataTableClassColumn <%= completedObjective %>' ttgid='TBLOBJECTIVES_planunit'><div class='<%= overdueDueDateClass %>'><%- planUnitName %></div></td>
                    <td class='dataTableClassColumn <%= completedObjective %>' ttgid='TBLOBJECTIVES_date'><div class='<%= overdueDueDateClass %>'><%= objective.formattedDueDate %></div></td>


                    <!-- get the Priority image -->

                    <% var priority = objective.priority; %>
                    
                    <% var priorityClass = 'imageBlock '; %>

                    <% if(priority == 'High') { %>
                    
                        <% priorityClass += 'highPriority'; %>
                        <% priorityClass += (completed ? 'Inactive' : 'Active'); %>
                    
                    <% } else if(priority == 'Normal') { %>
                    
                        <% priorityClass += 'normalPriority'; %>
                        <% priorityClass += (completed ? 'Inactive' : 'Active'); %>
                    
                    <% } else if(priority == 'Low') { %>
                    
                        <% priorityClass += 'lowPriority'; %>
                        <% priorityClass += (completed ? 'Inactive' : 'Active'); %>
                    
                    <% } %>

                    <td class='dataTableClassColumn' ttgid='TBLOBJECTIVES_priority'><div class='<%= priorityClass %>' /></td>


                    <!-- get the Status image -->

                    <% var status = objective.status; %>
                    
                    <% var statusClass = 'imageBlock '; %>

                    <% if(status == 'Not Started') { %>
                    
                        <% statusClass += 'notStartedStatus'; %>
                    
                    <% } else if(status == 'In Progress') { %>

                        <% statusClass += 'inProgressStatus'; %>
                    
                    <% } else if(status == 'Completed') { %>

                        <% statusClass += 'completedAchievedStatus'; %>

                    <% } else if(status == 'Cancelled') { %>

                        <% statusClass += 'completedNotAchievedStatus'; %>
                                        
                    <% } else if(status == 'Deferred') { %>

                        <% statusClass += 'pausedDeferredStatus'; %>
                    
                    <% } %>

                    <% var counts = objective.taskStatusCounts; %>

                    <!-- check if objective is Overdue -->

                    <% var overdueClass = ''; %>
                    <% if(objective.overdue) { %>
            
                        <% overdueClass = 'imageBlock overdueStatus'; %>

                    <% } %>

                    <td class='dataTableClassColumn <%= completedObjective %>' ttgid='TBLOBJECTIVES_status'><div class='<%= statusClass %>' /></td>


                    <!-- calculate the progress bar widths -->

                    <% var barwidth = 150; %>
    
                    <% var progressBarWidthComplete = 0; %>
                    <% var progressBarWidthOpen = 0; %>
                    <% var progressBarWidthInProgress = 0; %>
                    <% var progressBarWidthNotStarted = 0; %>
                    <% var progressBarWidthOverdue = 0; %>

                    <% var total = counts.total; %> 

                    <% if(total > 0) { %>

                        <% var myMaxTotal = ((maxTotal && (maxTotal > 0)) ? maxTotal : 10); %>
                        <% barwidth = barwidth * (total / myMaxTotal); %>   

                        <% progressBarWidthComplete = counts.completed * barwidth / total; %>
                        <% progressBarWidthOpen = counts.open * barwidth / total; %>
                        <% progressBarWidthInProgress = ( counts.inprogress + counts.deferred + counts.waiting ) * barwidth / total; %>
                        <% progressBarWidthNotStarted = counts.notstarted * barwidth / total; %>
                        <% progressBarWidthOverdue = counts.overdue * barwidth / total; %> 
    
                    <% } %>
                    
                    <td class='dataTableClassColumn <%= completedObjective %>' ttgid='TBLOBJECTIVES_actionstatus'>

                        <% var overdueText = ''; %>
                        <% if(counts.overdue > 0) { %>
                    
                            <% overdueText = ' (' + counts.overdue + ' overdue)'; %>

                        <% } %>

                        <div><span class='<%= overdueDueDateClass %>'><%= counts.open + counts.overdue %></span><span style='color:#FF0000' class='<%= completedObjective %>' ><%= overdueText %></span></div>
                        
                        <!--
                        <span class="STATUS_PERCENTBAR">
                            <% var display = ((progressBarWidthComplete == 0) ? ' display: none;' : ' display: block;') %>
                            <div title='Completed: <%=counts.completed %>' class='imageBlock completedStatusBar' style='width: <%= progressBarWidthComplete %>px; <%= display %>'></div>

                            <% var display = ((progressBarWidthOpen == 0) ? ' display: none;' : ' display: block;') %>
                            <div title='Open: <%=counts.open %>' class='imageBlock openStatusBar' style='width: <%= progressBarWidthOpen %>px; <%= display %>'></div>
                            
                            
                            <% display = ((progressBarWidthInProgress == 0) ? ' display: none;' : ' display: block;') %>
                            <div title='In Progress: <%= counts.inprogress  + counts.deferred + counts.waiting %>' class='imageBlock inProgressStatusBar' style='width: <%= progressBarWidthInProgress %>px; <%= display %>'></div>
                            
                            <% display = ((progressBarWidthNotStarted == 0) ? ' display: none;' : ' display: block;') %>
                            <div title='Not Started: <%=counts.notstarted %>' class='imageBlock notStartedStatusBar' style='width: <%= progressBarWidthNotStarted %>px; <%= display %>'></div>
                            

                            <% display = ((progressBarWidthOverdue == 0) ? ' display: none;' : ' display: block;') %>
                            <div title='Overdue: <%=counts.overdue %>' class='imageBlock overdueStatusBar' style='width: <%= progressBarWidthOverdue %>px; <%= display %>'></div>
                        </span>

                        -->

                    </td>

                </tr>

            <% } %>
        </tbody>
    </table>

	
	<!-- moved Add Objective button to directly beneath Objectives list -->
	<table>
	<tbody>
		<tr>
			<td>
				<% if(!spec.readonly) { %> 
					<div class='addButton' id='addobjective_DUMMY_' ttgid='addobjective' >
						<span class='add_task button ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only' />Add {!$Label.resource_Objective}
					</div>
				<% } %>
			</td>
		</tr>
		</tbody>
    </table>
    </div>

</script>


<script id='objective_tasks_template2' type='text/template'>

    <% var actionsExpanded = true; %>
    <% var actionsBodyExpanded = (actionsExpanded ? '' : 'HIDDEN'); %>

    <% if(!spec.readonly) { %>
    
        <div class='addButton' id='addtask_<%= objective.id %>_' ttgid='addtask'>
            <span class='add_task button ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only' />Add Action
        </div>
        <div style='margin-bottom: 40px;'></div>

    <% } %> 

    <% for (var i = 0; i < configs.length; i++) { %>

        <% var config = configs[i]; %>
        <% var title = config.title; %>
        <% var tasks = config.tasks; %>
        <% var tableid = config.tableid; %>
        <% var bodyid = config.bodyid; %>

        <div>
            <div class='actionsByCompletedTitle'><%= title %></div>
        </div>

        <table class='dataTableClassExtra' id='<%= tableid %>'>
            <thead>
                    <!--<th>--><!-- for the expand / collapse icon --> <!--</th>-->                 
                    
                    <% var objective_subject_class = '<!--tasPointer spanNotSorted--> '; %>
                    <% var objective_owner_class = '<!--tasPointer spanNotSorted--> '; %>
                    <% var objective_duedate_class = '<!--tasPointer spanNotSorted--> '; %>
                    <% var objective_priority_class = '<!--tasPointer spanNotSorted--> '; %>
                    <% var objective_status_class = '<!--tasPointer spanNotSorted--> '; %>

                    <th class='header action'><span id='objective_subject_' class='<%= objective_subject_class %>'></span><!--Objective -->Action</th>
                    <th class='header owner'><span id='objective_owner_' class='<%= objective_owner_class %>'></span>Owner</th>
                    <th class='header date'><span id='objective_duedate_' class='<%= objective_duedate_class %>'></span><!--Due-->Date</th>
                    <th class='header priority'><span id='objective_priority_' class='<%= objective_priority_class %>'></span><!--<div class='imageBlock priorityHeader'></div>-->Priority</th>
                    <th class='header status'><span id='objective_status_' class='<%= objective_status_class %>'></span><!--<div class='imageBlock completedStatus'></div>-->Status</th>

                    <!--<th>Action Status</th>-->
                    <th class='header edit-delete'></th> <!-- edit/delete links -->
            </thead>

                <% if(tasks) { %>
                    
                    <tbody id='<%= bodyid %>' class='<%= actionsBodyExpanded %>'>

                    <% for (var j = 0; j < tasks.length; j++) { %>

                        <% var task = tasks[j]; %>

                        <% var priority = task.Priority; %>
                        <% var completed = (task.IsClosed == true); %>
                        <% var completedTask = (completed ? 'completed' : ''); %>
                    
                        <% var priorityClass = ''; %>

                        <% if(priority == 'High') { %>
                    
                            <% priorityClass += 'highPriority'; %>
                            <% priorityClass += (completed ? 'Inactive' : 'Active'); %>
                    
                        <% } else if(priority == 'Normal') { %>
                    
                            <% priorityClass += 'normalPriority'; %>
                            <% priorityClass += (completed ? 'Inactive' : 'Active'); %>
                    
                        <% } else if(priority == 'Low') { %>
                    
                            <% priorityClass += 'lowPriority'; %>
                            <% priorityClass += (completed ? 'Inactive' : 'Active'); %>
                    
                        <% } %>

                        <% var priorityClass = 'imageBlock ' + priorityClass; %>

                        <!-- check if task is Overdue -->

                        <% activityDateClass = ''; %>
                        <% if(task.overdue) { %>
                        
                            <% activityDateClass = 'overdueActivityDate'; %>

                        <% } %>


                        <!-- get the Status image -->

                    <% var status = task.Status; %>
                    
                    <% var statusClass = 'imageBlock '; %>

                    <% if(task.overdue) { %>

                        <% statusClass += 'overdueStatusBar'; %>

                    <% } else if(completed == true) { %>

                        <% statusClass += 'completedStatusBar'; %>

                    <% } else if(completed == false) { %>

                        <% statusClass += 'openStatusBar'; %>

                    <% } %>

                    <!--

                    <% } else if(status == 'Not Started') { %>
                    
                        <% statusClass += 'notStartedStatusBar'; %>
                    
                    <% } else if(status == 'In Progress') { %>

                        <% statusClass += 'inProgressStatusBar'; %>
                    
                    <% } else if(status == 'Completed') { %>

                        <% statusClass += 'completedStatusBar'; %>
                    
                    <% } else if(status == 'Waiting on someone else') { %>

                        <% statusClass += 'pausedDeferredStatusBar'; %>
                    
                    <% } else if(status == 'Deferred') { %>

                        <% statusClass += 'pausedDeferredStatusBar'; %>
                    
                    <% } %>

                    -->

                        <tr id='task_<%= task.Id %>_' >
                            <!--<td class='dataTableClassToggleColumn'>--><!-- for the expand / collapse icon --> <!--</td>-->
                            <td ttgid='TBLACTION_name' class='<%= completedTask %>' ><div class='<%= activityDateClass %>' ><%- task.Subject %></td>
                            <td ttgid='TBLACTION_owner' class='<%= completedTask %>' ><div class='<%= activityDateClass %>' ><%- task.Owner.Name %></td>
                            <td ttgid='TBLACTION_date' class='<%= completedTask %>' ><div class='<%= activityDateClass %>' ><%= task.formattedActivityDate %></div></td>
                            <td ttgid='TBLACTION_priority'><div class='<%= priorityClass %>' /></td>
                            <!-- <td>  left blank </td> -->
                            <!-- <td><%= task.Status %></td> -->
                            <td ttgid='TBLACTION_status' class='dataTableClassColumn <%= completedTask %>'><div class='<%= activityDateClass %>' ><!--<div class='<%= statusClass %>' />--><%= status %></td>
                            <td ttgid='TBLACTION_modifiers' class='<%= completedTask %>'>
                                <% if(!spec.readonly) { %> 
                                    <div class="edit-delete-div">
                                        <span id='edittask_<%= task.Id %>_' class='edit_link action'></span>
                                        <span id='deletetask_<%= task.Id %>_' class='del_link action'></span>
                                    </div>
                                <% } %>                     
                            </td>
                        </tr>

                    <% } %>                 

                    </tbody>

                <% } %>

        </table>
    <% } %>

</script>



<script id='timeline_template' type='text/template'>
	
	<table>
  		<thead>
					<th>{!$Label.resource_Objective} - Action</th>
					<th>Priority</th>
					<th>Status</th>
					<th>Action Status</th>

                    <% for (var i = 0; i < configs.length; i++) { %>
                        <% var config = configs[i]; %>
                        <% var label = config.label; %>

                        <th><%= label %></th>

                    <% } %>

        </thead>
        <tbody>

            <% for (var i = 0; i < objectives.length; i++) { %>
                <% var objective = objectives[i]; %>            
                <% var objectiveid = objective.id; %>

                <tr>
                    <td><%= objective.subject %></td>
                    <td><%= objective.priority %></td>
                    <td><%= objective.status %></td>
                    <td><%= objective.taskStatusCounts.total  %></td>

                    <% for (var j = 0; j < configs.length; j++) { %>

                        <% var config = configs[j]; %>                      
                        <% var tasksThisPeriod = config.tasksThisPeriod; %>
                        <% var tasksCountThisObjectiveThisPeriod = 0; %>

                        <% for (var k = 0; k < tasksThisPeriod.length; k++) { %>

                            <% var taskThisPeriod = tasksThisPeriod[k]; %>
                            <% var whatId = taskThisPeriod.WhatId; %>

                            <% if(whatId == objectiveid) { %>
                                
                                <% tasksCountThisObjectiveThisPeriod++; %>

                            <% } %>

                        <% } %> <!-- end for-loop of tasksThisPeriod -->

                        <td><%= tasksCountThisObjectiveThisPeriod %></td>           <!-- TODO - spec has coloured dots, one per task, positioned by date within the TD -->
    
                    <% } %> <!-- end for-loop of configs -->
                
                </tr>

            <% } %> <!-- end for-loop of objectives -->

        </tbody>
    </table>

</script>   
    

<script id='tasks_template' type='text/template'>
    <div style='overflow-y: auto; max-height: 600px;'>
    <table class='dataTableClass'>
        <thead>

            <% var task_objectivesubject_class = 'sortIconPadding tasPointer spanNotSorted '; %>
            <% var task_objectivetype_class = 'sortIconPadding tasPointer spanNotSorted '; %>
            <% var task_owner_class = 'sortIconPadding tasPointer spanNotSorted '; %>
            <% var task_contact_class = 'sortIconPadding tasPointer spanNotSorted '; %>
            <% var task_activitydate_class = 'sortIconPadding tasPointer spanNotSorted '; %>
            <% var task_status_class = 'sortIconPadding tasPointer spanNotSorted '; %>
            <% var task_priority_class = 'sortIconPadding tasPointer spanNotSorted '; %>

            <% if(sortConfig.type == 'task') { %>

                <% if(sortConfig.fieldname == 'objectivesubject') { %>

                    <% task_objectivesubject_class = 'sortIconPadding tasPointer spanSorted '; %>

                    <% if(!(sortConfig.ascending)) { %>

                        <% task_objectivesubject_class += 'sortIconPadding spanSortedDesc'; %>

                    <% } %>

                <% } else if(sortConfig.fieldname == 'objectivetype') { %>

                    <% task_objectivetype_class = 'sortIconPadding tasPointer spanSorted '; %>

                    <% if(!(sortConfig.ascending)) { %>

                        <% task_objectivetype_class += 'sortIconPadding spanSortedDesc'; %>

                    <% } %>

                <% } else if(sortConfig.fieldname == 'owner') { %>

                    <% task_owner_class = 'sortIconPadding tasPointer spanSorted '; %>

                    <% if(!(sortConfig.ascending)) { %>

                        <% task_owner_class += 'sortIconPadding spanSortedDesc'; %>

                    <% } %>

                <% } else if(sortConfig.fieldname == 'contact') { %>

                    <% task_contact_class = 'sortIconPadding tasPointer spanSorted '; %>

                    <% if(!(sortConfig.ascending)) { %>

                        <% task_contact_class += 'sortIconPadding spanSortedDesc'; %>

                    <% } %>

                <% } else if(sortConfig.fieldname == 'activitydate') { %>

                    <% task_activitydate_class = 'sortIconPadding tasPointer spanSorted '; %>

                    <% if(!(sortConfig.ascending)) { %>

                        <% task_activitydate_class += 'sortIconPadding spanSortedDesc'; %>

                    <% } %>

                <% } else if(sortConfig.fieldname == 'status') { %>

                    <% task_status_class = 'sortIconPadding tasPointer spanSorted '; %>

                    <% if(!(sortConfig.ascending)) { %>

                        <% task_status_class += 'sortIconPadding spanSortedDesc'; %>

                    <% } %>
                    
                <% } else if(sortConfig.fieldname == 'priority') { %>

                    <% task_priority_class = 'sortIconPadding tasPointer spanSorted '; %>

                    <% if(!(sortConfig.ascending)) { %>

                        <% task_priority_class += 'sortIconPadding spanSortedDesc'; %>

                    <% } %>
                    
                <% } %>


            <% } %>


			<th><span id='toggle_TasksHeader' class='spanToggle tasPointer spanToggleExpanded '></span><!-- for the expand / collapse icon --></th>
			<th style='width:110px;'>Action</th>
			<!--<th style='width:170px;'></th>--> <!--Action Status bar-->
			<th><span id='task_objectivesubject_' class='<%= task_objectivesubject_class %>'>{!$Label.resource_Objective} &nbsp;</span></th>
			<!--<th><span id='task_objectivetype_' class='<%= task_objectivetype_class %>'>Type &nbsp;</span></th>-->
			<th><span id='task_owner_' class='<%= task_owner_class %>'>Owner &nbsp;</span></th>
			<th><span id='task_contact_' class='<%= task_contact_class %>'>Contact &nbsp;</span></th>
			<th><span id='task_activitydate_' class='<%= task_activitydate_class %>'>Date &nbsp;</span><!--Due--></th>
			<!--<th>Overdue</th>-->
			<th><span id='task_priority_' class='<%= task_priority_class %>'>Priority &nbsp;</span><!--<div class='imageBlock priorityHeader'></div>--></th>
			<th><span id='task_status_' class='<%= task_status_class %>'>Status &nbsp;</span><!--<div class='imageBlock completedStatus'></div>--></th>
		</thead>
		<tbody>

        <% for (var i = 0; i < configs.length; i++) { %>

            <% var config = configs[i]; %>
            <% var id = config.id; %>
            <% var label = config.label; %>
            <% var tasksThisPeriod = config.tasksThisPeriod; %>
            <% var counts = config.taskStatusCounts; %>

            <!-- calculate the progress bar widths -->

            <% var barwidth = 160; %>

            <% var progressBarWidthComplete = 0; %>
            <% var progressBarWidthOpen = 0; %>
            
            <% var progressBarWidthInProgress = 0; %>
            <% var progressBarWidthNotStarted = 0; %>
            
            <% var progressBarWidthOverdue = 0; %>

            <% var total = counts.total; %>
 

            <% if(total > 0) { %>

                <% var myMaxTotal = ((maxTotal && (maxTotal > 0)) ? maxTotal : 10); %>
                <% barwidth = barwidth * (total / myMaxTotal); %>

                <% progressBarWidthComplete = counts.completed * barwidth / total; %>
                <% progressBarWidthOpen = counts.open * barwidth / total; %>
                
                <% progressBarWidthInProgress = (counts.inprogress + counts.deferred + counts.waiting) * barwidth / total; %>
                <% progressBarWidthNotStarted = counts.notstarted * barwidth / total; %>
                
                <% progressBarWidthOverdue = counts.overdue * barwidth / total; %> 
    
            <% } %>

            <% var tasksThisPeriodCount = (tasksThisPeriod ? tasksThisPeriod.length : 0); %>

            <!-- check if any task is Overdue -->

            <% var overdueClass = ''; %>
            <% var overdueCount = counts.overdue; %>
            <% if(counts.overdue > 0) { %>
            
                <% overdueClass = 'imageBlock overdueStatus'; %>

            <% } %>

            <% var actionsExpanded = true; %>       <!-- this is hard-coded now to display the tasks per period, when the page loads -->
            <% var taskSpanToggleExpanded = (actionsExpanded ? 'spanToggleExpanded' : ''); %>

            <tr class='nohover'>
                <td class='dataTableClassToggleColumn' style='cursor:default;'><span id='toggle_<%= id %>' class='spanToggle tasPointer <%= taskSpanToggleExpanded %>'></span></td>
                <td class='dataTableClassColumn' ttgid='TBLACTIONLIST_timebucket' style='cursor:default;'>
                    <div class='boldText'>
                    <div class='tasksThisPeriodCount'>
    
                        <% if(label != 'Closed') { %>
                            <%= label %> (<span style='color:#FF0000;'><%= overdueCount %></span> / <%= tasksThisPeriodCount %>)
                        <% } else { %>
                            <%= label %> (<%= tasksThisPeriodCount %>)
                        <% } %>
                    </div>
                    </div>
                </td>
                
                <!--
                <td class='dataTableClassColumn' ttgid='TBLACTIONLIST_percentbar' style='cursor:default;'>
                    <div>   
                        <span class="STATUS_PERCENTBAR">
                            <% var display = ((progressBarWidthComplete == 0) ? ' display: none;' : ' display: block;') %>
                            <div title='Completed: <%=counts.completed %>' class='imageBlock completedStatusBar' style='width: <%= progressBarWidthComplete %>px; <%= display %>'></div>

                            <% var display = ((progressBarWidthOpen == 0) ? ' display: none;' : ' display: block;') %>
                            <div title='Open: <%=counts.open %>' class='imageBlock openStatusBar' style='width: <%= progressBarWidthOpen %>px; <%= display %>'></div>
                            
                            
                            <% display = ((progressBarWidthInProgress == 0) ? ' display: none;' : ' display: block;') %>
                            <div title='In Progress: <%= counts.inprogress + counts.deferred + counts.waiting %>' class='imageBlock inProgressStatusBar' style='width: <%= progressBarWidthInProgress %>px; <%= display %>'></div>
                            
                            <% display = ((progressBarWidthNotStarted == 0) ? ' display: none;' : ' display: block;') %>
                            <div title='Not Started: <%=counts.notstarted %>' class='imageBlock notStartedStatusBar' style='width: <%= progressBarWidthNotStarted %>px; <%= display %>'></div>
                            

                            <% display = ((progressBarWidthOverdue == 0) ? ' display: none;' : ' display: block;') %>
                            <div title='Overdue: <%=counts.overdue %>' class='imageBlock overdueStatusBar' style='width: <%= progressBarWidthOverdue %>px; <%= display %>'></div>
                        </span>
                    </div>
                </td>
                -->

                <td class='dataTableClassColumn' style='cursor:default;'></td>
                <td class='dataTableClassColumn' style='cursor:default;'></td>
                <td class='dataTableClassColumn' style='cursor:default;'></td>
                <td class='dataTableClassColumn' style='cursor:default;'></td>
                <td class='dataTableClassColumn' style='cursor:default;'><!--<div class='overdueCount'><%= overdueCount %></div>--></td>
                <!--<td class='dataTableClassColumn' style='cursor:default;'><div class='<%= overdueClass %>' /></td>-->
                <td class='dataTableClassColumn' style='cursor:default;'></td> <!-- Priority -->
                <td class='dataTableClassColumn' style='cursor:default;'></td> <!-- Status -->
            </tr>

            <% if(tasksThisPeriod) { %>

                    <% var actionsBodyExpanded = (actionsExpanded ? '' : 'HIDDEN'); %>

                    <tbody id='body_<%= id %>'  class='<%= actionsBodyExpanded %>'>

                    <% for (var j = 0; j < tasksThisPeriod.length; j++) { %>

                        <% var task = tasksThisPeriod[j]; %>

                        <% var priority = task.Priority; %>
                        <% var completed = (task.IsClosed == true); %>
                        <% var completedTask = (completed ? 'completed' : ''); %>
                    
                        <% var priorityClass = ''; %>

                        <% if(priority == 'High') { %>
                    
                            <% priorityClass += 'highPriority'; %>
                            <% priorityClass += (completed ? 'Inactive' : 'Active'); %>
                    
                        <% } else if(priority == 'Normal') { %>
                    
                            <% priorityClass += 'normalPriority'; %>
                            <% priorityClass += (completed ? 'Inactive' : 'Active'); %>
                    
                        <% } else if(priority == 'Low') { %>
                    
                            <% priorityClass += 'lowPriority'; %>
                            <% priorityClass += (completed ? 'Inactive' : 'Active'); %>
                    
                        <% } %>

                        <% var priorityClass = 'imageBlock ' + priorityClass; %>


                        <!-- check if task is Overdue -->

                        <% activityDateClass = ''; %>
                        <% overdueClass = ''; %>
                        <% if(task.overdue) { %>
                        
                            <% overdueClass = 'imageBlock overdueStatus'; %>
                            <% activityDateClass = 'overdueActivityDate'; %>

                        <% } %>

                        <% var taskSubject = task.Subject; %>
                        <% var objectiveSubject = task.objectiveSubject; %>
                        <% var objectiveType = task.objectiveType; %>
                        
                        <% var contact = ''; %>
                        <% if((task.Who) && (task.Who.Name)) { %>
                            <% contact = task.Who.Name; %>
                        <% } %>
                        

                        <!-- get the Status image -->

                    <% var status = task.Status; %>
                    <% var isclosed = task.IsClosed; %>
                    
                    <% var statusClass = 'imageBlock '; %>


                    <% if(task.overdue) { %>

                        <% statusClass += 'overdueStatusBar'; %>

                    <% } else if(isclosed == true) { %>

                        <% statusClass += 'completedStatusBar'; %>

                    <% } else if(isclosed == false) { %>

                        <% statusClass += 'openStatusBar'; %>

                    <% } %>

                    <!--

                    <% } else if(status == 'Not Started') { %>
                    
                        <% statusClass += 'notStartedStatusBar'; %>
                    
                    <% } else if(status == 'In Progress') { %>

                        <% statusClass += 'inProgressStatusBar'; %>
                    
                    <% } else if(status == 'Completed') { %>

                        <% statusClass += 'completedStatusBar'; %>
                    
                    <% } else if(status == 'Waiting on someone else') { %>

                        <% statusClass += 'pausedDeferredStatusBar'; %>
                    
                    <% } else if(status == 'Deferred') { %>

                        <% statusClass += 'pausedDeferredStatusBar'; %>
                    
                    <% } %>

                    -->

                        <% var rowSelectedClass = ''; %>
                        <% if(task.Id == selectedRowId) { %>
                    
                            <% rowSelectedClass = 'rowSelected'; %>

                        <% } %>

                        <tr id='task_<%= task.Id %>_<%= id %>' class='<%= rowSelectedClass %>' >
                            <td class='dataTableClassToggleColumn'><!-- for the expand / collapse icon --> </td>
                            <td ttgid='TBLACTIONLIST_actionname' class='dataTableClassFirstColumn  <%= completedTask %>'><div class='<%- activityDateClass %>'><%- taskSubject %></div></td> <!--Action Status bar-->
                            <td ttgid='TBLACTIONLIST_objectivename' class='<%= completedTask %>'><div class='<%= activityDateClass %>'><%- objectiveSubject %></div></td>
                            <!--<td ttgid='TBLACTIONLIST_type' class='<%= completedTask %>'><div class='<%= activityDateClass %>'><%- objectiveType %></div></td>-->
                            <td ttgid='TBLACTIONLIST_owner' class='<%= completedTask %>'><div class='<%= activityDateClass %>'><%- task.Owner.Name %></div></td>
                            <td ttgid='TBLACTIONLIST_contact' class='<%= completedTask %>'><div class='<%= activityDateClass %>'><%- contact %></div></td>
                            <td ttgid='TBLACTIONLIST_date' class='<%= completedTask %>'><div class='<%= activityDateClass %>'><%= task.formattedActivityDate %></div></td>
                            <!--<td><div class='<%= overdueClass %>' /></td>-->
                            <td ttgid='TBLACTIONLIST_priority'><div class='<%= priorityClass %>' /></td>
                            <td ttgid='TBLACTIONLIST_status' class='dataTableClassColumn <%= completedTask %>'><!--<div class='<%= statusClass %>' />--><div class='<%= activityDateClass %>'><%= status %></div></td>
                        </tr>

                    <% } %>

                    </tbody>

            <% } %>   <!-- end of if tasks this period -->

        <% } %>  <!-- end of 'configs' for-loop -->
            
        </tbody>
    </table>
    </div>
</script>


<script id='tabs_template' type='text/template'>
    <div id='page-wrap'>
        <div id='tabs'>

            <div id='expand_collapse_details'>
                <img border='0' src='{!URLFOR($Resource.TAM, 'images/objectives/arrow_sans_down.png')}' alt='toggleArrow' width='20' height='20'>
            </div>
        
            <ul>
                <li><a href='#tabTwo'>Details</a></li>
                <li><a href='#tabOne'>Actions</a></li>
            </ul>
    
            <div id='tabOne' class='ui-tabs-panel'>
            </div>
            
            <div id='tabTwo' class='ui-tabs-panel'>
            </div>
        </div>
    </div>
</script>

    
    <script>
    
        var spec = {
            ttgApi: ttg.apiLayer.sfdcDelegate( { sessionid : '{!JSENCODE($Api.Session_ID)}', planid : '{!JSENCODE(AccountPlan.id)}' } ),
            readonly: {!Editable == false},
            dateformat: '{!JSENCODE(dateFormat)}',
            planid: '{!JSENCODE(AccountPlan.id)}',
            fiscalYearStartMonth: {!fiscalYearStartMonth},
            usesStartDateAsFiscalYearName: {!usesStartDateAsFiscalYearName},                
            userId: '{!$User.id}'
        };
        
        var ttg = ttg || {}; 
    
        var objectiveId = null;
        var actionId = null;
    
        ttg.objectiveApi = function(spec, ttgApiSpec) {
       
        return {
            upsertObjective     :   ttgApiSpec.ttgApi.upsertObjective2,
            upsertAction        :   ttgApiSpec.ttgApi.upsertAction,
            deleteObjective     :   ttgApiSpec.ttgApi.deleteObjective,
            deleteAction        :   ttgApiSpec.ttgApi.deleteAction
        }
    }
     
        
    var currentPage = '{!JSENCODE(SelectedPage)}';

    var ttg_planobjectives = (function(_spec) {
    
        var fiscalYearStartMonth = spec.fiscalYearStartMonth;

        var dateFormat = 'yy-mm-dd';
        if(spec.dateformat) {
            dateFormat = spec.dateformat.replace('yy', 'y').replace('yy', 'y');
        }

        var api = ttg.objectiveApi({sessionid : '{!JSENCODE($Api.Session_ID)}'}, _spec);

        var that = {};
        var planId = _spec.planid;    
        var data;
            
        var ttgApi = _spec.ttgApi;
        var readonly = _spec.readonly;
        var userId = _spec.userId;
        
        var iPad = ttg.isTouchScreen(); //navigator.userAgent.match(/iPad/i) != null;   
        
        var isInEditMode = false;
        
        var sortConfig = {
                            type        :   '',
                            fieldname   :   '',
                            ascending   :   true
        };
                            

         var selectedObjective = "{!JSENCODE($CurrentPage.parameters.objective)}";
         if(! selectedObjective) {
             selectedObjective = null;
         }
         
         var isCreateEditDialogInProgress = false;
         

        function getPlanObjectives(accUnitId) {
            showAjaxSpinner(true);
            ttgApi.getPlanObjectives2('{!JSENCODE(AccountPlan.id)}', accUnitId, updateRawData, undefined, completedGet);
        }
        
        function getPlanObjectivesAndRefreshDisplayItemsOnly(accUnitId) {
            showAjaxSpinner(true);
            ttgApi.getPlanObjectives2('{!JSENCODE(AccountPlan.id)}', accUnitId, updateRawData, undefined, completedGetItemsOnly);
        }
           
            
        function updateRawData(d) {
            data = d;
        }

        function completedGet() {
            
            render(false);
            showAjaxSpinner(false);
        }
        
        function completedGetItemsOnly() {
            
            render(true);
            showAjaxSpinner(false);
        }
        
        
            
        function render(itemsonly) {
            
            //console.log('>>> render() called, itemsonly:' + itemsonly);
            
            // sort the owners list by name
            var configData = {
                            ascending : true, 
                            fieldname : 'name'
                        };
        
            var ownersSortUtil = ttg.ownersSortUtil(configData);
            data.owners.owner = ownersSortUtil.sort(data.owners.owner);
            
            // get Task owners
            var tasksModel = ttg.tasksModel({ model : data.planobjectives.planobjective});
            var taskOwners = tasksModel.getTaskOwners(data.owners.owner);
            data.taskOwners = ownersSortUtil.sort(taskOwners);
            
            // sort the Plan Units by name
            data.planunits.planunit = ownersSortUtil.sort(data.planunits.planunit);
            
            if(false == itemsonly) { 
                renderFilter();
                createFilterCallbacks();
            }
            
            
            // update the 'overdue' status of each task
            var tasksModel = ttg.tasksModel({ model : data.planobjectives.planobjective});
            tasksModel.updateTasksOverdueStatus(new Date());
            
            
            
            if(false == itemsonly) {
                //renderOjectivesAndActions(data.planobjectives.planobjective);
                applyFilterToObjectivesAndActions(createFilter());
            } else {    
                displayView(false);
            }
            
        }
        
        function showHidePlanUnitsFilter(view) {
        
            if(view == 'tasks') {
                jQuery('#planunits').hide();
                jQuery('#planunitslabel').hide();
            } else {
                jQuery('#planunits').show();
                jQuery('#planunitslabel').show();
            }
        }
        
        function redrawOwnersFilter(view) {
        
            //console.log('>>> redrawOwnersFilter() called, view:' + view);
        
            // get the owners list, depening on whether the 'Objectives' or 'Actions' view is selected 
            var owners = data.owners.owner;
            if(view == 'tasks') {
                owners = data.taskOwners;
            }
            
            // replace the Owners picklist with the above values
            var ownersList = jQuery('#owners');
            ownersList.empty();
            
            var option = jQuery('<option/>').text('All').val('');
            ownersList.append(option);
            
            for(var i=0; i < owners.length; i++) {
                var owner = owners[i];
                option = jQuery('<option/>').text(owner.name).val(owner.id);
                ownersList.append(option);
            }

            ownersList.trigger("chosen:updated");
        
        } 
        
        function displayView(updateOwnersFilter) {
        
            showAjaxSpinner(true);
            
            /* DMDEV-3256 */
            var tab_idx;           

		    function getSelectedTabIndex() { 
				return jQuery("#tabs").tabs('option', 'active');
			}
					
			tab_idx = getSelectedTabIndex();
     
            var myView = jQuery('#view').val();
            
            if(updateOwnersFilter) {
                redrawOwnersFilter(myView);
                showHidePlanUnitsFilter(myView);
            } 
            
            if(myView == 'objectives') {
                
                applyFilterToObjectivesAndActions(createFilter(), tab_idx);
                
                
            } else if(myView == 'tasks') {
         
                applyFilterToTasks(createFilter());
            
            } else if(myView == 'timeline') {
                
                //console.log('>>> createFilterCallbacks() called, myView == timeline');         
                applyFilterToTimeline(createFilter());
                
                // TODO - review the Timeline spec, and apply the changes, esp. to display of tasks (coloured dots)
            }
            
            showAjaxSpinner(false);
        }
        
        function createFilterCallbacks() {
            
            /* Done: radio button replaced with checkbox */
            
            /* replaced checkbox with picklist
            jQuery('#hideCompleted').click(function () {
            
                displayView(false);
                
            })
            */
            
            jQuery('#completed').change(function () {
            
                displayView(false);
                
            })
            
            
            jQuery('#view').change(function () {
            
                displayView(true);
                
            })
            
                        
            jQuery('input[type=radio]').uncheckableRadio().data('wasChecked', false);
            
            
            jQuery('#owners').change(function () {
            
                displayView(false);
                
            })
            
            jQuery('#planunits').change(function () {
            
                displayView(false);
                
            })
        
        }
        
        // http://stackoverflow.com/questions/2117538/jquery-how-to-uncheck-a-radio-button
        
        /* replaced checkboxes with radio buttons */
        
        (function( $ ){

            $.fn.uncheckableRadio = function() {
        
                return this.each(function() {
                
                    // start: http://stackoverflow.com/questions/2117538/jquery-how-to-uncheck-a-radio-button/8318129#8318129
                    var radio = this;
                    $('label[for="' + radio.id + '"]').add(radio).mousedown(function () {
                        $(radio).data('wasChecked', radio.checked);
                    });
    
                    /*
                    $('label[for="' + radio.id + '"]').add(radio).click(function () {
                        if ($(radio).data('wasChecked'))
                            radio.checked = false;
                    });
                    */
                    // end: http://stackoverflow.com/questions/2117538/jquery-how-to-uncheck-a-radio-button/8318129#8318129
                    
                
                    /*
                    $(this).mousedown(function() {
                        $(this).data('wasChecked', this.checked);
                    });
                    */
        
                    $(this).click(function() {
                        //console.log('>>> uncheckableRadio was clicked');
                        if ($(this).data('wasChecked')) {
                            this.checked = false;
                            $(this).data('wasChecked', false);
                            //console.log('>>> wasChecked is true, setting checked/wasChecked to false');
                            
                            //  restore the 'unclicked' state of the radio button
                            var myObj = $(this);
                            var myId = myObj.attr('id');
                            //console.log('myId: ' + myId);
                            
                            var priority = '';
                            var labelId = '';
                            
                            switch(myId) {

                                case 'radio0' :
                                    priority = 'high';
                                    labelId = 'radioLabel0';                                
                                break;
                                
                                case 'radio1' :
                                    priority = 'normal';
                                    labelId = 'radioLabel1';                                
                                break;
                                
                                case 'radio2' :
                                    priority = 'low';
                                    labelId = 'radioLabel2';                                
                                break;
                                /*
                                case 'radio3' :
                                    priority = 'completed';
                                    labelId = 'radioLabel3';                                
                                break;
                                */
                            }
                            
                            var cssToRemove = priority + 'PriorityActiveBig';
                            var cssToAdd = priority + 'PriorityInactiveBig';
                            
                            $('#' + labelId).removeClass(cssToRemove);
                            $('#' + labelId).addClass(cssToAdd);
                            
                            
                        } else {
                            //console.log('>>> wasChecked is false, setting checked/wasChecked to true');
                            this.checked = true;
                            $(this).data('wasChecked', true);
                            
                            //  restore the 'clicked' state of the radio button
                            var myObj = $(this);
                            var myId = myObj.attr('id');
                            //console.log('myId: ' + myId);

                            var priority = '';
                            var labelId = '';
                            
                            switch(myId) {

                                case 'radio0' :
                                    priority = 'high';
                                    labelId = 'radioLabel0';                                
                                break;
                                
                                case 'radio1' :
                                    priority = 'normal';
                                    labelId = 'radioLabel1';                                
                                break;
                                
                                case 'radio2' :
                                    priority = 'low';
                                    labelId = 'radioLabel2';                                
                                break;
                                /*
                                case 'radio3' :
                                    priority = 'completed';
                                    labelId = 'radioLabel3';                                
                                break;
                                */
                            }
                            
                            var cssToRemove = priority + 'PriorityInactiveBig';
                            var cssToAdd = priority + 'PriorityActiveBig';
                            
                            $('#' + labelId).removeClass(cssToRemove);
                            $('#' + labelId).addClass(cssToAdd);
                            
                        }
                        displayView(false);                         
                    });
                });
        
            };
        
        })( jQuery );
        
        
        function createFilter() {
        
            // replaced checkbox with picklist:
            
            //var hideCompleted = (jQuery('#hideCompleted').attr('checked') ? false : true);        // Note true/false values swapped here, because new label ('Done') inverts meaning of original label '(Hide Completed') 
            //var hideCompleted = (jQuery('#radio3').attr('checked') ? false : true);
    
            var priorities = [];
            
            /* replaced checkboxes with radio buttons */
            
            for (var i = 0; i < data.priorities.length; i++) {

                var radiobuttonid = '#radio' + i;
                if(jQuery(radiobuttonid).is(':checked')) {
                    var priority = jQuery(radiobuttonid).val();
                    //console.log('>> in createFilter(), priority: ' + priority);
                    priorities.push(priority);  
                }   
            }
            
            if(priorities.length == 0) {
                //console.log('>> in createFilter(), no priorities are selected');
            }
            
            var owners = [];
            
            if(typeof jQuery('#owners').chosen === 'function') {
            
                //var ownernames = jQuery('#owners').chosen().text();
                var ownerids = jQuery('#owners').chosen().val();
                
                // parse list of owners, and push each owner into the owners array
                if(ownerids) {
                    
                    for(var i=0; i < ownerids.length; i++) {
                         
                        ownerid =  ownerids[i];
                         
                        var owner = {
                            name    :   '',
                            id      :   ownerid
                        }
                        
                        owners.push(owner);
                    }
                
                }
            
            } else {
            
                //var ownername = jQuery("#owners option:selected").text();
                //var ownerid = jQuery("#owners option:selected").val();
            
                jQuery('#owners').children('option:selected').each( function() {
                    var ownername = jQuery(this).text();
                    var ownerid = jQuery(this).val();
                
                    var owner = null;
            
                    if(ownerid && (ownerid.length > 0)) {
                        owner = {
                            name    :   ownername,
                            id      :   ownerid
                        }
                    }
                
                    owners.push(owner);
                });
            }
            
            var planunitid = null;
            
            jQuery('#planunits').children('option:selected').each( function() {
                planunitid = jQuery(this).val();
            });
            
            var completed = 'Open';
            
            jQuery('#completed').children('option:selected').each( function() {
                completed = jQuery(this).val();
            });
            
            //console.log('>> createFilter() completed: ' + completed);     
                
            var filter = {
                completed : completed,
                priorities : priorities,
                owners  : owners,
                planunitid  :   planunitid 
            };
            
            return filter;
        }
        
        function applyFilterToObjectivesAndActions(filter, tab_idx) {
        
            //console.log('>> applyFilterToObjectivesAndActions() entered');
            
            var objModel = ttg.objectivesModel({ model : data.planobjectives.planobjective});
            
            var objectivesFiltered = objModel.getObjectivesByFilter(filter);
            
            renderOjectivesAndActions(objectivesFiltered);
            
            /* DMDEV-32568 */
            jQuery('#tabs').tabs({ active: tab_idx});
        }
        
        function isObjectivesSortConfigured() {
            var configured = false;
            
            if((sortConfig.type == 'objective') && (sortConfig.fieldname) && (sortConfig.fieldname.length > 0)) {
                configured = true;
            }
            
            return configured;
        }
        
        function isTasksSortConfigured() {
            var configured = false;
            
            if((sortConfig.type == 'task') && (sortConfig.fieldname) && (sortConfig.fieldname.length > 0)) {
                configured = true;
            }
            
            return configured;
        }
        
        function isNonDefaultTasksSortConfigured() {
            var configured = false;
            
            if((sortConfig.type == 'task') && (sortConfig.fieldname) && (sortConfig.fieldname.length > 0)) {
                
                if((sortConfig.fieldname == 'activitydate') &&
                    (sortConfig.ascending == true)) {
                
                    configured = false;
                        
                } else {
                
                    configured = true;
                }   
            }
            
            return configured;
        }
        
        function applyFilterToTasks(filter) {
        
            //console.log('>> applyFilterToTasks() entered');
            
            var tasksModel = ttg.tasksModel({ model : data.planobjectives.planobjective});
            
            // get the tasks for each of the date ranges    
            var configData = {
                                fiscalYearStartMonth : fiscalYearStartMonth
                            };
            
            var objDateUtil = ttg.objectivesDateUtil(configData);
            
            var today = new Date();
            
            // default is tasks are sorted by ActivityDate
            var tasksSortConfig = {
                            fieldname   :   'activitydate',
                            ascending   :   true
                };
                
            // apply task sort if there is one defined  
            if(isTasksSortConfigured()) {
            
                tasksSortConfig.fieldname = sortConfig.fieldname;
                tasksSortConfig.ascending = sortConfig.ascending;
                
            }
            
            var labelsAndTasks = [];
            var tasksSortUtil = ttg.tasksSortUtil(tasksSortConfig);
            
            var tasksFiltered = tasksModel.getTasksByFilter(filter);
            
            if(tasksSortConfig.fieldname == 'activitydate') {
            
                //var tasksFilteredSorted = tasksSortUtil.sort(tasksFiltered); // add this last to array of labelsAndTasks
                
                var tasksCompleted  = tasksModel.getTasksByCompleted(true, tasksFiltered);
                var tasksCompletedSorted = tasksSortUtil.sort(tasksCompleted);
                //labelsAndTasks.push( labelAndTask = { label: 'Historic', tasksThisPeriod: tasksCompletedSorted });
                
                var otherTasks = tasksCompletedSorted;
                
                var tasksOverdue = tasksModel.getTasksByOverdue(new Date(today.getTime()), tasksFiltered);
                var tasksOverdueSorted = tasksSortUtil.sort(tasksOverdue);
                var tasksOverdueSortedUnique = tasksModel.getUniqueTasks(tasksOverdueSorted, otherTasks);
                labelsAndTasks.push( labelAndTask = { label: 'Overdue', tasksThisPeriod: tasksOverdueSortedUnique });
                otherTasks = otherTasks.concat(tasksOverdueSortedUnique);
                
                var daterangeThisWeek = objDateUtil.getDateRangeThisWeek(new Date(today.getTime()));
                var tasksThisWeek = tasksModel.getTasksForDateRange(daterangeThisWeek, tasksFiltered);  
                var tasksThisWeekSorted = tasksSortUtil.sort(tasksThisWeek);
                var tasksThisWeekSortedUnique = tasksModel.getUniqueTasks(tasksThisWeekSorted, otherTasks);
                labelsAndTasks.push( labelAndTask = { label: 'This Week', tasksThisPeriod: tasksThisWeekSortedUnique });
                otherTasks = otherTasks.concat(tasksThisWeekSortedUnique);              
                
                var daterangeThisMonth = objDateUtil.getDateRangeThisMonth(new Date(today.getTime()));
                var tasksThisMonth = tasksModel.getTasksForDateRange(daterangeThisMonth, tasksFiltered);    
                var tasksThisMonthSorted = tasksSortUtil.sort(tasksThisMonth);
                var tasksThisMonthSortedUnique = tasksModel.getUniqueTasks(tasksThisMonthSorted, otherTasks);
                labelsAndTasks.push( labelAndTask = { label: 'This Month', tasksThisPeriod: tasksThisMonthSortedUnique });
                otherTasks = otherTasks.concat(tasksThisMonthSortedUnique);
                
                var daterangeNextMonth = objDateUtil.getDateRangeNextMonth(new Date(today.getTime()));
                var tasksNextMonth = tasksModel.getTasksForDateRange(daterangeNextMonth, tasksFiltered);
                var tasksNextMonthSorted = tasksSortUtil.sort(tasksNextMonth);
                var tasksNextMonthSortedUnique = tasksModel.getUniqueTasks(tasksNextMonthSorted, otherTasks);
                labelsAndTasks.push( labelAndTask = { label: 'Next Month', tasksThisPeriod: tasksNextMonthSortedUnique });
                otherTasks = otherTasks.concat(tasksNextMonthSortedUnique);
                
                var daterangeNextQuarter = objDateUtil.getDateRangeNextQuarter(new Date(today.getTime()), new Date(today.getTime()));
                var tasksNextQuarter = tasksModel.getTasksForDateRange(daterangeNextQuarter, tasksFiltered);
                var tasksNextQuarterSorted = tasksSortUtil.sort(tasksNextQuarter);
                var tasksNextQuarterSortedUnique = tasksModel.getUniqueTasks(tasksNextQuarterSorted, otherTasks);
                labelsAndTasks.push( labelAndTask = { label: 'Next Quarter', tasksThisPeriod: tasksNextQuarterSortedUnique });
                otherTasks = otherTasks.concat(tasksNextQuarterSortedUnique);
                
                var daterangeAfterNextQuarter = objDateUtil.getDateRangeAfterNextQuarter(new Date(today.getTime()), new Date(today.getTime()));
                var tasksAfterNextQuarter = tasksModel.getTasksForDateRange(daterangeAfterNextQuarter, tasksFiltered);
                var tasksAfterNextQuarterSorted = tasksSortUtil.sort(tasksAfterNextQuarter);
                var tasksAfterNextQuarterSortedUnique = tasksModel.getUniqueTasks(tasksAfterNextQuarterSorted, otherTasks);
                labelsAndTasks.push( labelAndTask = { label: 'Remaining', tasksThisPeriod: tasksAfterNextQuarterSortedUnique });
                otherTasks = otherTasks.concat(tasksAfterNextQuarterSortedUnique);
                
                //labelsAndTasks.push( labelAndTask = { label: 'All', tasksThisPeriod: tasksFilteredSorted });
                labelsAndTasks.push( labelAndTask = { label: 'Completed', tasksThisPeriod: tasksCompletedSorted });
                
                // on table reload, the ActivityDate column header is updated, to show as sorted (acending/descending)
                sortConfig.fieldname = tasksSortConfig.fieldname;
                sortConfig.ascending = tasksSortConfig.ascending;
                sortConfig.type = 'task';
            
            } else if(tasksSortConfig.fieldname == 'priority') {
            
                // default is tasks are sorted by ActivityDate
                var myTasksSortConfig = {
                            fieldname   :   'activitydate',
                            ascending   :   tasksSortConfig.ascending,
                            taskpriorities  :   data.taskpriorities
                };
                var myTasksSortUtil = ttg.tasksSortUtil(myTasksSortConfig);
            
                /*
                var priorities = ['Low'];
                var tasksLowPriority = tasksModel.doGetTasksByPriorities(priorities, tasksFiltered);
                var tasksLowPrioritySorted = myTasksSortUtil.sort(tasksLowPriority);
                labelsAndTasks.push( labelAndTask = { label: 'Low', tasksThisPeriod: tasksLowPrioritySorted });
                
                var priorities = ['Normal'];
                var tasksNormalPriority = tasksModel.doGetTasksByPriorities(priorities, tasksFiltered);
                var tasksNormalPrioritySorted = myTasksSortUtil.sort(tasksNormalPriority);
                labelsAndTasks.push( labelAndTask = { label: 'Normal', tasksThisPeriod: tasksNormalPrioritySorted });
                
                var priorities = ['High'];
                var tasksHighPriority = tasksModel.doGetTasksByPriorities(priorities, tasksFiltered);
                var tasksHighPrioritySorted = myTasksSortUtil.sort(tasksHighPriority);
                labelsAndTasks.push( labelAndTask = { label: 'High', tasksThisPeriod: tasksHighPrioritySorted });
                */
                var myFilterPriorities = filter.priorities;
                
                if(!(myFilterPriorities) || (myFilterPriorities.length == 0)) {
                    myFilterPriorities = [];
                    
                    for (var w= 0; w < data.priorities.length; w++) {

                        var priority = data.priorities[w];
                        myFilterPriorities.push(priority.value);
                    }   
                    
                }

                
                for(var i=0; i < myFilterPriorities.length; i++) {
                    
                    var priority = myFilterPriorities[myFilterPriorities.length - 1 - i];
                    var priorities = [];
                    if(priority) {
                        priorities.push(priority);
                    }
                    
                    var tasksByPriority = tasksModel.doGetTasksByPriorities(priorities, tasksFiltered);
                    var tasksByPrioritySorted = myTasksSortUtil.sort(tasksByPriority);
                    labelsAndTasks.push( labelAndTask = { label: priorities[0], tasksThisPeriod: tasksByPrioritySorted });
                }
            
            } else if(tasksSortConfig.fieldname == 'status') {
            
                // default is tasks are sorted by ActivityDate
                var myTasksSortConfig = {
                            fieldname   :   'activitydate',
                            ascending   :   tasksSortConfig.ascending
                };
                var myTasksSortUtil = ttg.tasksSortUtil(myTasksSortConfig);
                
                var myTaskStatuses = tasksModel.getTasksByCompletedString(filter.completed, data.taskstatuses); 
                
                for(var i=0; i < myTaskStatuses.length; i++) {
                    var taskStatus = myTaskStatuses[i];
                    var taskStatusLabel = taskStatus.MasterLabel;
                    var taskStatusValue = taskStatus.MasterLabel;
                    
                    var tasksByStatus = tasksModel.doGetTasksByStatus(taskStatusValue, tasksFiltered);
                    var tasksByStatusSorted = myTasksSortUtil.sort(tasksByStatus);  
                    labelsAndTasks.push( labelAndTask = { label: taskStatusLabel, tasksThisPeriod: tasksByStatusSorted });
                }
            
            } else if(tasksSortConfig.fieldname == 'owner') {
            
                // default is tasks are sorted by ActivityDate
                var myTasksSortConfig = {
                            fieldname   :   'activitydate',
                            ascending   :   tasksSortConfig.ascending
                };
                var myTasksSortUtil = ttg.tasksSortUtil(myTasksSortConfig);
            
                var myTaskOwners = data.taskOwners;
                if((filter.owners) && (filter.owners.length > 0) && (filter.owners[0]) && (filter.owners[0].id) && (filter.owners[0].name)) {
                    var filterByOwnerId = filter.owners[0].id;
                    var filterByOwnerName = filter.owners[0].name;
                    myTaskOwners = [];
                    myTaskOwners.push({
                        id      :   filterByOwnerId,
                        name    :   filterByOwnerName
                    });
                }
                
                for(var j=0; j < myTaskOwners.length; j++) {
                    var owner = myTaskOwners[j];
                    var ownerLabel = owner.name;
                    
                    var tasksByOwner = tasksModel.doGetTasksByOwner(owner, tasksFiltered);
                    var tasksByOwnerSorted = myTasksSortUtil.sort(tasksByOwner);
                    labelsAndTasks.push( labelAndTask = { label: ownerLabel, tasksThisPeriod: tasksByOwnerSorted });
                }
            
            } else if(tasksSortConfig.fieldname == 'objectivetype') {
            
                // default is tasks are sorted by ActivityDate
                var myTasksSortConfig = {
                            fieldname   :   'activitydate',
                            ascending   :   tasksSortConfig.ascending
                };
                var myTasksSortUtil = ttg.tasksSortUtil(myTasksSortConfig);
                
                for(var m=0; m < data.types.length; m++) {
                    var type = data.types[m];
                    var label = type.label;
                    var value = type.value;
                    
                    var tasksByObjectiveType = tasksModel.doGetTasksByObjectiveType(value, tasksFiltered);
                    var tasksByObjectiveTypeSorted = myTasksSortUtil.sort(tasksByObjectiveType);
                    
                    labelsAndTasks.push( labelAndTask = { label: label, tasksThisPeriod: tasksByObjectiveTypeSorted });
                }
            
            } else if(tasksSortConfig.fieldname == 'contact') {
            
                var contacts = tasksModel.doGetTaskContacts(tasksFiltered);
                
                // sort the contacts list by name
                var configData = {
                                ascending : true, 
                                fieldname : 'name'
                            };
            
                var ownersSortUtil = ttg.ownersSortUtil(configData);
                contacts = ownersSortUtil.sort(contacts);
                
                var tasksWithContact = [];
            
                // default is tasks are sorted by ActivityDate
                var myTasksSortConfig = {
                            fieldname   :   'activitydate',
                            ascending   :   tasksSortConfig.ascending
                };
                var myTasksSortUtil = ttg.tasksSortUtil(myTasksSortConfig);
                
            
                for(var k=0; k < contacts.length; k++) {
                    var contact = contacts[k];
                    
                    var label = contact.name;
                    
                    if(label && (label.length > 0)) {
                    
                        var tasksByContact = tasksModel.doGetTasksByContact(contact, tasksFiltered);
                        var tasksByContactSorted = myTasksSortUtil.sort(tasksByContact);
                        labelsAndTasks.push( labelAndTask = { label: label, tasksThisPeriod: tasksByContactSorted });
                        tasksWithContact = tasksWithContact.concat(tasksByContactSorted);
                    }
                }
                
                var tasksWithNoContact = tasksModel.getUniqueTasks(tasksFiltered, tasksWithContact);
                if(tasksWithNoContact && (tasksWithNoContact.length > 0)) {
                    var tasksWithNoContactSorted = myTasksSortUtil.sort(tasksWithNoContact);
                    labelsAndTasks.push( labelAndTask = { label: 'No Contact', tasksThisPeriod: tasksWithNoContactSorted });
                }
                
            
            } else if(tasksSortConfig.fieldname == 'objectivesubject') {
            
                // default is tasks are sorted by ActivityDate
                var myTasksSortConfig = {
                            fieldname   :   'activitydate',
                            ascending   :   tasksSortConfig.ascending
                };
                var myTasksSortUtil = ttg.tasksSortUtil(myTasksSortConfig);
            
            
                var subjects = tasksModel.doGetTaskObjectiveSubjects(tasksFiltered);
            
                for(var p=0; p < subjects.length; p++) {
                    var subject = subjects[p];
                    var label = (subject ? subject : 'All');
                    
                    var tasksByObjectiveSubject = tasksModel.doGetTasksByObjectiveSubject(subject, tasksFiltered);
                    var tasksByObjectiveSubjectSorted = myTasksSortUtil.sort(tasksByObjectiveSubject);
                    labelsAndTasks.push( labelAndTask = { label: label, tasksThisPeriod: tasksByObjectiveSubjectSorted });
                }
            }
            
            renderTasks(tasksSortConfig.ascending, labelsAndTasks);
        
        }
        
        function applyFilterToTimeline(filter) {
        
            //console.log('>> applyFilterToTimeline() entered');
            
            var objModel = ttg.objectivesModel({ model : data.planobjectives.planobjective});
            
            var objectivesFiltered = objModel.getObjectivesByFilter(filter);
            
            objModel = ttg.objectivesModel({ model : objectivesFiltered});
            
            // get the tasks for each of the date ranges    
            var configData = {
                                fiscalYearStartMonth : fiscalYearStartMonth
                            };
            
            var objDateUtil = ttg.objectivesDateUtil(configData);
            
            var today = new Date();
            
            var daterangeThisWeek = objDateUtil.getDateRangeThisWeek(new Date(today.getTime()));
            var tasksThisWeek = objModel.getTasksForDateRange(daterangeThisWeek);   
            
            var daterangeThisMonth = objDateUtil.getDateRangeThisMonth(new Date(today.getTime()));
            var tasksThisMonth = objModel.getTasksForDateRange(daterangeThisMonth); 
            
            var daterangeNextMonth = objDateUtil.getDateRangeNextMonth(new Date(today.getTime()));
            var tasksNextMonth = objModel.getTasksForDateRange(daterangeNextMonth);
            
            var daterangeNextQuarter = objDateUtil.getDateRangeNextQuarter(new Date(today.getTime()), new Date(today.getTime()));
            var tasksNextQuarter = objModel.getTasksForDateRange(daterangeNextQuarter);
            
            var daterangeFirstQuarterOfNextYear = objDateUtil.getDateRangeFirstQuarterOfNextYear(new Date(today.getTime()), new Date(today.getTime()));
            var tasksFirstQuarterOfNextYear = objModel.getTasksForDateRange(daterangeFirstQuarterOfNextYear);
            
            updateTaskStatusCounts(objectivesFiltered, false);
            
            renderTimeline(objectivesFiltered, tasksThisWeek, tasksThisMonth, tasksNextMonth, tasksNextQuarter, tasksFirstQuarterOfNextYear);
        
        }
        
        function updateTaskStatusCounts(objectives, shouldFormatDueDate) {
        
            var maxTotal = 0;
            
            var configData = {
                                fiscalYearStartMonth : fiscalYearStartMonth
                            };
            
            var objDateUtil = ttg.objectivesDateUtil(configData);
            
            //var today = new Date();
        
            for (var i = 0; i < objectives.length; i++) {
            
                var objective = objectives[i];
                
                if(shouldFormatDueDate) {
                    var d = null;
                    if(objective.duedate) {
                        var d = new Date(objective.duedate);
                        d = new Date(d.getTime() + (d.getTimezoneOffset() * 60000));
                    }
                    // format the objective's due date, which is returned by the server in milliseconds
                    var formattedDueDate = objective.duedate ? jQuery.datepicker.formatDate(dateFormat, new Date(d)) : '';
                    objective.formattedDueDate = formattedDueDate;
                }
                
                if(objective.tasks) {
                
                    var counts = {
                        total       :   0,
                        notstarted  :   0,
                        inprogress  :   0,
                        completed   :   0,
                        waiting     :   0,
                        deferred    :   0,
                        overdue     :   0,
                        open        :   0
                    };
                    
                    for (var j = 0; j < objective.tasks.length; j++) {
                        
                        var task = objective.tasks[j];
                        
                        var d = null;
                        if(task.ActivityDate) {
                            var d = new Date(task.ActivityDate);
                            d = new Date(d.getTime() + (d.getTimezoneOffset() * 60000));
                        }
                        
                        // format the task's activity date, which is returned by the server in milliseconds     
                        var formattedActivityDate = task.ActivityDate ? jQuery.datepicker.formatDate(dateFormat, new Date(d)) : '';
                        task.formattedActivityDate = formattedActivityDate;
                        
                        if(task.overdue) {
                        
                            counts.total++;
                            counts.overdue++;
                        
                        } else {
                            /*
                            if(task.Status == 'Not Started') {
                                counts.total++;
                                counts.notstarted++;
                            
                            } else if(task.Status == 'In Progress') {
                                counts.total++;
                                counts.inprogress++;
                            
                            } else if(task.Status == 'Completed') {
                                counts.total++;
                                counts.completed++;
                            
                            } else if(task.Status == 'Waiting on someone else') {
                                counts.total++;
                                counts.waiting++;
                            
                            } else if(task.Status == 'Deferred') {
                                counts.total++;
                                counts.deferred++;
                            }
                            */
                            if(task.IsClosed == true) {
                                counts.total++;
                                counts.completed++;
                            } else {
                                counts.total++;
                                counts.open++;
                            }
                        }
                        
                    }
                    objective.taskStatusCounts = counts;
                    
                    if(counts.total > maxTotal) {
                        maxTotal = counts.total; 
                    }
                }
            }
            
            return maxTotal;
        }
        
        
        function updateStatusCounts(configs) {
        
            var maxTotal = 0;
        
            var configData = {
                                fiscalYearStartMonth : fiscalYearStartMonth
                            };
            
            var objDateUtil = ttg.objectivesDateUtil(configData);
            
            for(var i=0; i < configs.length; i++ ) {
        
                var config = configs[i];
                var tasks = config.tasksThisPeriod;
                
                var counts = {
                        total       :   0,
                        notstarted  :   0,
                        inprogress  :   0,
                        completed   :   0,
                        waiting     :   0,
                        deferred    :   0,
                        overdue     :   0,
                        open        :   0
                    };
                
                for (var j=0; j < tasks.length; j++) {
                
                    var task = tasks[j];
                    
                    if(task.overdue) {
                        
                        counts.total++;
                        counts.overdue++;
                    
                    } else {
                        
                        /*
                        if(task.Status == 'Not Started') {
                            counts.total++;
                            counts.notstarted++;
                        
                        } else if(task.Status == 'In Progress') {
                            counts.total++;
                            counts.inprogress++;
                        
                        } else if(task.Status == 'Completed') {
                            counts.total++;
                            counts.completed++;
                        
                        } else if(task.Status == 'Waiting on someone else') {
                            counts.total++;
                            counts.waiting++;
                        
                        } else if(task.Status == 'Deferred') {
                            counts.total++;
                            counts.deferred++;
                        }
                        */
                        
                        if(task.IsClosed == true) {
                            counts.total++;
                            counts.completed++;
                        } else {
                            counts.total++;
                            counts.open++;
                        }
                        
                    }
                
                }
                
                config.taskStatusCounts = counts;
                
                if(counts.total > maxTotal) {
                    maxTotal = counts.total; 
                }
            }
            
            return maxTotal;
        }
        
        function renderFilter() {
            
            var objectivesFilterTemplateHTML = jQuery('#objectives_filter_template').html();

            var compiledObjectivesFilterTemplate = _.template(objectivesFilterTemplateHTML, { data : data });

            jQuery('#ITEMS_FILTER').html(compiledObjectivesFilterTemplate);
            
            
            // add 'chosen' to owners picklist
            if(typeof jQuery('#owners').chosen === 'function') {
                
                jQuery('#owners').addClass('chzn-select').attr('multiple', 'multiple');
            
                jQuery('#owners').chosen();

            }
                
        }
        
        function renderOjectivesAndActions(objectives) {
        
            //console.log('>> renderOjectivesAndActions() entered');
            
            // default is objectives are sorted by DueDate
            var objectivesSortConfig = {
                type        :   'objective',
                fieldname   :   'duedate',
                ascending   :   true,
                statuses    :   data.statuses
            };
                
            // apply task sort if there is one defined  
            if(isObjectivesSortConfigured()) {
            
                objectivesSortConfig.fieldname = sortConfig.fieldname;
                objectivesSortConfig.ascending = sortConfig.ascending;
                objectivesSortConfig.objectivepriorities = data.priorities;
            } 
            
            // apply selected sort by field, asc or desc
            var objectivesSortUtil = ttg.objectivesSortUtil(objectivesSortConfig);
            var objectivesSorted = objectivesSortUtil.sort(objectives);
            
        
            jQuery('#ITEMS').html('');
            jQuery('#ITEM_DETAILS').html('');
            jQuery('#TIMELINE').html('');   
            
            var objectivesTemplateHTML = jQuery('#objectives_template').html();
            
            var maxTotal = updateTaskStatusCounts(objectivesSorted, true);
            
            var selectedRowId = getSelectedRowId('objective');
                        
            var compiledTemplate = _.template(objectivesTemplateHTML, { objectives : objectivesSorted, sortConfig : objectivesSortConfig, maxTotal : maxTotal, selectedRowId : selectedRowId, data : data });

            jQuery('#ITEMS').html(compiledTemplate);
            
            // add click handlers for the objective row expand / collapse icons
            for (var k = 0; k < objectivesSorted.length; k++) {
                
                var objective = objectivesSorted[k];
            
                // add click handlers for each objective row    
                var objectiveRowId = '#objective_' + objective.id + '_';
                jQuery(objectiveRowId).click(itemsRowClicked);
                                 
            }
            
            // add click handlers for sorting by column names
            var sortFieldIds = [];
            sortFieldIds.push('#objective_subject_');
            sortFieldIds.push('#objective_owner_');
            sortFieldIds.push('#objective_type_');
            sortFieldIds.push('#objective_planunit_');
            sortFieldIds.push('#objective_duedate_');
            sortFieldIds.push('#objective_priority_');
            sortFieldIds.push('#objective_status_');
            
            for (var m = 0; m < sortFieldIds.length; m++) {
                var sortFieldId = sortFieldIds[m];
                jQuery(sortFieldId).click(sort);
            }
            
            displayAddObjectiveButton(true);
                
            showDetails('objective', selectedRowId);    
        }
        
        
        function renderObjectiveTasks2(objective) {
        
            //console.log('>> renderObjectiveTasks2() entered');
            
            showAjaxSpinner(true);
        
            jQuery('#tabOne').html(''); 
            
            var objectiveTasksTemplateHTML = jQuery('#objective_tasks_template2').html();
            
            var tasks = objective.tasks;
            var tasksModel = ttg.tasksModel({ model : null});
            var openTasks = tasksModel.getTasksByCompleted(false, tasks);
            var completedTasks = tasksModel.getTasksByCompleted(true, tasks);
            
            var configs = [];
            
            var openConfig = {
                    tableid :   'obj1tbl',
                    bodyid  :   'body2_' + objective.id,
                    title   :   'Open',
                    tasks   :   openTasks
                };
                
            configs.push(openConfig);
            
            var completedConfig = {
                    tableid :   'obj1tbl2',
                    bodyid  :   'body3_' + objective.id,
                    title   :   'Closed',
                    tasks   :   completedTasks
                };
                
            configs.push(completedConfig);
            
                        
            var compiledTemplate = _.template(objectiveTasksTemplateHTML, { objective : objective, configs : configs });

            jQuery('#tabOne').html(compiledTemplate);
            
            
            // click handlers for each edit/delete task link (1 of each per task/row of table)
            for (var m = 0; m < objective.tasks.length; m++) {
                var task = objective.tasks[m];
                var editTaskLinkId = '#edittask_' + task.Id + '_';
                jQuery(editTaskLinkId).click(addOrDelete);
                var deleteTaskLinkId = '#deletetask_' + task.Id + '_';
                jQuery(deleteTaskLinkId).click(addOrDelete);
            }   
            
            showAjaxSpinner(false);
        }
        
        function renderTabs() {
        
            //console.log('>> renderTabs()');
            showAjaxSpinner(true);
        
            jQuery('#ITEM_DETAILS').html('');   
            
            var tabsTemplateHTML = jQuery('#tabs_template').html();
                        
            var compiledTemplate = _.template(tabsTemplateHTML);

            jQuery('#ITEM_DETAILS').html(compiledTemplate);
            
            showAjaxSpinner(false);
        }
        
        function sort() {
            
            var id = jQuery(this).attr('id');
            var index0 = id.indexOf('_');
            var index1 = id.lastIndexOf('_');
            
            if((index0 > -1) && (index1 > -1)) {
            
                var type = id.substring(0, index0);
                var typeId = id.substring(index0 + 1, index1);
                
                //console.log('>> sort() entered, type: ' + type + ', typeId: ' + typeId);
                
                var ascending = false;
     
                if ((jQuery(this).hasClass('spanNotSorted')) || (jQuery(this).hasClass('spanSortedDesc'))) {
                    ascending = true;
                    jQuery(this).removeClass('spanSortedDesc');
                    jQuery(this).removeClass('spanNotSorted');
                    jQuery(this).addClass('spanSorted');
                
                } else {
                    ascending = false;
                    jQuery(this).removeClass('spanSorted');
                    jQuery(this).removeClass('spanNotSorted');
                    jQuery(this).addClass('spanSortedDesc');
                }
            
                sortConfig.type = type;
                sortConfig.ascending = ascending;
                sortConfig.fieldname = typeId;  
                
                //console.log('>> sort() entered, sortConfig.type: ' + sortConfig.type + ', sortConfig.fieldname: ' + sortConfig.fieldname + ', sortConfig.ascending: ' + sortConfig.ascending);
                
                // re-display the objectives/actions list
                displayView(false);
            }
        }
        
        function objectiveClicked(objective) {
        
            //console.log('>> objectiveClicked() entered');
            
            if(objective != null) {
                renderTabs();
                renderObjectiveTasks2(objective);
                renderObjectiveDetails2(objective);
                
                var selectedTabIndex = getSelectedTabIndex();
                
                jQuery('#tabs').tabs({ selected: selectedTabIndex});
                
                jQuery('#tabs').tabs({
                                        select: function( event, ui ) {
                                            taskTabClicked( event, ui );
                                        }
                });
                
                jQuery('#details_form').show();
                jQuery('#obj1tbl').show();
                jQuery('#obj1tbl2').show();
                //jQuery('#page-wrap').toggle( 'slide', {direction: 'right'});
                jQuery('#page-wrap').show();
                jQuery('#expand_collapse_details').toggleClass('rotated');
            }
        
        }
        
        function getSelectedTabIndex() {
            var selectedTabIndex = 0;
            
            var selectedRowId = getSelectedRowId('objective');
            
            if(selectedRowId) {
            
                var index = jQuery.cookies.get('AMPO_SELECTED_DETAILS_TAB');
                
                if(index) {
                    selectedTabIndex = index;
                }
            }
            
            return selectedTabIndex;
        }
        
        function taskTabClicked(event, ui) {
            //console.log('>>> taskTabClicked(), ui.index: ' + ui.index);
            // save the selected tab index in a cookie (AMPO => AM Plan Objectives)
            jQuery.cookies.set('AMPO_SELECTED_DETAILS_TAB', ui.index);
        }
        
        function clearSelectedTab() {
            jQuery.cookies.set('AMPO_SELECTED_DETAILS_TAB', null);
        }   
        
        function toggle(event) {
        
            var id = jQuery(this).attr('id');
            var typeid = id.substring(id.indexOf('_') + 1);
            //console.log('>> toggle() entered, id: ' + id + ', typeid: ' + typeid);
            
            var expanding = false;
        
            if (jQuery(this).hasClass('spanToggleExpanded')) {
                expanding = false;
                
                if(typeid == 'TasksHeader') {
                    var myToggleObjects = jQuery('span[id^=toggle_]');
                    
                    myToggleObjects.each(
                        function(index, element) {
                            jQuery(this).removeClass('spanToggleExpanded');
                        }
                    )
                            
                } else {
                    jQuery(this).removeClass('spanToggleExpanded');
                }
            
            } else {
                expanding = true;
        
                if(typeid == 'TasksHeader') {
                    var myToggleObjects = jQuery('span[id^=toggle_]');
                    
                    myToggleObjects.each(
                        function(index, element) {
                            jQuery(this).addClass('spanToggleExpanded');
                        }
                    )
                            
                } else {
                    jQuery(this).addClass('spanToggleExpanded');
                }   
            }
            
            var myObjects = null;
            
            if(typeid == 'TasksHeader') {
                myObjects = jQuery('tbody[id^=body_]');
            } else {
                myObjects = jQuery('#body_' + typeid);
            }
            
            // hide or show the Tasks under this Objective
            myObjects.each(
                function(index, element) {
                    
                    if (expanding) {
                        jQuery(this).removeClass('HIDDEN'); 
                        
                    } else {
                        jQuery(this).addClass('HIDDEN');
                    }
                }
            )
            
        }
        
        function itemsRowClicked() {
            
            var id = jQuery(this).attr('id');
        
            //console.log('>> itemsRowClicked() entered, id: ' + id);
            
            // get the selected objective or task, and use it to populate the details panel
            var index0 = id.indexOf('_');
            var index1 = id.lastIndexOf('_');
            
            if((index0 > -1) && (index1 > -1)) {
            
                var type = id.substring(0, index0);
                var typeId = id.substring(index0 + 1, index1);
                
                //console.log('>> itemsRowClicked() type: ' + type + ', typeId: ' + typeId);
                
                // check if row is already hightlighted
                var selectedRowId = jQuery('tr.rowSelected').attr('id');
                
                if(id == selectedRowId) {
                
                    if(type == 'objective') {
                        
                        hideTasksAndObjectiveDetails();
                        
                    } else if(type == 'task') {
                        
                        hideTaskDetails();
                    }
                    
                    clearSelectedTab();
                    
                } else {
                
                    // remove highlight from any row
                    jQuery('tr.rowSelected').removeClass('rowSelected');
                
                    // apply the hightlight to the selected row
                    jQuery('#' + id).addClass('rowSelected');
                    
                    
                    if(type == 'objective') {
                    
                        var objective = getObjective(typeId);
                        
                        objectiveClicked(objective);
                    
                    } else if(type == 'task') {
                        
                        var task = getTask(typeId);
                        renderTaskDetails(task);
                        
                    }
                    
                    // save the highlighted row details in a cookie (AMPO => AM Plan Objectives)
                    jQuery.cookies.set('AMPO_SELECTED_ROW', id);
                }   
            }       
        }
        
        function itemNameClicked() {
            
            var id = jQuery(this).attr('id');
        
            //console.log('>> itemNameClicked() entered, id: ' + id);
            
            // get the selected objective or task, and use it to populate the details panel
            var index0 = id.indexOf('_');
            var index1 = id.lastIndexOf('_');
            
            if((index0 > -1) && (index1 > -1)) {
            
                var type = id.substring(0, index0);
                var typeId = id.substring(index0 + 1, index1);
                
                //console.log('>> itemNameClicked() type: ' + type + ', typeId: ' + typeId);
                
                // save the highlighted row details in a cookie (AMPO => AM Plan Objectives)
                jQuery.cookies.set('AMPO_SELECTED_ROW', id);
                 
                clearSelectedTab(); // in case the user had been browsing the 2nd tab, as we want the 1st tab displayed here
                
                jQuery('#view option:[value=\'' + type + 's' + '\']').attr('selected', 'selected'); 
                displayView(true);
                
            }       
        }
        
        
        function displayAddObjectiveButton(display) {
        
            //console.log('>> in displayAddObjectiveButton() display: ' + display);
        
            if(display) {
                
                // add a click handler for the add objective icon
                var buttonid = '#addobjective_DUMMY_';
                jQuery(buttonid).click(addOrDelete);
            
            } else {
                jQuery('#TIMELINE').html('');
            }
        
        }
        
        
        function getObjective(id) {
            var result = null;
            
            var objectives = data.planobjectives.planobjective;
            
            for(var i=0; i < objectives.length; i++) {
                var objective = objectives[i];
                
                if(id == objective.id) {
                    result = objective;
                    return result;
                }
            }
            
            return result;
        }
        
        function getTask(id) {
            var result = null;
            
            var objectives = data.planobjectives.planobjective;
            
            for(var i=0; i < objectives.length; i++) {
            
                var objective = objectives[i];
                var tasks = objective.tasks;
            
                for(var j=0; j < tasks.length; j++) {
                
                    var task = tasks[j];
                        
                    if(id == task.Id) {
                        result = task;
                        return result;
                    }
                }
            }
            
            return result;
        }
        
        
        function renderObjectiveDetails2(objective) {
        
            //console.log('>> renderObjectiveDetails2() entered');
            showAjaxSpinner(true);
        
            jQuery('#tabTwo').html('');
            
            var objectiveDetailsTemplateHTML = jQuery('#objective_details_template2').html();
            
            // format the objective's due date, which is returned by the server in milliseconds
            var d = null;
            if(objective.duedate) {
                var d = new Date(objective.duedate);
                d = new Date(d.getTime() + (d.getTimezoneOffset() * 60000));
            }
            var formattedDueDate = objective.duedate ? jQuery.datepicker.formatDate(dateFormat, d) : '';
            
            objective.formattedDueDate = formattedDueDate;

            var compiledObjectiveDetailsTemplate = _.template(objectiveDetailsTemplateHTML, { data : data,
                                                                                            objective: objective });
            jQuery('#tabTwo').html(compiledObjectiveDetailsTemplate);
            
            // add click handler for edit objective
            var editObjectiveId = '#editobjective_' + objective.id + '_';
            jQuery(editObjectiveId).click(addOrDelete);
            
            // add click handler for delete objective
            var deleteObjectiveId = '#deleteobjective_' + objective.id + '_';
            jQuery(deleteObjectiveId).click(addOrDelete);
            
            // add click handler for add task
            var addTaskId = '#addtask_' + objective.id + '_';
            jQuery(addTaskId).click(addOrDelete);
            
            // add click handler for the expand/collapse details panel button
            jQuery('#expand_collapse_details').click(hideTasksAndObjectiveDetails);
            
            showAjaxSpinner(false); 
        }
        
        function expandCollapseDetailsPanel() {
        
            //console.log('>>> expandCollapseDetailsPanel()');
        
            jQuery('#details_form').addClass('action_list_header');

            //jQuery('#action_details_div').toggle( 'slide', { direction: 'right' });
            jQuery('#action_details_div').show();
            jQuery('#details_form').show();
            //jQuery('#expand_collapse_details').toggleClass('rotated');
            //jQuery('#action_details_div').css('display','block');
        }
        
        function hideTasksAndObjectiveDetails() {
            jQuery('#page-wrap').hide();
            jQuery('#details_form').hide();
            
            clearSelectedRow();
        }
        
        function hideTaskDetails() {
            jQuery('#action_details_div').hide();
            jQuery('#details_form').hide();
            
            clearSelectedRow();
        }
        
        function clearSelectedRow() {
            // un-set the selected objective row in the cookie
            jQuery.cookies.set('AMPO_SELECTED_ROW', null);
            
            // remove highlight from any row
            jQuery('tr.rowSelected').removeClass('rowSelected');
        }
        
        
        function addOrDelete() {
            //console.log('>> addOrDelete() entered');
                        
            var id = jQuery(this).attr('id');
            
            var index0 = id.indexOf('_');
            var index1 = id.lastIndexOf('_');
                        
            if((index0 > -1) && (index1 > -1)) {
            
                var type = id.substring(0, index0);
                var typeId = id.substring(index0 + 1, index1);
    
                //console.log('>> addOrDelete() type: ' + type + ', typeId: ' + typeId + ', readonly: ' + readonly);
                
                if (!(readonly) && ttg.isNotDoubleClick()) {
                
                    if(type == 'deletetask') {
    
                        var taskid = typeId;
                        deleteTask(taskid);
                        
                    } else if(type == 'deleteobjective') {
    
                        var objectiveid = typeId;
                        deleteObjective(objectiveid);
                    
                    } else {
                    
                        if(canOpenCreatEditDialog()) {
                        
                            //showAjaxSpinner(true);
                        
                            startedDisplayCreateEditDialog();
                
                            if(type == 'addtask') {
                                showAjaxSpinner(true);
                                var objectiveid = typeId;
                                showTaskCreateEditDialog(objectiveid, null);
                            
                            } else if(type == 'edittask') {
								var taskid = typeId;
								var task = getTask(taskid);
								var objectiveid = task.WhatId;
								showTaskCreateEditDialog(objectiveid, task);
				
							} else if(type == 'addobjective') {
								showAjaxSpinner(true);			
								showObjectiveCreateEditDialog(null);
							
							} else if(type == 'editobjective') {
								var objectiveid = typeId;
								var objective = getObjective(objectiveid);
								showObjectiveCreateEditDialog(objective);
							
							}
						}	
					}	
				}
			}
		}
		
		function canOpenCreatEditDialog() {
			return !(isCreateEditDialogInProgress);
		}
		
		function startedDisplayCreateEditDialog() {
			isCreateEditDialogInProgress = true; 
		}
		
		function completedDisplayCreateEditDialog() {
			isCreateEditDialogInProgress = false; 
		}
		
		function deleteTask(taskid) {
			//console.log('>> deleteTask() entered, taskid: ' + taskid);
			
			var confirmDialog = jQuery('<div/>', {id: 'confirmDeleteTaskDialog'}).text('Are you sure?');
			confirmDialog.dialog({
				title	: 'Delete {!$Label.resource_PRIME_Action}',
				buttons	: {	
								
								'Yes' 	: function() {
													showAjaxSpinner(true);									
													api.deleteAction(taskid, function() {
											
														deleteTaskSuccess(taskid);
														
													}, 
													function()	{ 
														showAjaxSpinner(false);
													});									
													confirmDialog.dialog('close');
													},
								'No' 	: function() { confirmDialog.dialog('close'); }
						}
			});
		}
		
		function deleteObjective(objectiveid) {
			//console.log('>> deleteObjective() entered, objectiveid: ' + objectiveid);
			
			var hasTasks = function() {
				var taskStats = data.taskstats[objectiveid];
				if(taskStats && (taskStats.opentasks > 0 || taskStats.closedtasks >0)) {
					return true;
				}
				else {
					return false;
				}
          		
			};
			
			if(hasTasks()) {
				var confirmDialog = jQuery('<div/>', {id: 'objectiveHasTaskWarningDialog'}).text('You cannot delete an objective that has tasks');
				confirmDialog.dialog({
					title	: 'Warning',
					buttons	: {	'Ok' 	: function() { confirmDialog.dialog('close'); } }
				});
				return false;
			}
			
			var confirmDialog = jQuery('<div/>', {id: 'confirmDeleteObjectiveDialog'}).text('Are you sure?');
			confirmDialog.dialog({
				title	: 'Delete {!$Label.resource_Objective}',
				buttons	: {	
								
								'Yes' 	: function() {
													showAjaxSpinner(true);									
													api.deleteObjective(objectiveid, function() {
											
													deleteObjectiveSuccess(objectiveid);	
												}, 
											function()	{ 
														showAjaxSpinner(false); });									
														confirmDialog.dialog('close');
													},
								'No' 	: function() { confirmDialog.dialog('close'); }					
							}
			});
		}
		
		function renderTaskDetails(task) {
		
			//console.log('>> renderTaskDetails() entered');
		
			jQuery('#ITEM_DETAILS').html(''); // should instead draw once, and instead clear the details of the selected objective ????
			
			var taskDetailsTemplateHTML = jQuery('#task_details_template2').html();
			
			// format the task's activity date, which is returned by the server in milliseconds		
            var d = null;
            if(task.ActivityDate) {
                var d = new Date(task.ActivityDate);
                d = new Date(d.getTime() + (d.getTimezoneOffset() * 60000));
            }
            var formattedActivityDate = task.ActivityDate ? jQuery.datepicker.formatDate(dateFormat, new Date(d)) : '';
            task.formattedActivityDate = formattedActivityDate;

            var compiledTaskDetailsTemplate = _.template(taskDetailsTemplateHTML, { data : data,
                                                                                    task : task });

            jQuery('#ITEM_DETAILS').html(compiledTaskDetailsTemplate);
            
            // add datepicker for ActivityDate
            var myActivityDate = jQuery('INPUT#task_due_date').attr('size', '11').datepicker( { 
                    dateFormat: dateFormat, 
                    showOn: 'both',
                    buttonImage: "{!URLFOR($Resource.Common, 'images/icon_calendar.png')}",
                    buttonImageOnly: true,
                    disabled: true
                });
            
            // add click handler for edit task
            var editTaskId = '#edittask_' + task.Id + '_';
            //jQuery(editTaskId).click(clickTask);
            jQuery(editTaskId).click(addOrDelete);
            
            // add click handler for delete task
            var deleteTaskId = '#deletetask_' + task.Id + '_';
            jQuery(deleteTaskId).click(addOrDelete);
            
            // add click handler for the expand/collapse details panel button
            jQuery('#expand_collapse_details').click(hideTaskDetails);
            
            // add click handler for the Objective name hyperlink
            var linkObjectiveId = '#objective_' + task.WhatId + '_';
            jQuery(linkObjectiveId).click(itemNameClicked);
            
            expandCollapseDetailsPanel();
            
        }
        
        
        //function renderTasks(ascending, tasksOverdue, tasksThisWeek, tasksThisMonth, tasksNextMonth, tasksNextQuarter, allTasks) {
        function renderTasks(ascending, labelsAndTasks) {
            //console.log('>> renderTasks() entered');
            
            jQuery('#ITEMS').html('');
            jQuery('#ITEM_DETAILS').html('');
            jQuery('#TIMELINE').html('');
            
            var tasksTemplateHTML = jQuery('#tasks_template').html();
            
            var configs = getConfigs2(ascending, labelsAndTasks);
            
            // update the task status counts
            var maxTotal = updateStatusCounts(configs);
            
            var selectedRowId = getSelectedRowId('task');
                        
            var compiledTasksTemplate = _.template(tasksTemplateHTML, { configs : configs , sortConfig: sortConfig, maxTotal : maxTotal, selectedRowId : selectedRowId } );

            jQuery('#ITEMS').html(compiledTasksTemplate);
            
            // add click handlers for the task header row expand / collapse icons
            for (var i = 0; i < configs.length; i++) {
                var config = configs[i];
                var toggleId = '#toggle_' + config.id;
                jQuery(toggleId).click(toggle);
                
                var tasksThisPeriod = config.tasksThisPeriod;
                var id = config.id;
                
                // add click handlers for each task
                for (var j = 0; j < tasksThisPeriod.length; j++) {
                    var task = tasksThisPeriod[j];
                    var taskRowId = '#task_' + task.Id + '_' + id;
                    jQuery(taskRowId).click(itemsRowClicked);
                }
            }
            
            // add click handlers for the title bar header expand / collapse icons
            jQuery('#toggle_TasksHeader').click(toggle);
            
            // add click handlers for sorting by column names
            var sortFieldIds = [];
            sortFieldIds.push('#task_objectivesubject_');
            sortFieldIds.push('#task_objectivetype_');
            sortFieldIds.push('#task_owner_');
            sortFieldIds.push('#task_contact_');
            sortFieldIds.push('#task_activitydate_');
            sortFieldIds.push('#task_priority_');
            sortFieldIds.push('#task_status_');
            
            for (var m = 0; m < sortFieldIds.length; m++) {
                var sortFieldId = sortFieldIds[m];
                jQuery(sortFieldId).click(sort);
            }
            
            showDetails('task', selectedRowId);
        }
        
        function showDetails(entityType, selectedRowId) {
            
            if(selectedRowId != null) {
            
                // check the row is visible
                var selector = entityType + '_' + selectedRowId + '_';
                //var selectedRow = jQuery('#' + entityType + '_' + selectedRowId + '_');
                var selectedRow = jQuery('tr[id^=' + selector + ']');
                
                if(selectedRow && (selectedRow.length > 0)) {
                
                    // open the details panel for the selected task or objective
                    if(entityType == 'task') {
                    
                        // check that a task sort is not active
                        if(!(isNonDefaultTasksSortConfigured())) {                  
        
                            var task = getTask(selectedRowId);
                            if(task != null) {
                                renderTaskDetails(task);
                            }
                        }   
                    
                    } else if(entityType == 'objective') {
                    
                        // check that an objective sort is not active
                        if(!(isObjectivesSortConfigured())) {                   
        
                            var objective = getObjective(selectedRowId);
                            if(objective != null) {
                                objectiveClicked(objective);
                            }
                        }   
                    }
                }   
            }
        }
        
        function getSelectedRowId(entityType) {
        
            var selectedRowId = null;
            
            var id = jQuery.cookies.get('AMPO_SELECTED_ROW');
            if(id && (id.length > 0)) {
            
                var index0 = id.indexOf('_');
                var index1 = id.lastIndexOf('_');
            
                if((index0 > -1) && (index1 > -1)) {
            
                    var type = id.substring(0, index0);
                    var typeId = id.substring(index0 + 1, index1);
                    
                    if(type == entityType) {
                    
                        selectedRowId = typeId;
                            
                    }
                }
            }
            
            return selectedRowId;
        }
        
        
        function convertLabelToIdSuffix(label) {
            return label.replace(/ /g, '');
        }
        
        function getConfigs2(ascending, labelsAndTasks) {
        
            //var configs = [];
            
            for(var i=0; i < labelsAndTasks.length; i++) {
            
                var current = labelsAndTasks[i];
                var label = current.label;
                //var tasks = current.tasks;
                var idsuffix = convertLabelToIdSuffix(label);
                current.id = idsuffix; 
                /*
                var myConfig = {
                    id              :   idsuffix,
                    label           :   label,
                    tasksThisPeriod :   tasks
                };
                
                configs.push(myConfig);
                */ 
            }
            
            return ( !(ascending) ? labelsAndTasks.reverse() : labelsAndTasks);
        }
        
        
        function getConfigs(ascending, tasksOverdue, tasksThisWeek, tasksThisMonth, tasksNextMonth, tasksNextQuarter, tasksFirstQuarterOfNextYear, allTasks) {
            
            var configs = [];
            
            if(tasksOverdue) {
                var tasksConfigOverdue = {
                    id              :   convertLabelToIdSuffix('Overdue'),
                    label           :   'Overdue',
                    tasksThisPeriod :   tasksOverdue
                };
                
                configs.push(tasksConfigOverdue);
            }
            
            
            var tasksConfigThisWeek = {
                id              :   convertLabelToIdSuffix('This Week'),
                label           :   'This Week',
                tasksThisPeriod :   tasksThisWeek
            };
            configs.push(tasksConfigThisWeek);
            
            var tasksConfigThisMonth = {
                id              :   convertLabelToIdSuffix('This Month'),
                label           :   'This Month',
                tasksThisPeriod :   tasksThisMonth
            };
            
            configs.push(tasksConfigThisMonth);
            
            var tasksConfigNextMonth = {
                id              :   convertLabelToIdSuffix('Next Month'),
                label           :   'Next Month',
                tasksThisPeriod :   tasksNextMonth
            };
            
            configs.push(tasksConfigNextMonth);
            
            var tasksConfigLastQuarter = {
                id              :   convertLabelToIdSuffix('Q4 13'),
                label           :   'Q4 13',                // FIXME - replace hard-coded 'Q4 13'
                tasksThisPeriod :   tasksNextQuarter
            };
            
            configs.push(tasksConfigLastQuarter);
            
            if(tasksFirstQuarterOfNextYear) {
                var tasksConfigFirstQuarterOfNextYear = {
                    id              :   convertLabelToIdSuffix('Q1 14'),
                    label           :   'Q1 14',                            // FIXME - replace hard-coded year i.e. '14' (meaning the year 2014)
                    tasksThisPeriod :   tasksFirstQuarterOfNextYear
                };
                
                configs.push(tasksConfigFirstQuarterOfNextYear);
            }
            
            if(allTasks) {
                var tasksConfigAllTasks = {
                    id              :   'allTasks',
                    label           :   'All',
                    tasksThisPeriod :   allTasks
                };
                
                configs.push(tasksConfigAllTasks);
            }
            
            return ( !(ascending) ? configs.reverse() : configs);
        }
        
        function renderTimeline(objectives, tasksThisWeek, tasksThisMonth, tasksNextMonth, tasksLastQuarter, tasksFirstQuarterOfNextYear) {
            //console.log('>> renderTimeline() entered');
            
            jQuery('#ITEMS').html('');
            jQuery('#ITEM_DETAILS').html('');
            //jQuery('#ITEMS_PLUS_DETAILS').css({'border':'none'});  // FIXME
            jQuery('#TIMELINE').html('');   
            
            var timelineTemplateHTML = jQuery('#timeline_template').html();
            
            var tasksOverdue = null;    // FIXME
            var allTasks = null;    // FIXME
            
            var configs = getConfigs(true, tasksOverdue, tasksThisWeek, tasksThisMonth, tasksNextMonth, tasksLastQuarter, tasksFirstQuarterOfNextYear, allTasks);
                        
            var compiledTimelineTemplate = _.template(timelineTemplateHTML, { objectives : objectives, configs : configs } );

            jQuery('#TIMELINE').html(compiledTimelineTemplate);
            
            // no click handlers
        }
        
        function deleteObjectiveSuccess(objectiveid) {
            //console.log('>> deleteObjectiveSuccess() entered, objectiveid: ' + objectiveid);
            
            // delete the selected objective from the global 'data' store
            var objectives = data.planobjectives.planobjective;
            var newObjectives = [];
            
            for(var i=0; i < objectives.length; i++) {
                var objective = objectives[i];
                
                if(objective.id != objectiveid) {
                    newObjectives.push(objective);
                }
            }
            
            data.planobjectives.planobjective = newObjectives;
            
            jQuery.cookies.set('AMPO_SELECTED_ROW', null);
            
            // re-display the objectives/actions list
            displayView(false);
            
            showAjaxSpinner(false); 
        }
        
        /*
        function upsertObjectiveSuccess(objectiveData) {
            //console.log('>> upsertObjectiveSuccess() entered');
            
            clearSelectedTab();     // cancel showing the actions list, instead show the details tab by default, when objective updated or added
            
            var accountunit="{!JSENCODE($CurrentPage.parameters.account)}";
            if(! accountunit) {
                accountunit = null;
            }
            getPlanObjectivesAndRefreshDisplayItemsOnly(accountunit);
            
            showAjaxSpinner(false);
        }
        */
        
        function insertObjectiveSuccess(objective) {
            //console.log('>> insertObjectiveSuccess() entered);
            
            // add the new objective to the global 'data' store
            if(objective && objective.id) {
                data.planobjectives.planobjective.push(objective);
                
                // create an entry in the data taskStats, for the newly created objective
                var taskStats = {   closedTasksCount    :   0,
                                    openTasksCount      :   0
                                };
                data.taskstats[objective.id] = taskStats;               
            }
            // re-display the objectives/actions list
            displayView(false);
            
            showAjaxSpinner(false); 
        }
        
        function updateObjectiveSuccess(objective) {
            //console.log('>> updateObjectiveSuccess() entered);
            
            // replace the details of the updated objective
            if(objective && objective.id) {
                
                var objectiveToBeUpdated = getObjective(objective.id);
                if(objectiveToBeUpdated != null) {
                
                    objectiveToBeUpdated.subject = objective.subject;
                    
                    if(objective.owner) {
                        objectiveToBeUpdated.owner = {
                            id : objective.owner.id,
                            name :  objective.owner.name
                        };
                    }
                    objectiveToBeUpdated.duedate = objective.duedate;
                    objectiveToBeUpdated.status = objective.status;
                    objectiveToBeUpdated.priority = objective.priority;
                    
                    if(objective.planunit) {
                        objectiveToBeUpdated.planunit = {
                            id      :   objective.planunit.id,
                            name    :   objective.planunit.name
                        };
                    }
                    objectiveToBeUpdated.type = objective.type;
                    objectiveToBeUpdated.strategy = objective.strategy;
                    objectiveToBeUpdated.overdue = objective.overdue;
                    objectiveToBeUpdated.completed = objective.completed;
                    objectiveToBeUpdated.comments = objective.comments;
                    objectiveToBeUpdated.metric = objective.metric;
                    objectiveToBeUpdated.tasks = objective.tasks;
                
                }
            }
            // re-display the objectives/actions list
            displayView(false);
            
            showAjaxSpinner(false); 
        }
        
        /*
        function upsertTaskSuccess(taskData) {
            //console.log('>> upsertTaskSuccess() entered');
            
            var accountunit="{!JSENCODE($CurrentPage.parameters.account)}";
            if(! accountunit) {
                accountunit = null;
            }
            getPlanObjectivesAndRefreshDisplayItemsOnly(accountunit);
            showAjaxSpinner(false);
        }
        */
        
        function updateTaskSuccess(updatedTask) {
        
            //console.log('>> updateTaskSuccess() entered');
        
            var taskToBeUpdated = getTask(updatedTask.Id);
            if(taskToBeUpdated != null) {
            
                taskToBeUpdated.IsClosed = updatedTask.IsClosed;
        
                taskToBeUpdated.ActivityDate = updatedTask.ActivityDate;
                taskToBeUpdated.Description = updatedTask.Description;
                //taskToBeUpdated.Id = updatedTask.Id;
                
                taskToBeUpdated.Owner = null;
                if(updatedTask.Owner) {
                    taskToBeUpdated.Owner = { Name: updatedTask.Owner.Name,
                                                Id: updatedTask.Owner.Id
                                            };
                }
                
                taskToBeUpdated.OwnerId = updatedTask.OwnerId;
                taskToBeUpdated.Priority = updatedTask.Priority;
                taskToBeUpdated.Status = updatedTask.Status;
                taskToBeUpdated.Subject = updatedTask.Subject;
                
                taskToBeUpdated.Who  = null;
                if(updatedTask.Who) {
                    taskToBeUpdated.Who = { Name: updatedTask.Who.Name,
                                            Id: updatedTask.Who.Id
                                        };
                }
                
                taskToBeUpdated.WhoId = updatedTask.WhoId;
                taskToBeUpdated.WhatId = updatedTask.WhatId;
                
                // recalc task.overdue
                var tasksModel = ttg.tasksModel({ model : null});
                var today = new Date();
                
                taskToBeUpdated.overdue = tasksModel.isTaskOverdue(today, taskToBeUpdated); 
                        
                // recalc objective.taskStats
                var objectiveid = taskToBeUpdated.WhatId;
                var objective = getObjective(objectiveid);
                
                if(objective) {
                    var tasks = objective.tasks || [];
                    
                    var closedTasksCount = 0;
                    var openTasksCount = 0;
                
                    for(var j=0; j < tasks.length; j++) {
                    
                        var task = tasks[j];
                            
                        if(task.IsClosed) {
                            closedTasksCount++;
                        } else {
                            openTasksCount++;   
                        }
                    }
                    
                    var taskStats = data.taskstats[objective.id];
                    if(taskStats) {
                        taskStats.closedtasks = closedTasksCount;
                        taskStats.opentasks = openTasksCount;
                    }
                }       
            }
            
            // get Task owners
            // sort the owners list by name
            var configData = {
                            ascending : true, 
                            fieldname : 'name'
                        };
        
            var ownersSortUtil = ttg.ownersSortUtil(configData);            
            var tasksModel = ttg.tasksModel({ model : data.planobjectives.planobjective});
            var taskOwners = tasksModel.getTaskOwners(data.owners.owner);
            data.taskOwners = ownersSortUtil.sort(taskOwners);
        
            displayView(true);
            
            showAjaxSpinner(false);

        }
        
        
        function insertTaskSuccess(insertedTask) {
        
            //console.log('>> insertTaskSuccess() entered');
        
            if(insertedTask) {
        
                // recalc task.overdue
                var tasksModel = ttg.tasksModel({ model : null});
                var today = new Date();
                
                insertedTask.overdue = tasksModel.isTaskOverdue(today, insertedTask); 
                        
                // recalc objective.taskStats
                var objectiveid = insertedTask.WhatId;
                var objective = getObjective(objectiveid);
                
                if(objective) {
                    var tasks = objective.tasks || [];
                    
                    tasks.push(insertedTask);
                    
                    var closedTasksCount = 0;
                    var openTasksCount = 0;
                
                    for(var j=0; j < tasks.length; j++) {
                    
                        var task = tasks[j];
                            
                        if(task.IsClosed) {
                            closedTasksCount++;
                        } else {
                            openTasksCount++;   
                        }
                    }
                    
                    var taskStats = data.taskstats[objective.id];
                    if(taskStats) {
                        taskStats.closedtasks = closedTasksCount;
                        taskStats.opentasks = openTasksCount;
                    }
                }       
            }
            
            // get Task owners
            // sort the owners list by name
            var configData = {
                            ascending : true, 
                            fieldname : 'name'
                        };
        
            var ownersSortUtil = ttg.ownersSortUtil(configData);            
            var tasksModel = ttg.tasksModel({ model : data.planobjectives.planobjective});
            var taskOwners = tasksModel.getTaskOwners(data.owners.owner);
            data.taskOwners = ownersSortUtil.sort(taskOwners);
        
            displayView(true);
            
            showAjaxSpinner(false);

        }
        
        
        function deleteTaskSuccess(taskid) {
            //console.log('>> deleteTaskSuccess() entered, taskid: ' + taskid);
            
            // delete the selected task from the global 'data' store
            var objectives = data.planobjectives.planobjective;
            var found = false;
            
            for(var i=0; ((i < objectives.length) && (found == false)); i++) {
            
                var objective = objectives[i];
                var tasks = objective.tasks;
                var newTasks = [];
                
                var closedTasksCount = 0;
                var openTasksCount = 0;
            
                for(var j=0; j < tasks.length; j++) {
                
                    var task = tasks[j];
                        
                    if(taskid != task.Id) {
                        newTasks.push(task);
                        if(task.IsClosed) {
                            closedTasksCount++;
                        } else {
                            openTasksCount++;   
                        }
                    } else {
                        found = true;
                    }
                }
                objective.tasks = newTasks;
                
                var taskStats = data.taskstats[objective.id];
                taskStats.closedtasks = closedTasksCount;
                taskStats.opentasks = openTasksCount;  
            }
            
            // re-display the objectives/actions list
            displayView(false);
            
            showAjaxSpinner(false);
        }
        
        /*
        function updateObjectiveTaskStats(objective) {
            
            var tasks = objective.tasks;
            var newTasks = [];
            
            var closedTasksCount = 0;
            var openTasksCount = 0;
        
            for(var j=0; j < tasks.length; j++) {
            
                var task = tasks[j];
                    
                if(taskid != task.Id) {
                    newTasks.push(task);
                    if(task.IsClosed) {
                        closedTasksCount++;
                    } else {
                        openTasksCount++;   
                    }
                } else {
                    found = true;
                }
            }
            objective.tasks = newTasks;
            
            var taskStats = data.taskstats[objective.id];
            taskStats.closedtasks = closedTasksCount;
            taskStats.opentasks = openTasksCount;
        }
        */
        
        // see: showContactCreateDialog() in display_graph.js
        function showTaskCreateEditDialog(objectiveid, task) {
            var createSpec = {
                    orderedFields:   [/*'Id', */'Subject', 'Description', /*'WhatId',*/ 'WhoId', 'Who.Name', 'ActivityDate', 'OwnerId', 'Owner.Name', 'Priority', 'Status'],
                    //dateFormat: dateFormat
                    dateFormat: '{!jQueryUIDateFormat}',                    
                    ttgApi: ttgApi,
                    postProcessMetadata: function(mydata) {
                        jQuery.each(mydata.metadata.fields, function(key, value) {
                            
                            switch(value.name) {
                                case 'Id':
                                    value.dmEditDisplay = false;
                                    break;
                            
                                case 'Subject':
                                    value.dmEditDisplay = true;
                                    value.isNillable = false;
                                    value.dmValidation = 
                                        function() {
                                            var errMsg = null;
                                            //throw an exception if no subject has been entered
                                            var dlg = metadata.getDialog();
                                            var ctrl = dlg.find('#Subject');
                                            var subject = ctrl.val(); 
                                            if((subject == null) || (subject.trim().length == 0)) {
                                                errMsg = 'Please enter a Subject';
                                            }
                                            return errMsg;
                                        };
                                break;
                                
                                case 'ActivityDate':
                                    
                                    // change display label to remove ' Only' due to space reasons
                                    var myLabel = value.label;
                                    var myLabelIndex = myLabel.indexOf(' Only');
                                    if(myLabelIndex > -1) {
                                        myLabel = myLabel.substring(0, myLabelIndex);
                                    }
                                    value.label = myLabel;
                                    
                                    value.dmEditDisplay = true;
                                    
                                    value.dmValidation = 
                                        function() {
                                            var errMsg = null;
                                            //throw an exception if no subject has been entered
                                            var dlg = metadata.getDialog();
                                            var ctrl = dlg.find('#ActivityDate');
                                            var subject = ctrl.val(); 
                                            if((subject == null) || (subject.trim().length == 0)) {
                                                errMsg = 'Please enter a Date';
                                            }
                                            return errMsg;
                                        };
                                    
                                break;
                                
                                case 'WhoId':
                                    
                                    // change display label to remove ' ID' due to space reasons
                                    var myLabel = value.label;
                                    var myLabelIndex = myLabel.indexOf(' ID');
                                    if(myLabelIndex > -1) {
                                        myLabel = myLabel.substring(0, myLabelIndex);
                                        
                                        // Remove '/Lead' from 'Contact/Lead' label
                                        myLabelIndex = myLabel.indexOf('/');
                                        if(myLabelIndex > -1) {
                                            myLabel = myLabel.substring(0, myLabelIndex);
                                        }
                                    }
                                    value.label = myLabel;
                                    
                                    value.dmEditDisplay = true;
                                    value.dmValidation = 
                                        function() {
                                            var errMsg = null;
                                            //throw an exception if no subject has been entered
                                            var dlg = metadata.getDialog();
                                            var ctrl = dlg.find('#WhoId :input[type="hidden"]');
                                            var subject = ctrl.val(); 
                                    
                                            var inpCtrlVal = dlg.find('#WhoId :input[type="text"]').val();

                                            if((subject == null) || (subject.length == 0) && inpCtrlVal) {
                                                errMsg = 'You have not selected a contact matching ' + inpCtrlVal;
                                            }
                                            return errMsg;
                                        };
                                break;
                                
                                
                                case 'OwnerId':
                                    // change display label to 'Owner'
                                    var myLabel = value.label;
                                    var myLabelIndex = myLabel.indexOf('Assigned To ID');
                                    if(myLabelIndex > -1) {
                                        myLabel = 'Owner';
                                    }
                                    value.label = myLabel;
                                    
                                    value.dmEditDisplay = true;
                                    
                                    value.dmValidation = 
                                        function() {
                                            var errMsg = null;
                                            //throw an exception if no subject has been entered
                                            var dlg = metadata.getDialog();
                                            var ctrl = dlg.find('#OwnerId :input[type="hidden"]');
                                            var subject = ctrl.val(); 
                                            if((subject == null) || (subject.trim().length == 0)) {
                                                errMsg = 'Please enter an Owner';
                                            }
                                            return errMsg;
                                        };
                                        
                                break;
                                    
                                case 'Status':
                                case 'Priority':
                                    value.dmEditDisplay = true;
                                break;
                                
                                case 'Description':
                                
                                    // change display label from 'Description' to 'Comments'
                                    var myLabel = value.label;
                                    var myLabelIndex = myLabel.indexOf('Description');
                                    if(myLabelIndex > -1) {
                                        myLabel = 'Comments';
                                    }
                                    value.label = myLabel;
                                
                                    value.dmEditDisplay = true;
                                break;
                                /*
                                case 'WhatId':
                                case 'IsClosed':
                                case 'IsVisibleInSelfService':
                                case 'RecurrenceDayOfWeekMask':
                                case 'Type':
                                case 'IsArchived':
                                case 'CreatedById':
                                case 'LastModifiedDate':
                                case 'IsReminderSet':
                                case 'Id':
                                case 'IsDeleted':
                                case 'CallObject':
                                case 'RecurrenceStartDateOnly':
                                case 'RecurrenceInterval':
                                case 'SystemModstamp':
                                case 'AccountId':
                                case 'CallDurationInSeconds':
                                case 'ReminderDateTime':
                                case 'RecurrenceTimeZoneSidKey':
                                case 'DMAPP__ThirdPartyName__c':
                                case 'CallType':
                                case 'RecurrenceActivityId':
                                case 'RecurrenceEndDateOnly':
                                case 'CreatedDate':
                                case 'CallDisposition':
                                case 'RecurrenceMonthOfYear':
                                case 'RecurrenceType':
                                case 'DMAPP__TTG_Prime_Action_Type__c':
                                case 'RecurrenceInstance':
                                case 'IsRecurrence':
                                case 'DMAPP__ThirdPartyId__c':
                                case 'LastModifiedById':
                                case 'RecurrenceDayOfMonth':
                                                                    
                                    value.dmEditDisplay = false;
                                break;
                                */

                                case 'DMAPP__TTG_Prime_Action_Type__c':
                                    value.dmEditDisplay = false;
                                break;
                                
								case 'Division':
                                    value.dmEditDisplay = false;
                                break;                             
                                
                                default:
                                    //console.log('>> in showTaskCreateEditDialog(), switch statement hit <default> for value.name: ' + value.name); 
                                    value.dmEditDisplay = true;
                                break;
                                
                                
                            }   
                        }
                        );

                    },
                    postDisplay: function(dlg, mydata) {
                        showAjaxSpinner(false);
                        completedDisplayCreateEditDialog();
                    },
                    preSave: function(that, spec) {
                        
                        showAjaxSpinner(true);
                        
                        var fields = spec.fields;
                        fields['WhatId'] = objectiveid;
                        
                        var activityDate = jQuery('#ActivityDate').datepicker('getDate');
                        //console.log('>> got activity date: ' + activityDate);
                        
                        // reformat as: yy-mm-dd formate - ISO-8601
                        var formattedActivityDate = activityDate ? jQuery.datepicker.formatDate('yy-mm-dd', activityDate) : '';
                        //console.log('>> formattedActivityDate: ' + formattedActivityDate);
                        
                        fields['ActivityDate'] = formattedActivityDate;
                        
                    },
                    createButtonTitle: 'Save'
                };
                
                
                jQuery.extend(createSpec, {
                    postSave: function(a, b, c) {
                        var fields = ['Subject', /*'WhatId',*/ 'OwnerId', 'Owner.Name', 'WhoId', 'Who.Name', 'ActivityDate', 'Status', 'Priority', 'Description'];
                        jQuery.each(metadata.getMetadata().fields, function(key, value) {
                                switch(value.name) {
                                case 'Subject':
                                case 'OwnerId':
                                case 'WhoId':
                                case 'ActivityDate':
                                case 'Status':
                                case 'Priority':
                                case 'Description':
                                    return;
                                    break;
                                
                                case 'WhatId':
                                
                                }
                                
                            }
                        );
                                            
                        ttgApi.getObject(
                            { entity: 'Task', id: a.id, fields: fields }, 
                            function(d) {
                                if(d && d.records && d.totalSize > 0) {
                                    
                                    var upsertedTask = d.records[0];
                                    
                                    upsertedTask.WhatId = objectiveid;
                                    upsertedTask.IsClosed = false;
                                    if(upsertedTask.Status == 'Completed') {        // FIXME
                                        upsertedTask.IsClosed = true;
                                    }
                                                                        
                                    if(task && task.Id) {
                                        updateTaskSuccess(upsertedTask);
                                    } else {
                                        insertTaskSuccess(upsertedTask);
                                    }
                                    
                                }
                            },
                            function() { /* Error */ }, 
                            function() { 
                                            /* Complete */
                                            
                                            
                                            //var isUpdate = (task && task.Id);
                                            //if(!(isUpdate)) {
                                                /*
                                                upsertTaskSuccess(null);
                                                */
                                            //} 
                                            
                                        } 
                        );
                        
                    },
                    preDisplay: function(dlg, mydata) {

                        // if in Edit mode
                        if(task && task.Id) {
                            
                            dlg.find('#Subject').val(task.Subject);
                            //dlg.find('#ActivityDate').val(task.ActivityDate);     
                            dlg.find('#WhoId').val(task.WhoId);
                            dlg.find('#OwnerId').val(task.OwnerId);
                            dlg.find('#Status').val(task.Status);
                            dlg.find('#Priority').val(task.Priority);
                            dlg.find('#Description').val(task.Description);
                            dlg.find('#WhatId').val(task.WhatId);
                            
                        }
                        var crudTable = dlg.find('table.CRUD');
                        var sendMailRow = jQuery('<tr/>').append(jQuery('<td/>').addClass('LABEL').text('Email notification')).append(jQuery('<td/>'));
                        sendMailRow.append(jQuery('<td/>').append(jQuery('<input/>', {type:'checkbox', id:"sendMailNotification"})));
                        crudTable.append(sendMailRow);                           
                    },
                    title: ((task && task.Id) ? 'Edit Action' : 'Create New Action')
                });
            
            var metadata = ttg.metadata(createSpec);
                
            if(task && task.Id) {
                metadata.edit('Task', task.Id);
            } else {
                metadata.create('Task');
            }
                
        }
        
        // see: showContactCreateDialog() in display_graph.js
        function showObjectiveCreateEditDialog(objective) {
        
            var createSpec = {
                    orderedFields:   [ttg.vfp+'Type__c', ttg.vfp+'Plan_Unit__c', ttg.vfp+'Subject__c', ttg.vfp+'Metric__c', ttg.vfp+'Due_Date__c', ttg.vfp+'Objective_Description__c', ttg.vfp+'Strategy__c', ttg.vfp+'Status__c', ttg.vfp+'Owner__c', ttg.vfp+'Priority__c' ],
                    dateFormat: '{!jQueryUIDateFormat}',                    
                    ttgApi: ttgApi,
                    postProcessMetadata: function(mydata) {
                        jQuery.each(mydata.metadata.fields, function(key, value) {
                            
                            switch(value.name) {
                                case ttg.vfp+'Subject__c':
                                    value.label = 'Objective';
                                    value.dmEditDisplay = true;
                                    value.isNillable = false;
                                    value.dmValidation = 
                                        function() {
                                            var errMsg = null;
                                            //throw an exception if no subject has been entered
                                            var dlg = metadata.getDialog();
                                            var ctrl = dlg.find('#' + ttg.vfp + 'Subject__c');
                                            var subject = ctrl.val(); 
                                            if((subject == null) || (subject.trim().length == 0)) {
                                                errMsg = 'Please enter an Objective';
                                            } /*else if(subject.length > 60) {
                                                
                                                //subject = subject.substring(0,60);
                                                //ctrl.val(subject);
                                                //objective.subject = subject;
                                                
                                                errMsg = 'Please enter a Subject (max 60 chars)';
                                            }*/
                                            return errMsg;
                                        };
                                break;      
                                                
                                case ttg.vfp+'Status__c':
                                    /*
                                    if(value.picklistValues == null) {
                                        var picklistValues = [];
                                        
                                        for (var i = 0; i < data.statuses.length; i++) {
                                            var status = data.statuses[i];
                        
                                            var picklistValue = {
                                                isActive    :   true,
                                                label       :   status.label,
                                                value       :   status.value        
                                            };
                                            picklistValues.push(picklistValue); 
                                        }
                                        value.picklistValues = picklistValues; 

                                    }
                                    */
                                    value.dmEditDisplay = true;
                                    value.isNillable = false;
                                    value.dmValidation = 
                                        function() {
                                            var errMsg = null;
                                            //throw an exception if no subject has been entered
                                            var dlg = metadata.getDialog();
                                            var ctrl = dlg.find('#' + ttg.vfp + 'Status__c');
                                            var status = ctrl.val(); 
                                            if((status == null) || (status.trim().length == 0)) {
                                                errMsg = 'Please enter a Status';
                                            }
                                            return errMsg;
                                        };
                                        
                                    break;
                                
                                case ttg.vfp+'Priority__c':
                                    /*
                                    if(value.picklistValues == null) {
                                        var picklistValues = [];
                                        
                                        for (var i = 0; i < data.priorities.length; i++) {
                                            var priority = data.priorities[i];
                        
                                            var picklistValue = {
                                                isActive    :   true,
                                                label       :   priority.label,
                                                value       :   priority.value      
                                            };
                                            picklistValues.push(picklistValue); 
                                        }
                                        value.picklistValues = picklistValues; 
                                        
                                    }
                                    */
                                    value.dmEditDisplay = true;
                                    value.isNillable = false;
                                    value.dmValidation = 
                                        function() {
                                            var errMsg = null;
                                            //throw an exception if no subject has been entered
                                            var dlg = metadata.getDialog();
                                            var ctrl = dlg.find('#' + ttg.vfp + 'Priority__c');
                                            var priority = ctrl.val(); 
                                            if((priority == null) || (priority.trim().length == 0)) {
                                                errMsg = 'Please enter a Priority';
                                            }
                                            return errMsg;
                                        };
                                    break;
                                
                                case ttg.vfp+'Type__c':
                                    /*
                                    if(value.picklistValues == null) {
                                        var picklistValues = [];
                                        
                                        for (var i = 0; i < data.types.length; i++) {
                                            var type = data.types[i];
                        
                                            var picklistValue = {
                                                isActive    :   true,
                                                label       :   type.label,
                                                value       :   type.value      
                                            };
                                            picklistValues.push(picklistValue); 
                                        }
                                        value.picklistValues = picklistValues; 
                                        
                                    }
                                    */
                                    value.dmEditDisplay = true;
                                    value.isNillable = false;
                                    value.dmValidation = 
                                        function() {
                                            var errMsg = null;
                                            //throw an exception if no subject has been entered
                                            var dlg = metadata.getDialog();
                                            var ctrl = dlg.find('#' + ttg.vfp + 'Type__c');
                                            var myType = ctrl.val(); 
                                            if((myType == null) || (myType.trim().length == 0)) {
                                                errMsg = 'Please enter a Type';
                                            }
                                            return errMsg;
                                        };
                                    break;
                                
                                case ttg.vfp+'Plan_Unit__c':
                                    value.dmEditDisplay = true;
                                    /*
                                    value.dmValidation = 
                                        function() {
                                            var errMsg = null;
                                            //throw an exception if no subject has been entered
                                            var dlg = metadata.getDialog();
                                            var ctrl = dlg.find('#' + ttg.vfp + 'Plan_Unit__c :input[type="hidden"]');
                                            var subject = ctrl.val(); 
                                            if((subject == null) || (subject.length == 0)) {
                                                errMsg = 'Please enter a Plan Unit';
                                            }
                                            return errMsg;
                                        };
                                    */  
                                    
                                    break;
                                case ttg.vfp+'Owner__c':
                                    value.dmEditDisplay = true;
                                    value.isNillable = false;
                                    value.dmValidation = 
                                        function() {
                                            var errMsg = null;
                                            //throw an exception if no subject has been entered
                                            var dlg = metadata.getDialog();
                                            var ctrl = dlg.find('#' + ttg.vfp + 'Owner__c :input[type="hidden"]');
                                            var owner = ctrl.val(); 
                                            if((owner == null) || (owner.trim().length == 0)) {
                                                errMsg = 'Please enter an Owner';
                                            }
                                            return errMsg;
                                        };
                                        
                                    break;
                                case ttg.vfp+'Due_Date__c':
                                    value.dmEditDisplay = true;
                                    value.isNillable = false;
                                    value.dmValidation = 
                                        function() {
                                            var errMsg = null;
                                            var dlg = metadata.getDialog();
                                            var ctrl = dlg.find('#' + ttg.vfp + 'Due_Date__c');
                                            var duedate = ctrl.val();
                                            //console.log('>> got Due Date: ' + duedate);
                                            if((duedate == null) || (duedate.trim().length == 0)) {
                                                errMsg = 'Please enter a Due Date';
                                            }
                                            
                                            return errMsg;
                                        };
                                    break;
                                case ttg.vfp+'Strategy__c':
                                    value.dmEditDisplay = true;
                                    /*
                                    value.isNillable = false;
                                    value.dmValidation = 
                                        function() {
                                            var errMsg = null;
                                            //throw an exception if no subject has been entered
                                            var dlg = metadata.getDialog();
                                            var ctrl = dlg.find('#' + ttg.vfp + 'Strategy__c');
                                            var strategy = ctrl.val(); 
                                            if((strategy == null) || (strategy.length == 0)) {
                                                errMsg = 'Please enter a Strategy';
                                            }
                                            return errMsg;
                                        };
                                    */  
                                    break;
                                case ttg.vfp+'Objective_Description__c':
                                    value.dmEditDisplay = true;
                                    /*
                                    value.isNillable = false;
                                    value.dmValidation = 
                                        function() {
                                            var errMsg = null;
                                            //throw an exception if no subject has been entered
                                            var dlg = metadata.getDialog();
                                            var ctrl = dlg.find('#' + ttg.vfp + 'Objective_Description__c');
                                            var comment = ctrl.val(); 
                                            if((comment == null) || (comment.length == 0)) {
                                                errMsg = 'Please enter Relevance';
                                            }
                                            return errMsg;
                                        };
                                    */  
                                    value.label = 'Relevance';  
                                break;
                                
                                case ttg.vfp+'Metric__c':
                                    value.dmEditDisplay = true;
                                    value.isNillable = false;
                                    value.dmValidation = 
                                        function() {
                                            var errMsg = null;
                                            //throw an exception if no subject has been entered
                                            var dlg = metadata.getDialog();
                                            var ctrl = dlg.find('#' + ttg.vfp + 'Metric__c');
                                            var comment = ctrl.val(); 
                                            if((comment == null) || (comment.trim().length == 0)) {
                                                errMsg = 'Please enter Metric';
                                            }
                                            return errMsg;
                                        };  
                                break;
                                
                                default:
                                    value.dmEditDisplay = false;
                                break;
                                
                            }   
                        }
                        );

					},
	                postDisplay: function(dlg, data) {
						/*
						if(objective.duedate) {
							
							//console.log('>> objective.duedate: ' + objective.duedate);
							var dueDateAsDate = new Date(objective.duedate);
							jQuery('#' + ttg.vfp + 'Due_Date__c').datepicker('setDate', dueDateAsDate);
							//var duedate = jQuery.datepicker.formatDate('dd/mm/yyyy', dueDateAsDate);
							//console.log('>> duedate: ' + duedate);
							
							//dlg.find('#' + ttg.vfp+'Due_Date__c').val(duedate);
						}
						*/
						showAjaxSpinner(false);
						completedDisplayCreateEditDialog();
	                },
					preSave: function(that, spec) {
					
						showAjaxSpinner(true);
						
						if(objective && objective.id) {
							// do nothing
						} else {				
							var fields = spec.fields;
							var objectivePlanId = '{!accountPlan.Id}';
							fields['Account_Plan__c'] = objectivePlanId;
						}
						
						//var fields = spec.fields;
						//var duedate = fields[ttg.vfp+'Due_Date__c'];
						//console.log('>> in presave(), duedate: ' + duedate);
							
						// parse the Due_Date__c field
						/*
						var dlg = metadata.getDialog();
						var ctrl = dlg.find('#' + ttg.vfp + 'Due_Date__c');
						var duedate = ctrl.val();
						//console.log('>> got Due Date: ' + duedate);
						*/
						
						var duedate = jQuery('#' + ttg.vfp + 'Due_Date__c').datepicker('getDate');
						//console.log('>> got due date: ' + duedate);
						
						//var dueDateAsDate = duedate ? jQuery.datepicker.parseDate('mm/dd/yyyy', duedate) : '';
						//console.log('>> dueDateAsDate: ' + dueDateAsDate);
						
						// reformat as: yy-mm-dd formate - ISO-8601
						var formattedDueDate = duedate ? jQuery.datepicker.formatDate('yy-mm-dd', duedate) : '';
						//console.log('>> formattedDueDate: ' + formattedDueDate);
						
						//var currentDate = jQuery('#' + ttg.vfp + 'Due_Date__c').datepicker('getDate');
						//console.log('>> currentDate: ' + currentDate);
						
						
						var fields = spec.fields;
						fields[ttg.vfp+'Due_Date__c'] = formattedDueDate;
						
						
						// truncate the subject to 80 chars if necessary
						var subject = jQuery('#' + ttg.vfp + 'Subject__c').val();
						if(subject && (subject.length > 80)) {
							subject = subject.substring(0, 80);
							fields[ttg.vfp+'Subject__c'] = subject;
						}
						
						// DMPS-930
						fields['Name'] = subject;
						
					},
	                createButtonTitle: 'Save'
				};
				
				
				jQuery.extend(createSpec, {
					postSave: function(a, b, c) {
						var fields = [ttg.vfp+'Subject__c', ttg.vfp+'Owner__c', ttg.vfp+'Due_Date__c', ttg.vfp+'Status__c', ttg.vfp+'Priority__c', ttg.vfp+'Plan_Unit__c', ttg.vfp+'Type__c', ttg.vfp+'Strategy__c', ttg.vfp+'Objective_Description__c'];
						jQuery.each(metadata.getMetadata().fields, function(key, value) {
								switch(value.name) {
									case ttg.vfp+'Subject__c':
									case ttg.vfp+'Owner__c':
									case ttg.vfp+'Due_Date__c':
									case ttg.vfp+'Status__c':
									case ttg.vfp+'Priority__c':
									case ttg.vfp+'Plan_Unit__c':
									case ttg.vfp+'Type__c':
									case ttg.vfp+'Strategy__c':
									case ttg.vfp+'Objective_Description__c':
										value.dmEditDisplay = true;
									break;
									
									default:
										value.dmEditDisplay = false;
									break;
									
								}
								
							}
						);
					
						ttgApi.getObject(
							{ entity: 'DMAPP__Account_Plan_Objective__c', id: a.id, fields: fields },
							function(d) {
								if(d && d.records && d.totalSize > 0) {
									
									var newId = a.id;
									var cookieString = 'objective_' + newId + '_';
									jQuery.cookies.set('AMPO_SELECTED_ROW', cookieString);
									
									var rec = d.records[0];
					                
					                var myTasks = [];
					                if(objective && objective.id) {
					                	myTasks = objective.tasks;
					                }
					                
					                var myMetric = a[ttg.vfp+'Metric__c'] || '';
					                
					                var upsertedObjective = {
					                	id				:	rec.Id,
					                    subject			:   rec[ttg.vfp+'Subject__c'] || '',
					                    owner  : {
					                        id: 	rec[ttg.vfp+'Owner__c'] || '',
					                        name: 	''
					                    },
					                    duedate			: rec[ttg.vfp+'Due_Date__c'] || '',
					                    status			: rec[ttg.vfp+'Status__c'] || '',
					                    priority		: rec[ttg.vfp+'Priority__c'] || '',
					                    planunit  : {
					                        id: 	rec[ttg.vfp+'Plan_Unit__c'] || '',
					                        name: 	''
					                    },
					                    type			: rec[ttg.vfp+'Type__c'] || '',
					                    strategy		: rec[ttg.vfp+'Strategy__c'] || '',
					                    overdue			: rec[ttg.vfp+'IsOverdue__c'] || '',
					                    completed		: rec[ttg.vfp+'IsCompleted__c'] || '',
					                    comments		: rec[ttg.vfp+'Objective_Description__c'] || '',
					                    metric			: myMetric,
					                    tasks			: myTasks  
									};
									
									if((upsertedObjective.status == 'Completed') || (upsertedObjective.status == 'Cancelled')) {
										upsertedObjective.completed = true;
									}
									
									if(objective && objective.id) {
										updateObjectiveSuccess(upsertedObjective);
									} else {
										insertObjectiveSuccess(upsertedObjective);
									}	
									
								}
							},
							function() { /* Error */ }, 
							function() { 
											/* Complete */
						
											// FIXME - delete this after cleanup
											//if(objective && objective.id) {					
											//	upsertObjectiveSuccess(null); 
											//}
										} 
						);
						
					},
					preDisplay: function(dlg, mydata) {
					
					
						/*
						jQuery.each(mydata.metadata.fields, function(key, value) {
						
							
							switch(value.name) {
							
								case ttg.vfp+'Owner__c':
									//value.label = 'Owner';
									//value.name = value.label;
									value.uselabel = true;
								break;
									
								case ttg.vfp+'Plan_Unit__c':
									//value.label = 'Plan Unit';
									//value.name = value.label;
									value.uselabel = true;
								break;
							}		 
						
						});
						*/	
						// if in Edit mode
						if(objective && objective.id) {
						
							var myOwnerId = '';
							if(objective.owner && objective.owner.id) {
								myOwnerId = objective.owner.id;
							}
							
							var myPlanUnitId = '';
							if(objective.planunit && objective.planunit.id) {
								myPlanUnitId = objective.planunit.id;
							}
							
							dlg.find('#' + ttg.vfp+'Subject__c').val(objective.subject);
							
							dlg.find('#' + ttg.vfp+'Owner__c').val(myOwnerId);
							
							
							if(objective.duedate) {
							
								//console.log('>> objective.duedate: ' + objective.duedate);
								var dueDateAsDate = new Date(objective.duedate);
								//jQuery('#' + ttg.vfp + 'Due_Date__c').datepicker('setDate', dueDateAsDate);
								var duedate = jQuery.datepicker.formatDate('dd/mm/yyyy', dueDateAsDate);
								//console.log('>> duedate: ' + duedate);
								
								dlg.find('#' + ttg.vfp+'Due_Date__c').val(duedate);
							}
							
							
							dlg.find('#' + ttg.vfp+'Status__c').val(objective.status);
							dlg.find('#' + ttg.vfp+'Priority__c').val(objective.priority);
							
							dlg.find('#' + ttg.vfp+'Plan_Unit__c').val(myPlanUnitId);
							
							dlg.find('#' + ttg.vfp+'Type__c').val(objective.type);
							dlg.find('#' + ttg.vfp+'Strategy__c').val(objective.strategy);
							dlg.find('#' + ttg.vfp+'Objective_Description__c').val(objective.comments);
							
						} else {
							
							var ownername = '';
							var found = false;
							
							for(var i=0; ((found == false) && (i < data.owners.owner.length)); i++) {
							
								var owner = data.owners.owner[i];
								if((owner) && (owner.id == userId)) {
									found = true;
									ownername = owner.name;
								}
								
							}
							
							if(found) {
								var ctrl = dlg.find('#' + ttg.vfp + 'Owner__c :input[type="hidden"]');
								ctrl.val(userId);
								
								var ctrl = dlg.find('#' + ttg.vfp + 'Owner__c :input[type="text"]');
								ctrl.val(ownername);
							} 
						}
						
					},
					title: ((objective && objective.id) ? 'Edit {!$Label.resource_Objective}' : 'Create New {!$Label.resource_Objective}')
				});
			
				
			createSpec.restrict =	{'user' : function() {
						
										var ownerids = [];
										for (var i = 0; i < data.owners.owner.length; i++) {
											var owner = data.owners.owner[i];
											ownerids.push('\'' + owner.id + '\'');
										}
										
										if(ownerids.length > 0) {
											var commaSeparatedOwnerIds = ownerids.join();
											return ' and Id in (' + commaSeparatedOwnerIds + ') ';
										} else {
											return ' ';
										}
									}
									
			};
			
			var planUnitAPIName = ttg.vfp.toLowerCase() + 'am_plan_unit__c';
	
			createSpec.restrict[planUnitAPIName] = function() {
						                
										var planunitids = [];
										for (var i = 0; i < data.planunits.planunit.length; i++) {
											var planunit = data.planunits.planunit[i];
											planunitids.push('\'' + planunit.id + '\'');
										}
										
										if(planunitids.length > 0) {
											var commaSeparatedPlanUnitIds = planunitids.join();
											return ' and Id in (' + commaSeparatedPlanUnitIds + ') ';
										} else {
											return ' ';
										}
									};
									
			var metadata = ttg.metadata(createSpec);
			
			if(objective && objective.id) {
				metadata.edit('Account_Plan_Objective__c', objective.id);
			} else {
				metadata.create('Account_Plan_Objective__c');
			}
				
		}
		
		
		
		// spinner functions

            var ajaxSpinnerCnt = 0;
            
            function showAjaxSpinner(show) {
            
                
                if (show) { 
                    ajaxSpinnerCnt++;
                    
                    //console.log('>> showAjaxSpinner(), show: ' + show + ' , ajaxSpinnerCnt: ' + ajaxSpinnerCnt);
                    
                    if (ajaxSpinnerCnt == 1) {
                    
                        var mySpinner = jQuery('<div>').css('position', 'absolute').css('z-index', '2000');
                        
                        jQuery('#SPINNER').append(mySpinner);

                        mySpinner.append(jQuery('<img>').attr('id', 'tas_ajax_spinner').addClass('spinner').attr('src', '{!JSENCODE(URLFOR($Resource.ttgomjs, '/ttg/graph/images/loader.gif'))}'));
                        //mySpinner.css("top", ( jQuery(window).height() - mySpinner.height() ) / 2+jQuery(window).scrollTop() + "px");
                        //mySpinner.css("left", ( jQuery(window).width() - mySpinner.width() ) / 2+jQuery(window).scrollLeft() + "px");
                        mySpinner.css("top", "250px");
                        mySpinner.css("left", "400px");
                    }                   
                } else {
                    ajaxSpinnerCnt--;
                    
                    //console.log('<< showAjaxSpinner(), show: ' + show + ' , ajaxSpinnerCnt: ' + ajaxSpinnerCnt);
                    
                    if (ajaxSpinnerCnt <= 0) {                  
                        jQuery('#SPINNER').html('');
                        ajaxSpinnerCnt = 0;
                    }

                }
            } 
            

            that.getPlanObjectives = getPlanObjectives;
            
            return that;
        })(spec);

        /*
        jQuery(
            function () {
                //check if there any account unit specified...
                var accountunit="{!JSENCODE($CurrentPage.parameters.account)}";
                if(! accountunit) {
                    accountunit = null;
                }
                ttg_planobjectives.getPlanObjectives(accountunit);
            }
        )
        */
    ttg.am = ttg.am || { }
    jQuery(document).ready(function() {
    
            //check if there any account unit specified...
            var accountunit="{!JSENCODE($CurrentPage.parameters.account)}";
            if(! accountunit) {
                accountunit = null;
            }
            ttg_planobjectives.getPlanObjectives(accountunit);
                
            var spec = {
                sessionid : '{!JSENCODE($Api.Session_ID)}',
                userId: '{!$User.id}',
                ttgApi: ttg.apiLayer.sfdcDelegate( { sessionid : '{!JSENCODE($Api.Session_ID)}' } ),
                planname: '{!JSENCODE(accountPlan.Name)}',
                planId: '{!accountPlan.Id}',
                spinnerURL: '{!JSENCODE(URLFOR($Resource.ttgomjs, '/ttg/graph/images/loader.gif'))}',
                calendarURL: "{!URLFOR($Resource.Common, 'images/icon_calendar.png')}",
                title: 'Plan Settings',
                readonly: {!PlanRecordEditable == false},
                candelete: {!Candelete},
                inactive: {!inactive},
                onDelete: function() { top.location.href = '/apex/AccountPlan'; },
                hideScorecard: {!NOT(isLicensedForAccountManagerAndIsScorecardEnabled)},
                useAccountGrouping: {!accountGroupingEnabled},
                fiscalYearStartMonth: {!fiscalYearStartMonth},
                usesStartDateAsFiscalYearName: {!usesStartDateAsFiscalYearName},
				isoCode: '{!JSENCODE(CurrencyISO)}',
				showAutoPostOption: {!showAutoPostOption}      
            };

            var amConfiguration = ttg.am.configuration(spec);
            
            var hasCreateAccess = {!planObjectCreateable};                     

            var specClone = spec;
            specClone['clone'] = true;
            var amConfigurationClone = ttg.am.configuration(specClone);

            var ctrl = jQuery('#TAMADMINLINK').parent();
            jQuery('#TAMADMINLINK').remove();
            
            var a = jQuery('<a href="#" data-dropdown="#dropdown-{!accountPlan.Id}"/>').append(
                                jQuery('<img src="{!URLFOR($Resource.Common, 'images/icon_cog.png')}" alt="Options" title="Options" ttgid="AccountPlanOPTIONSLIST"/>')
                            );
            
            var div = jQuery('<div id="dropdown-{!accountPlan.Id}" class="dropdown dropdown-relative"/>').append(
                                jQuery('<ul class="dropdown-menu"/>').append(
                                    jQuery('<li/>').append(
                                        jQuery('<a href="#"/>').click(amConfiguration.configure).text('Settings')
                                            .attr('ttgid', "AccountPlanOPTIONSSETTINGS")
                                    )
                                ).append(hasCreateAccess ?
                                        jQuery('<li/>').append(
                                            jQuery('<a href="#"/>').click(amConfigurationClone.configure).text('Clone')
                                                .attr('ttgid', "AccountPlanOPTIONSCLONE")
                                        )
                                        :
                                        null
                                )
                            );

            ctrl.append(a);
            ctrl.append(div);

            var fetchapi = ttg.apiLayer.sfdcDelegate( { sessionid : '{!JSENCODE($Api.Session_ID)}', disableContactCreation : {!disableCreationOfContacts} } );
            ttg.fetch.metadata(ttg.vfp + 'AM_Plan_Unit__c', fetchapi);
            ttg.fetch.metadata('User', fetchapi);
            ttg.fetch.metadata('Contact', fetchapi);
            
        }
    ) 
    
	</script>
	<apex:include pageName="DMAPP__OpportunityMapConfiguration" />

</apex:page>
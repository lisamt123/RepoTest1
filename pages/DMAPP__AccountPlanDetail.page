<apex:page standardController="DMAPP__DM_Account_Plan__c" extensions="DMAPP.TAMStandardController" action="{!logAMDetailsUsage}" 
    showHeader="true" 
    sidebar="false" 
    docType="html-5.0"
    tabStyle="Account_Plans__tab"
    >
    <script type="text/javascript">
        var __sfdcSessionId = '{!GETSESSIONID()}';
		var isIE11 = !!navigator.userAgent.match(/Trident.*rv\:11\./);
		var isSafari = navigator.userAgent.indexOf("Safari") > -1;
	</script>
    
    <script src="/soap/ajax/29.0/connection.js" type="text/javascript"></script>

    
    <script type="text/javascript" src="{!$Resource.DMAPP__l10njs}"></script>

    <apex:include pageName="DMAPP__tmpCommoncss" />
    <script type="text/javascript" src="{!URLFOR($Resource.ttgomjs, 'ttg/lib/ttgservice.js')}"></script>
    <apex:include pageName="DMAPP__Debug" />
    <script type="text/javascript" src="{!URLFOR($Resource.ftk, 'forcetk.js')}"></script>
    <script src="{!URLFOR($Resource.OpportunityMapConfiguration)}"></script>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/lib/modernizr.js')}"/> 
    <script type="text/javascript" src="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/lib/jquery-ui-touch-patch.js')}"></script>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/lib/ttgutils.js')}"/>
    
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__TAM, 'js/moment-v2.6.js')}"/>  
    
       
    <script type="text/javascript" src="{!URLFOR($Resource.dvls, 'js/flowplayer-3.2.6.js')}"></script>


    <c:jQuery jQueryUI="true"
    	underscore="true"
        cookies="true"
        tooltip="true"
        validate="true"
        paging="true"
        jqGrid="true"
        textareaMaxlength="true"
        dropdown="true"
        chosen="true"
    />

    <c:MobileRedirect TAM="true" />
    
    <apex:include pageName="DMAPP__CRUD" />

    
    <script>
        var ttg = ttg || {};        
        ttg.pre_fetch = ttg.pre_fetch || {};        
        ttg.pre_fetch['DMAPP.TAMStandardController.getPlanDetails'] = '{!JSENCODE(preFetchPlanDetails)}';              
    </script>
    
    <apex:include pageName="DMAPP__JSRemoting" />
    <apex:include pageName="DMAPP__Quicklinks" />

    <style>
        
        @import url("{! URLFOR($Resource.DMAPP__ttgomjs,         'ttg/chatter/css/chatter_side_panel.css') }");
        @import url("{! URLFOR($Resource.DMAPP__ttgomjs,         'ttg/chatter/css/chatter_post.css') }");
        @import url("{! URLFOR($Resource.DMAPP__ttgomjs,         'ttg/graph/css/glyphs/style.css') }");
        @import url("{! URLFOR($Resource.DMAPP__ttgomjs,         'ttg/chatter/css/chatter_summary.css') }");
        @import url("{! URLFOR($Resource.DMAPP__TAM,             'css/common.css') }");
        @import url("{! URLFOR($Resource.DMAPP__TAM,             'css/solutionTooltip.css') }");

        DIV#TAS {
            
        }
        
        DIV#TAS A {
            cursor: pointer;
        }
        
        DIV#AssessmentResult {
            clear: both;
        }
        
        DIV#AssessmentResult TABLE {
            border: 0 none;
            border-spacing: 0;
            padding: 0;
            margin-left: 9px;
        }
        
        DIV#AssessmentResult TR.QUESTIONBLOCKSUMMARY {
            background-color: #F0F0F0;
        }
        
        DIV#AssessmentResult TextArea.DMAPP_NOTE {
            
        }
        
        DIV#AssessmentResult DIV.HIDDEN {
            display: none;
        }
        
        DIV#AssessmentResult DIV.NOTEDLG {
            display: none;
        }
        
        DIV#NOTEEDIT {
            font-family: Arial, Helvetica, sans-serif;
            font-size: 12px;
        }
        
        TEXTAREA#NOTEEDITOR {
            float: left;
            height: 120px;
            width: 260px;
        }
        
        SPAN#NOTE_CRITERIA {
            float: right;
            font-weight: bolder;
            width: 340px;
        }
        
        SPAN#NOTE_HELP {
            color: #555555;
            float: right;
            width: 340px;
            font-size: 12px;
        }
        
        DIV#AssessmentResult DIV.divQuestionsBlock {
            background-color: rgb(203,213,226);
            border: 1px solid rgb(160,181,202);
            border-radius: 7px;
            -moz-border-radius: 7px;
            -webkit-border-radius: 7px;
            box-shadow: 0 1px 0 rgba(255, 255, 255, 0.7) inset;
        }

        /* !important used to overwrite assessment table styles */
        DIV.divCriteriaBlock .DOWNLOAD {
			clear: both;
			padding-top: 11px !important;
			margin: 0px;
			padding-bottom: 1px !important;
			font-size: 12px;
			padding-left: 10px !important;
			text-align:left;
        } 

		    DIV.divCriteriaBlock .DOWNLOAD .attachment_item{
		    
		    }
		     
		     			
			DIV.divCriteriaBlock .DOWNLOAD .del_link{					
				background: url('{!URLFOR($Resource.DMAPP__TAM, 'images/icon_delete.png')}') no-repeat;
				cursor: pointer;
				display: block;
				height: 16px;
				margin: 0px;
				text-decoration: none;
				text-indent: -999em;
				width: 16px;
				float:left;
				margin-top:6px;
			}
			
			DIV.divCriteriaBlock .DOWNLOAD .attachment_name{
				padding: 6px 4px 3px 2px;
				float:left;
			}

			DIV.divCriteriaBlock .DOWNLOAD .file_type_image{
				padding: 11px;
				background-size: contain;
				margin-bottom: -7px;
				float:left;
				height: 0px;
				margin-top:-4px;
			}
			

		#attach_error_dialog, #confirm_delete_attachment_dialog{
		    padding: 7px;
		    line-height: 20px;
		    min-height:20px !important;
		}

        DIV#AssessmentResult DIV.divQuestionBlock {
            height: 40px;
            padding: 0px;
        }
        
        DIV#AssessmentResult DIV.NOTEEDITBUTTON {
            background-image: url('{!URLFOR($Resource.DMAPP__Assessment, 'icon_edit.png')}');
            width: 16px;
            height: 16px;
        }
        
        DIV#AssessmentResult DIV.NOTEDOWNLOADSBUTTON {
            background-image: url('{!URLFOR($Resource.DMAPP__Assessment, 'common/images/PlusBlue.gif')}');
            width: 12px;
            height: 12px;
        }
        
        DIV#AssessmentResult DIV.NOTEINFOICON {
            background-image: url('{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/graph/feimages/icon_info.png')}');
            width: 12px;
            height: 12px;
            margin: 2px;
        }
        
        DIV#AssessmentResult DIV.QUICKLINK {
            background-image: url('{!URLFOR($Resource.DMAPP__Assessment, 'icon_movie.png')}');
            width: 20px;
            height: 16px;
            margin: 4px;
        }
        
        DIV#AssessmentResult SPAN.spanToggle {
            background-image: url('{!URLFOR($Resource.DMAPP__Assessment, 'drawer_expand.png')}');
            background-repeat: no-repeat;
            float: left;
            height: 12px;
            margin: 3px;
            width: 12px;
            margin-top: 13px;
            clear: left;
        }
        
        DIV#AssessmentResult SPAN.spanToggleExpanded {
            -webkit-transform: rotate(90deg);
            -moz-transform: rotate(90deg);
            filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1 );
        }
        
        DIV#AssessmentResult SPAN.spanQuestion {
            float: left;
            font-size: 16px;
            font-weight: normal;
            width: 320px;
            margin-top: 10px;
            color: #2C3B51;
        }
        
        DIV#AssessmentResult SPAN.spanQuestionSummary {
            float: right;
            position: relative;
            width: 160px;
            height: 40px;
            box-shadow: 0 1px 0 rgba(255, 255, 255, 0.7) inset;
            padding-left: 1px;
            padding-right: 1px;
            border: 0px;
            margin-right: 45px;
         }
        
        DIV#AssessmentResult SPAN.spanBreak {
            clear: both;
        }
        
        DIV#AssessmentResult DIV.divCriteriaBlock {
            background-color: #FFF;
            border: 1px solid rgb(160,181,202);
            border-radius: 4px;
            margin: 0px 10px 10px;
            min-height: 20px;
            padding: 5px 5px 10px;
            srheight: 20px;     
        }
        
        DIV#AssessmentResult SPAN.spanQuestionIndex {
            float: left;
            margin-top: 5px;
            width: 20px;
            margin-left: 23px;            
        }
        
        DIV#AssessmentResult .mandatory_icon{
			margin: 3px -16px 0px 1px;
			float: left;
			height: 19px;
        }
        
        DIV#AssessmentResult SPAN.spanCriteria {            
            display: inline-block;
            font-size: 13px;
            font-weight: bold;
            /*width: 500px;*/           
            margin-top: 4px;            
        }
        
        DIV#AssessmentResult DIV.divNote {
            border: 1px solid #d8d8d8;
            background-color: #f9f9f9;
            border-radius: 4px 4px 4px 4px;
            font-weight: normal;
            margin: 10px 5px -4px 21px;
            padding: 10px;
            word-wrap: break-word;
            line-height: 20px;
        }
        
        DIV#AssessmentResult SPAN.spanCriteriaNote {
            float: left;
            margin-top: 4px;
            width: 20px;
        }
        
        DIV#AssessmentResult SPAN.spanCriteriaBlock {
            float: right;
			width: 330px;   
        }
        
        
			DIV#TAS SPAN.QUICKLINK {
				float: right;
				margin-top: 3px;
			}

        DIV#AssessmentResult SPAN.span_criteria_attatch {
			display:none;
			float: left;
			margin-top: 4px;
			margin-right: 1px;
        }
        
        DIV#AssessmentResult SPAN.span_criteria_attatch_upload {
            margin-top: -1px;
        }
 
 			DIV#AssessmentResult SPAN.spanCriteriaBlock .file_input {
				position: relative;
				width: 11px;
				cursor: pointer;
			    background: url('{!URLFOR($Resource.DMAPP__Assessment, 'common/images/paperclip.gif')}');
				background-repeat: no-repeat;
				float:left;
				height:22px;
				margin-top: 4px;
				margin-left: 5px;
				margin-right: 14px;
				/*display: none;*/
			}
 
        
        DIV#AssessmentResult SPAN.spanCriteriaInfo {
            float: left;
            margin-top: 4px;
            margin-right: 7px;
            width: 20px;
        }
        
        DIV#AssessmentResult SPAN.spanCriteriaDownload {
            float: left;
            width: 20px;
        }
        
        DIV#AssessmentResult SPAN.spanCriteriaSummary {
            float: left;
            width: 150px;
            margin-top: -1px;
            padding-left: 10px;
            margin-right: 5px;
            /*border-left: 1px solid white;
            border-right: 1px solid white;*/
        }
        
        DIV#AssessmentResult SPAN.last_modified_date {
			width: 30px;
			margin-top: 5px;
			display: block;
			float: left;
        }
        
        DIV#AssessmentResult SPAN.spanCriteriaSummary SELECT {
            border: 1px solid #C0C0C0;
            border-radius: 3px;
            padding: 2px;
            width: 120px;
            margin-top: 1px;
        }
        
        DIV#AssessmentResult SPAN.spanCriteriaQuicklink {
            float: left;
        }
        
        DIV#AssessmentResult DIV.SCOREBLOCK {
            border: 1px solid black;
            border-radius: 4px 4px 4px 4px;
            height: 14px;
            padding: 4px 7px 7px 14px;
            margin: 5px;
            border-width: 1px 1px 1px 30px;
        }
        
        DIV#AssessmentResult DIV.SCOREBLOCK_TOTAL {
            color: #2C3B51;
            float: left;
            font-weight: bolder;
            text-align: center;
            width: 22px;
            visibility: hidden;
            display: none;
        }
        
        DIV#AssessmentResult DIV.SCOREBLOCK_SCORE {
            border-radius: 4px;
            cursor: pointer;
            float: left;
            height: 16px;
            margin: 2px 0 0 2px;
            text-align: center;
            width: 16px;            
        }
        
        DIV#AssessmentResult DIV.SCOREBLOCK_SCORE_SHADOW {
            margin: 6px 0 0 7px;
        }
        
        DIV#AssessmentResult DIV.divScoreYes {
            background-color: #019040;
            color: white;
        }
        
        DIV#AssessmentResult DIV.divScoreNo {
            background-color: #CC0000;
            color: white;
        }
        
        DIV#AssessmentResult DIV.divScoreUnscored {
            background-color: #ABABAB;
            color: #efefef;
        }
        
        DIV#AssessmentResult DIV.divScoreUnknown {
            background-color: #FFBE00;
            color: white;
        }
        
        DIV#AssessmentResult OPTION {
            background-color: white;
        }
        
        DIV#AssessmentResult OPTION.optionYesAnswer {
            color: #019040;
        }
        
        DIV#AssessmentResult OPTION.optionNoAnswer {
            color: #CC0000;
        }
        
        DIV#AssessmentResult OPTION.optionUnknownAnswer {
            color: #FFBE00;
        }
        
        DIV#AssessmentResult SELECT {
            float: left;
        }
        
        DIV#AssessmentResult SELECT.selectYesAnswer {
            background: none repeat scroll 0 0 #FFFFFF;
        }
        
        DIV#AssessmentResult SELECT.selectNoAnswer {
            background: none repeat scroll 0 0 #FFFFFF;
        }
        
        DIV#AssessmentResult SELECT.selectUnknownAnswer {
            background: none repeat scroll 0 0 #FFFFFF;
        }
        
        DIV#AssessmentResult div.competitorBar {
            height: 39px;
            padding-left: 339px;
        }
        
        DIV#AssessmentResult div.competitorBarGap {
            height: 20px;
        }
        
        DIV#AssessmentResult div.competitorCommonTitle {
            float: left;
            text-align: center;
            text-overflow: ellipsis;
            white-space: nowrap;
            overflow: hidden;
            width: 140px;
            border: 1px solid #A0B5CA;
            margin-right: 5px;
            padding: 10px 10px 10px 10px;
            position: relative;
            text-align: center;
            color: green; /*#374A61;*/
        }
        
        DIV#AssessmentResult div.competitorTitle {
            xborder-radius: 5px 5px 0px 0px;
            x-moz-border-radius: 5px 5px 0px 0px;
            x-webkit-border-radius: 5px 5px 0px 0px;
            bottom: -3px;
            border-bottom: 0px solid #A0B5CA;
        }
        
        DIV#AssessmentResult div.competitorFooter {
            border-top: 0px solid #A0B5CA;
            top: -1px;
        }
        
        DIV#AssessmentResult div.competitorGap {
            border-top: 0px solid #A0B5CA;
            border-bottom: 0px solid #A0B5CA;
        }
        
        DIV#AssessmentResult div.orgTitle {
            color: #404080;
            font-weight: bolder;
        }
        
        DIV#AssessmentResult .tasPointer {
            cursor: pointer;
        }
                
        #tooltip SPAN.HOVERANSWER {
            font-weight: bolder;
        }
        
        DIV.HOVERHELP {
            width:340px;
        }
                
        DIV.revenueTargetDiv {
            font-size: 1.2em;
            padding: 5px;
        }
        
        SPAN.revenueTargetLabel {
            margin-right: 5px;
            font-weight: bold;
        }       
        
        DIV#TAS #SPINNER {
            position: absolute;
        }
        
        /* Settings dropdown fix jQueryMigration  */
        .TAMAdminLink{
            position: relative;
        }

        .dropdown .dropdown-menu, .dropdown .dropdown-panel {
            min-width: 80px;
        }
        
        .dropdown {
            left: -39px !important;
        }
        
        /*  iPAD PORTRAIT STYLES */ 
        @media only screen 
            and (min-device-width : 768px) 
            and (max-device-width : 1024px) 
            and (orientation : portrait) {
                
                .salesforce1 div#AssessmentResult{
                    width: 98% !important;
                    position:relative;
                    margin: 0 auto;
                }
        }
        
        /*  iPAD LANDSCAPE STYLES */    
        @media only screen 
            and (min-device-width : 768px) 
            and (max-device-width : 1024px) 
            and (orientation : landscape){

                .salesforce1 div#AssessmentResult{
                    width: 98% !important;
                    position: relative;
                    margin: 0 auto;
                }   
        }
        
    </style>

    <div id="TAS">
        <apex:include pageName="DMAPP__TAMSummaryTab" />
        <apex:form >
       		<apex:actionFunction name="doActualDeleteAttachment" action="{!deleteAttachment}" reRender="none" oncomplete="remove_deleted_attachment('{!selectedAttachmentId}', '{!selectedAttachmentParentId}'); return false;">
       			  <apex:param name="attachmentToDeleteParam" value="" assignTo="{!selectedAttachmentId}" />
       			  <apex:param name="attachmentParentId" value="" assignTo="{!selectedAttachmentParentId}" />  
       		</apex:actionFunction>
       	</apex:form>
        <br />
        <div id="AssessmentResult"></div>
        <div id="NOTEDIALOG" style="display: none;">
            <TEXTAREA id="NOTEEDITOR" />
            <span id="NOTE_CRITERIA" /> <span id="NOTE_HELP" /> <input type="hidden" id="NOTEEDITOR_ID" />
        </div>
        
        <div id="QUICKEDITDIALOG" style="display: none;">
            <div id="QE_CRITERIA"></div>
            <div id="QE_SELECTION"></div> 
        </div>
        <div id="SPINNER"></div>
    </div>


    <script>

        /* 
         * Copyright © The TAS Group. All rights reserved.
         *  
         */ 

        function remove_deleted_attachment(attachment_id, ans_id) {
            var id = jQuery('#attachment_id_' + attachment_id).parent().parent().attr("id");
            id=id.substring(id.indexOf('_'));
            var question_idx = id.substring(1);
            
            jQuery('#attachment_id_' + attachment_id).remove();
    		
    		//Updates record but doesn't make any changes, still runs validation. Similar to 'Edit and Save' without changing anything on the page.
			var update_ans = new sforce.SObject(ttg.vfp+'AM_Answer__c');
			update_ans.Id = ans_id;
		    result = sforce.connection.update([update_ans]);
		    									    
			jQuery('#last_modified_date_' + question_idx).text(formatDate(new Date()));
        }


        var spec = {
            ttgApi: ttg.apiLayer.sfdcDelegate( { sessionid : '{!JSENCODE($Api.Session_ID)}', planid : '{!JSENCODE(AccountPlan.id)}' } ),
            readonly: {!Editable == false},
            revenueCurrencySymbol: '{!revenueCurrencySymbol}',
            revenueCurrencySeparator: '{!JSENCODE(revenueCurrencySeparator)}'            
        };
        
        var ttg_plandetails = (function(_spec) {

            var that = {};
            
            var plan_detail_data;
            var ttgApi = _spec.ttgApi;
            var questionsToIndex= [];
            var limitSize = 4096;
            var readonly = _spec.readonly;
            var iPad = ttg.isTouchScreen(); //navigator.userAgent.match(/iPad/i) != null;   
            var revenueCurrencySymbol = _spec.revenueCurrencySymbol;        
            var revenueCurrencySeparator = _spec.revenueCurrencySeparator;

            function getPlanDetails() {

                showAjaxSpinner(true);
                ttgApi.getPlanDetails('{!JSENCODE(AccountPlan.id)}', updateRawData, ajaxError, completedGet);
				
            }

            function updateRawData(d) {
                plan_detail_data = d;
            }

            function completedGet() {

                showAjaxSpinner(false);
                refreshDebug();
                render();
                setScores();
                updateAllSummaryTotals();
                autoExpandBlocks(5);
            }
            
            function ajaxError() {
            	//console.log("!!!!!!!!!!!!!!!! ajax error");
            }
            
            function formatRevenueTarget(quantity) {
                var quantity = quantity.toString();
                var formattedQuantity = '';
                var counter = 0;
                var counter2 = 0;
                for(counter = quantity.length; counter > 0; counter--) {
                    if(formattedQuantity.length > 0 && counter2 % 3 === 0) {
                        formattedQuantity = revenueCurrencySeparator + formattedQuantity;
                    }
                    formattedQuantity = quantity[counter-1] + formattedQuantity;    
                    counter2++;
                }
                return revenueCurrencySymbol + formattedQuantity;
            }   

            function completedPut() {
                showAjaxSpinner(false);

                refreshDebug();
            }

            function handleResponse(d) {
                response = d;
                //if answer can't be found, push new answer
                if(response.answer && !_.findWhere(plan_detail_data.answers, {id : response.answer.Id})){
                	plan_detail_data.answers.push(response.answer);
                }
                
                if (d.debug != undefined && d.debug != null) {

                    jQuery.each(d.debug, 
                        function (key, value) {
                            _debug.log(value);
                        }
                    )

                }
                
            }

            function refreshDebug() {
                _debug.handleResponse(plan_detail_data);
            }
            
            function lineChange(){

                setScoreItem(jQuery(this), jQuery(this).val());
                var index = idToIndex(this.id);
                if (index != -1) {
                    showAjaxSpinner(true);
                    wrapPutPost(packageLine(index), completedPut);
                    //ttgApi.putPlanDetails('{!JSENCODE(AccountPlan.id)}', { line: packageLine(index) }, handleResponse, undefined, completedPut);
                }
                
                updateSummaryScore(jQuery(this), true);
            }
            
            function updateSummaryScore(ctrl, updateTotal) {
            
                var id = jQuery(ctrl).attr('id');
                if (id != undefined) {
                    var questionIndex = idToIndex(id);
    
                    var questionBlock = jQuery(ctrl).parent().attr('QuestionBlock');
    
                   /* var competitorIndex;
                    if (id.substring(0,4) == 'THEM' ) {
                        competitorIndex = id.substring(4, id.length);
                        competitorIndex = competitorIndex.substring(competitorIndex.indexOf('_') + 1, competitorIndex.length);
                    }*/
    
                    updateSummaryScoreItem(ctrl, id, questionIndex, questionBlock);
                    if (updateTotal) updateSummaryScoreTotal(questionIndex, questionBlock);
                }
            }

            function updateSummaryScoreTotal(questionIndex, questionBlock) {
                var questions = getQuestionsInBlock(plan_detail_data.questions[questionIndex][ttg.vfp+'Section_Heading__c']);
                var id;
                var total = 0;
                var minScore = 0;
                var maxScore = 0;
                var q;
                var anAnswer = false;

                jQuery.each(questions, 
                    function(key, q) {

                        id = 'US_' + q.index;
                    
                        var val = jQuery('#' + id).val();
                        maxScore += Math.max(0, Math.max(q.question[ttg.vfp+'Yes_Score__c'], q.question[ttg.vfp+'No_Score__c']));  
                        minScore += Math.min(0, Math.min(q.question[ttg.vfp+'Yes_Score__c'], q.question[ttg.vfp+'No_Score__c']));  
    
                        switch(val) {
                            case '': break;
                            case 'Yes': anAnswer=true;total += q.question[ttg.vfp+'Yes_Score__c']; break;
                            case 'No': anAnswer=true;total += q.question[ttg.vfp+'No_Score__c']; break;
                            case 'Unknown': anAnswer=true;total += q.question[ttg.vfp+'Unknown_Score__c']; break;
                        }
                    }
                    
                ) 
                r = 255; g = 190; b = 0
                if (total > 0 ) {
                    var percent = (total/maxScore) * 100;
    
                    if (percent > 33) {
                        r = 1; g = 144; b = 64
                    }
                }
                else if (total < 0) {
                    var percent = (total/minScore) * 100;

                    if (percent > 33) {
                        r = 204; g = 0; b = 0
                    }
                }
                jQuery('#QUESTION_SUMMARY_US_' + questionBlock + '_TOTAL').text(total)
                setRGBStuff('#QUESTION_SUMMARY_US_' + questionBlock + '_TOTAL', r, g, b, anAnswer);
 
            }
            
            function setRGBStuff(id, r, g, b, answered) {
                if (answered) {
                    jQuery(id).parent().css('background-color', 'white').css('border-color', 'RGB(' + r + ', ' + g + ', ' + b + ')');
                }
                else {
                    jQuery(id).parent().css('background-color', 'white').css('border-color', 'RGB(160, 160, 160)');
                }
            }
            
            function updateAllSummaryTotals() {
                var title = '';
                var questionBlock = 0;

                jQuery.each(plan_detail_data.questions, 
                    function (index, criteria) {
                        if (title != criteria[ttg.vfp+'Section_Heading__c']) {
    
                            title = criteria[ttg.vfp+'Section_Heading__c'];
                            questionBlock++;
    
                            updateSummaryScoreTotal(index, questionBlock)
    
                            jQuery.each(plan_detail_data.questions, 
                                function (competitorIndex, criteria) {
                                    updateSummaryScoreTotal(index, questionBlock)
                                }
                            )
    
                        }
                    }
                ) 
            }
            
            
            function updateSummaryScoreItem(ctrl, id, questionIndex, questionBlock) {
            
                var val = jQuery(ctrl).val();

                var ctrl = jQuery('#QUESTION_SUMMARY_US_' + questionBlock + '_' + questionIndex);
                
                applySummaryStyle(ctrl, val);

            }

            function applySummaryStyle(ctrl, val) {
            
                var style = ''; 
                
                switch(val) {
                    case 'Yes': val ='+'; style='divScoreYes'; break;
                    case 'No': val ='-'; style='divScoreNo'; break;
                    case 'Unknown': val ='?'; style='divScoreUnknown'; break;
                    default: style='divScoreUnscored'; val =' '; break;
                }
                
                ctrl.removeClass('divScoreUnscored');
                ctrl.removeClass('divScoreYes');
                ctrl.removeClass('divScoreNo');
                ctrl.removeClass('divScoreUnknown');
                ctrl.addClass(style);
                
                ctrl.text(val)
   
            }

            function idToIndex(id) {
                var index = -1;
                if (id.substring(0,3) == 'US_') {

                    index = id.substring(3, id.length);

                }
                else if (id.substring(0,4) == 'THEM' ) {

                    index = id.substring(4, id.length);
                    index = index.substring(0, index.indexOf('_'));

                }
                else if (id.substring(0,4) == 'NOTE' ) {

                    index = id.substring(4, id.length);

                }
                else if (id.substring(0,7) == 'MANAGE_') {

                    index = id.substring(7, id.length);

                }
                else {
                    _debug.error('Something changed but not one of the expected.  Woz ' + id);
                }
                
                return index;
            }

            function scoreCtrl(id, crit) {

                var scoresOnTheDoor = jQuery('<select>').attr('id', id).change(lineChange);
                
                if (readonly) scoresOnTheDoor.attr('disabled', 'true');
                
                scoresOnTheDoor.append(jQuery('<option>'))
                scoresOnTheDoor.append(jQuery('<option>').addClass('optionYesAnswer').attr('value', 'Yes').text('+ ' + crit[ttg.vfp+'Yes_Label__c']))
                scoresOnTheDoor.append(jQuery('<option>').addClass('optionNoAnswer').attr('value', 'No').text('- ' + crit[ttg.vfp+'No_Label__c']))
                scoresOnTheDoor.append(jQuery('<option>').addClass('optionUnknownAnswer').attr('value', 'Unknown').text('? Unknown'))
                
                return scoresOnTheDoor;
            } 

            function scoreCtrlShadow (id, crit) {

                var div = jQuery('<div>').attr('id', id+'_SHADOW');
                
                div.addClass('SCOREBLOCK_SCORE');
                div.addClass('SCOREBLOCK_SCORE_SHADOW');
                div.addClass('divScoreUnscored');

                return div;
            }

            function hiddenCtrl(id, crit) {
                return jQuery('<input>').attr('id', id).attr('type', 'hidden');
            } 

            function packageLine(index) {
                var line = { }
                var question = plan_detail_data.questions[index];
                
                line.questionId = question.Id;
                line.answer = jQuery('#US_' + index).val();

                line.note = getNoteText('#NOTE_' + index);

                return line;
            }

                          
            function render() {
                var criteriaInQuestion;
                var title = '';
                var questionIndex = 1;
                var questionBlock = 0;
                var table = jQuery('<div>');
                var maxQuestions = 0;
                var questionsInBlock = 0;
                var firstblock = true;

				function isIE() {
					var myNav = navigator.userAgent.toLowerCase();
					return (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : false;
				} 

                jQuery.each(plan_detail_data.questions,
                    function (index, crit) {
                        questionsToIndex[crit.Id] = index;
                        questionsInBlock++;
                        maxQuestions = Math.max(maxQuestions, questionsInBlock); 
 
		               	/* for date */ 
		               	var mod_search_param = {}
		              	mod_search_param[ttg.vfp+'AM_Question__c'] = crit.Id;
		              	var mod_answer = _.findWhere(plan_detail_data.answers, mod_search_param);
		              	var mod_answer_id = (mod_answer) ? mod_answer.Id : 'No answer available';
 
                        if (title != crit[ttg.vfp+'Section_Heading__c']) {
                            maxQuestions = Math.max(maxQuestions, questionsInBlock);
                            questionsInBlock = 0;
                            title = crit[ttg.vfp+'Section_Heading__c']
                            if (table != null) jQuery('#AssessmentResult').append(table);
    
                            if (!firstblock) {
                                appendTitles('competitorBar competitorBarGap', 'competitorCommonTitle competitorGap', false);
                            }
                            else {
                                firstblock = false;
                            }
                               
                            table = jQuery('<div>').addClass('divQuestionsBlock');
    
                            criteriaInQuestion = getQuestionsInBlock(title);
                            questionBlock++;
    
                            tr = jQuery('<div>').addClass('divQuestionBlock').attr('id', 'QUESTIONBLOCKSUMMARY_' + questionBlock);
                            tr.append(jQuery('<span>').addClass('spanToggle').addClass('tasPointer').click(toggle));
                            tr.append(jQuery('<span>').addClass('spanQuestion').click(questionToggle).text(crit[ttg.vfp+'Section_Heading__c']))/* adds toggle to span question - s1/iPad only */
                            tr.append(jQuery('<span>').addClass('spanQuestionSummary').attr('id', 'QUESTION_SUMMARY_US_' + questionBlock).append(blankSummaryBlock('QUESTION_SUMMARY_US_' + questionBlock, criteriaInQuestion)));
                            tr.append(jQuery('<span>').addClass('spanBreak'));
                            
                            table.append(tr);                                       
                        }
                        
                        jQuery('#QUESTION_SUMMARY_US_' + questionBlock).append(jQuery('<span>').attr('id', 'QUESTION_SUMMARY_US_' + questionBlock + '_SCORE_' + questionIndex).text(' '));
    
                        jQuery('#QUESTION_SUMMARY_US_' + questionBlock).append(' ')
    
                        var criteriaTextLength = (crit[ttg.vfp+'Question_Text__c'] == null) ? 0 : crit[ttg.vfp+'Question_Text__c'].length;
                        
                        var tr = jQuery('<div>').addClass('divCriteriaBlock').attr('id', 'QUESTIONBLOCK' + questionBlock).addClass('HIDDEN');
                        
                        if(crit[ttg.vfp+'Mandatory__c']) {
                        	tr.append(jQuery('<img>').css('vertical-align', 'sub').addClass('mandatory_icon').attr('src', '{!URLFOR($Resource.Qualification, 'indicator_mandatory.png')}' ).tooltip({ delay: 0, showURL: false, bodyHandler: function() { return localization.title_tooltip_required; } })); 
                        }
                        
                        tr.append(jQuery('<span>').addClass('spanQuestionIndex').text(questionIndex++));
                        
                        tr.append(jQuery('<span>').addClass('spanCriteria').text(crit[ttg.vfp+'Question_Text__c']));

                        var spanCriteriaBlock = jQuery('<span>').addClass('spanCriteriaBlock');
                        
                       /* REPLACEMENT FOR DEPRECATED .browser() AS OF JQUERY v1.9  */
                       if(navigator.appVersion.indexOf('MSIE 7.') != -1){
                       		spanCriteriaBlock.css('width', '250px');
                       }
                       

                       /*value.required ? 
							jQuery('<img>').addClass('REQUIRED')
							: 
							jQuery('<img>').addClass('REQUIRED').attr('src', '{!URLFOR($Resource.Assessment, 'common/images/transparent_dot.gif')}' ) 
                       */
                       
                        spanCriteriaBlock
                        	.append(
                        		jQuery('<span>')
                        			.addClass('spanCriteriaInfo')
                        			.append(jQuery('<div>')
                        			.addClass('NOTEINFOICON')
                        			.addClass('tasPointer')
                        			.attr('id', 'NOTEINFOICON_' + index)
                        			.css('visibility', !iPad ? 'visible' : 'hidden'))
                        	);                                                
	                       spanCriteriaBlock
	                        	.append(
	                        		jQuery('<span>')
	                        			.addClass('span_criteria_attatch')
	                        			.append(
	                        				jQuery('<input>')
	                        					.attr('type','file')
	                        					.addClass('tasPointer')
	                        					.addClass('file_input_upload')
	                        					.attr('id', 'FILE_INPUT_' + index)
	                        					.change(function() {
	                                            	var search_param = {}
	                                            	search_param[ttg.vfp+'AM_Question__c'] = crit.Id;
	                                            	var answer = _.findWhere(plan_detail_data.answers, search_param);
	                                            	if(!answer){
	                                            		wait_for_answer(index, function(){
	                                            			var search_params = {}
	                                            			search_params[ttg.vfp+'AM_Question__c'] = crit.Id;
	                                            			answer = _.findWhere(plan_detail_data.answers, search_params);
	                                            			uploadAttachment(answer, answer.Id, index, crit.Id);
	                                            		});
	                                            	}else{
	                                            		uploadAttachment(answer, answer.Id, index, crit.Id);
	                                            	}
	                                            })
	                                      )
	                               ).append(
	                               jQuery('<div>')
	                               	   .addClass('file_input')
	                               	   .attr('id', 'PAPERCLIP_' + index)
	                               	   .click(function(){
							       	   		if (isIE() && isIE() < 10) {
                                            	var search_param = {}
                                            	search_param[ttg.vfp+'AM_Question__c'] = crit.Id;
                                            	var answer = _.findWhere(plan_detail_data.answers, search_param);
                                            	if(!answer){
                                            		wait_for_answer(index, function(){
                                            			var search_params = {}
                                            			search_params[ttg.vfp+'AM_Question__c'] = crit.Id;
                                            			answer = _.findWhere(plan_detail_data.answers, search_params);
														openAttachmentDialog(answer.Id);
                                            		});
                                            	}else{
													openAttachmentDialog(answer.Id);
                                            	}
												return;
											}
											else {
												jQuery(this).siblings('.span_criteria_attatch').children('.file_input_upload').trigger('click');
											}
	                               	    })
	                               )           
                        spanCriteriaBlock
                        	.append(
                        		jQuery('<span>')
                        			.addClass('spanCriteriaNote')
                        			.append(
                        				jQuery('<div>')
	                        			.addClass('NOTEEDITBUTTON')
	                        			.addClass('tasPointer')
	                        			.attr('id', 'NOTEEDITBUTTON_' + index)
                        			)
                        	);
                        spanCriteriaBlock
                        	.append(
                        		jQuery('<span>')
                        			.addClass('spanCriteriaSummary')
                        			.attr('QuestionBlock', questionBlock)
                        			.append(
                        				scoreCtrl('US_' + index, crit)
	                  					.change(function() {
			                             	wait_for_answer(index, function(){
			                                	var search_param = {}
			                                	search_param[ttg.vfp+'AM_Question__c'] = crit.Id;
			                                	var _answer = _.findWhere(plan_detail_data.answers, search_param);	                                       		
			                             		jQuery('#last_modified_date_' + index).text(formatDate(new Date()));
			                               	})
	                             		})
                             		).append(
                           				scoreCtrlShadow('US_' + index, crit))
                           );                       
                        spanCriteriaBlock.append(
                        	jQuery('<span>')
                        		.addClass('last_modified_date')
                        		.attr('id', 'last_modified_date_' + index)
                        		.text((mod_answer) ? formatDate(mod_answer.LastModifiedDate) : ' ')
                        );                                              
                       if (crit[ttg.vfp+'AM_Question_Quicklinks__r'] != undefined ) { 
                            spanCriteriaBlock.append(
                                jQuery('<span>')
                                	.addClass('QUICKLINK')
                                	.addClass('tasPointer')
                                	.attr('id', 'QUICKLINK_' + index)
                                	.click(function() { 
                                		callQuicklink(index); 
                                	})
                            );
                        }
                        else {
    
                            spanCriteriaBlock.append(
                                jQuery('<span>').addClass('QUICKLINK').css('visibility', 'hidden')  
                            );

                        }
                         
                        tr.append(spanCriteriaBlock);
                        
                        tr.append(jQuery('<div>').attr('id', 'NOTE_' + index));

	                    tr.append(
	                       jQuery('<table>').addClass('DOWNLOAD').attr('id', 'DOWNLOAD_' + index)
	                    )
                 
                        table.append(tr);                                   
                    }  
                );
                
                if (table != null) {
                    jQuery('#AssessmentResult').append(table);
                }
                
                if (!iPad) {
                    jQuery('.SCOREBLOCK_SCORE').tooltip({ delay: 0, showURL: false, bodyHandler: function() { return getHoverInformation(this, jQuery(this).attr('id')); } });
                    jQuery('.NOTEINFOICON').tooltip({ delay: 0, showURL: false, bodyHandler: function() { return getHelpInformation(jQuery(this).attr('id')); } });
                }

                
                /* IF SALESFORCE1 IS PRESENT, SMALLER 'finalWidth' IS RETURNED */
                var finalWidth;
                if (typeof sforce != 'undefined') { 
                    if (typeof sforce.one != 'undefined') { 
                                                
                        finalWidth = Math.max(670, (100 + (70 + (20 * maxQuestions)*4)));
                    
                    }else{
                    
                        finalWidth = Math.max(670, (390 + (70 + (20 * maxQuestions)*4)));
                    
                    }
                }               
                                
                /*var finalWidth = Math.max(670, (390 + (70 + (20 * maxQuestions)*4))); */              
                
                jQuery('#AssessmentResult').css('width', finalWidth + 'px');
                jQuery('.competitorCommonTitle').css('width', (50 + (18 * maxQuestions)) +'px');
                jQuery('.spanQuestionSummary').css('width', (70 + (18 * (maxQuestions + 1))) +'px');
                
                if (!readonly) {
                    jQuery('.SCOREBLOCK_SCORE').click( handleScoreBlockClick );
                    //jQuery('.NOTEDOWNLOADSBUTTON').click( manageDownloads );
                }
                else {
                    //jQuery('.NOTEDOWNLOADSBUTTON').css('display', 'hidden');
                }
                
                setupNoteDialog();
                setupQuickEditDialog();                
                setUpMaxLimitCheck();
            }

            /*function manageDownloads() {
                var index = idToIndex(this.id);
                if (index != -1) {
                    showAjaxSpinner(true);
                    ttgApi.putPlanDetails('{!JSENCODE(AccountPlan.id)}', { line: packageLine(index) }, handleResponse, undefined, function() { gotoAttachements(index) } );
                }
            }

            function gotoAttachements(index) {
                // By not turn off the spinning the redirect is a bit nicer
                //                showAjaxSpinner(false);
                
                document.location = '/' + response.answer.Id;
            }*/

            function quicklinkHitSuccess() {}
            function quicklinkHitError() {} 
            function quicklinkHitComplete() {}
            
            function callQuicklink(index) {

                var question = plan_detail_data.questions[index];
                
                var qls = [];
                var collection = [];
                jQuery.each(question[ttg.vfp+'AM_Question_Quicklinks__r'] ? question[ttg.vfp+'AM_Question_Quicklinks__r'].records : [], function (key, value) {
                        
                        var quicklinkId = value[ttg.vfp+'Quicklink__c'];
                        
                        jQuery.each(plan_detail_data.quicklinks, function(qlindex, quicklink) {
                                if (quicklinkId != undefined && quicklink[ttg.vfp+'Quicklink__c'] == quicklinkId) {
                                    
                                    var details = quicklink[ttg.vfp+'Quicklink__r'];

                                    collection.push({ id: quicklinkId, name: details.Name, type: details[ttg.vfp+'Type__c'], description: details[ttg.vfp+'Description__c'], link: details[ttg.vfp+'Link__c'] });
                                
                                }
                            }
                        )
                
                    }
                )
                qls.push(collection);
                var _tasQuicklinks = new QUICKLINKS({});
                _tasQuicklinks.setDM_Quicklinks(qls);
                
                _tasQuicklinks.setQuicklinkHitCallback(function(spec, quicklink) {
                    if(ttgApi) {
                        ttgApi.logQuicklinkUsageHitJS(quicklink.id, quicklinkHitSuccess, quicklinkHitError, quicklinkHitComplete);
                    }
                });
                
                _tasQuicklinks.quicklinkDlg(0, question.Name);
            }


            function handleScoreBlockClick() {
                var id = jQuery(this).attr('id');
                if (0 == id.indexOf('US_') || 0 == id.indexOf('THEM')) {
                    id = id.replace('_SHADOW', '');
                }
                else if (0 == id.indexOf('QUESTION_SUMMARY_US_')) {
                    id = id.replace('QUESTION_SUMMARY_US_', '');
                    id = id.substring(id.indexOf('_') + 1, id.length);
                    id = 'US_' + id;
                }
                else if (0 == id.indexOf('QUESTION_SUMMARY_THEM_')) {
                    id = id.replace('QUESTION_SUMMARY_THEM_', '');
                    id = id.substring(id.indexOf('_') + 1, id.length);
                    var c = id.substring(0, id.indexOf('_'))
                    id = id.substring(id.indexOf('_') + 1, id.length);
                    id = 'THEM' + id + '_' + c;
                }
                
                var v = jQuery('#' + id).val();
                switch (v) {
                    case 'Yes': v = 'No'; break;
                    case 'No': v = 'Unknown'; break;
                    case 'Unknown': v = 'Yes'; break;
                    default: v = 'Yes'; break;
                }

                jQuery('#' + id).val(v);                
                jQuery('#' + id).trigger('change');             
            }

            function autoExpandBlocks(questionBlocks) {
                
                var i;
                var cookie;
                var planId = '{!JSENCODE(AccountPlan.id)}';
                
                for (i = 1; i < questionBlocks; i++) {
                
                    cookie = jQuery.cookies.get(planId + 'QUESTIONBLOCKSUMMARY_' + i);

                    if (cookie == null) {
                        jQuery.cookies.set(planId + 'QUESTIONBLOCKSUMMARY_' + i, false);
                    }               
                    if ((cookie == null && i == 1) || cookie == true) {

                        jQuery('#QUESTIONBLOCKSUMMARY_' + i).find('.spanToggle').trigger('click');

                    }
                }
            
            }
          
            function getHelpInformation(id) {
                try {
                    id=id.substring(id.indexOf('_'));
                    var questionIndex = id.substring(1);
                    return jQuery('<div class="HOVERHELP">').html(plan_detail_data.questions[questionIndex][ttg.vfp+'Help__c'])
                }
                catch(e) {
                    return '';
                }
            }
            
            function getHoverInformation(ctrl, id) {
                try {
                
                
                    if (id.indexOf('_SHADOW') > -1) id = id.substring(0, id.indexOf('_SHADOW'));
                    if (id.substring(0, 4) == 'THEM') {
                        id = id.substring(4, id.indexOf('_'));
                    }
                    else {
                        var index = -1;
                        while (id.indexOf('_') > -1) {
                            id = id.substring(id.indexOf('_') + 1);
                        }
                    }
    
                    if (id != undefined && plan_detail_data.questions[id][ttg.vfp+'Section_Heading__c']) {
                        /*                    
                            var answer;
                            var yes = data.questions[id][ttg.vfp+'Yes_Label__c'];
                            var no = data.questions[id][ttg.vfp+'No_Label__c'];
                            var unknown = 'Unknown'
                            
                            if (jQuery(ctrl).hasClass('divScoreNo')) answer = no;
                            else if (jQuery(ctrl).hasClass('divScoreYes')) answer = yes;
                            else if (jQuery(ctrl).hasClass('divScoreUnknown')) answer = unknown;
                            else answer = '';
                        */

                        var result = jQuery('<span>').text(plan_detail_data.questions[id][ttg.vfp+'Question_Text__c']); 
                        /*
                            if (answer != '') {
                                result = jQuery('<span>').append(
                                    jQuery("<span>").addClass('HOVERANSWER').text(answer)
                                ).append(
                                    jQuery('<br>')
                                ).append(
                                    result
                                )
                            }
                        */
                        return result;
                    }

                }
                catch(e) {

                    return '';

                }
            }


            function appendTitles(styleBar, styleCell, includeTitles) {
                var table = jQuery('<div>')
                var tr = jQuery('<div>').addClass(styleBar);
                table.append(tr);                                   
                jQuery('#AssessmentResult').append(table);
            }

            function setupQuickEditDialog() {

                if (readonly) {
                    jQuery('#QUICKEDITDIALOG').dialog({ modal: true, width: "640px", resizable: false, autoOpen: false, buttons: {'Close': function() { jQuery(this).dialog("close"); } }  });
                }
                else {
                    jQuery('#QUICKEDITDIALOG').dialog({ modal: true, width: "640px", resizable: false, autoOpen: false, buttons: {'Cancel': function() { jQuery(this).dialog("close"); }, 'Save': function() { quickEditOk(jQuery(this)); } }  });
                }
            }

            function openQuickEditDialog() {

                var id = jQuery(this).attr('id');
                
                jQuery('#QUICKEDITDIALOG').dialog('open');
                jQuery(".ui-widget-overlay").click(function(){ jQuery(".ui-dialog-titlebar-close").trigger('click');});

            }

            function setupNoteDialog() {

                if (readonly) {
                    jQuery('#NOTEDIALOG').dialog({ modal: true, width: "640px", resizable: false, autoOpen: false, buttons: {'Cancel': function() { jQuery(this).dialog("close"); } }  });
                    jQuery('#NOTEEDITOR').attr('disabled', 'true');
                }
                else {
                    jQuery('#NOTEDIALOG').dialog({ modal: true, width: "640px", resizable: false, autoOpen: false, buttons: [{
                                                                                                                        ttgid:'NOTEDIALOG_SAVE',
                                                                                                                        text: 'Save', 
                                                                                                                        click : function() {noteOk(jQuery(this));}
                                                                                                                        
                                                                                                                        },{ 
                                                                                                                    
                                                                                                                        ttgid:'NOTEDIALOG_CANCEL',
                                                                                                                        text: 'Cancel', 
                                                                                                                        click: function() {jQuery(this).dialog("close");} 
                                                                                                                    
                                                                                                                    }]                                                         
                                                });
                }
                
            
                jQuery('.NOTEEDITBUTTON').each( function (index, element) {  
                
                        jQuery(this).click(openNoteDialog)              

                    }
                )
                
            }
            
            function openNoteDialog() {
                
                var id = jQuery(this).attr('id');
                              
                id=id.substring(id.indexOf('_'));
                questionIndex = id.substring(1);

                var noteText = getNoteText('#NOTE' + id);

                jQuery('#NOTEEDITOR').val(noteText);

                jQuery('#NOTEEDITOR_ID').val(id);
    
                jQuery("#NOTEDIALOG").dialog('option', 'title', plan_detail_data.questions[questionIndex][ttg.vfp+'Section_Heading__c'] );              

                jQuery('#NOTE_CRITERIA').html(plan_detail_data.questions[questionIndex][ttg.vfp+'Question_Text__c'])
                jQuery('#NOTE_HELP').html(plan_detail_data.questions[questionIndex][ttg.vfp+'Help__c'])
                
                jQuery('#NOTEDIALOG').dialog('open');

                jQuery(".ui-widget-overlay").click(function(){ jQuery(".ui-dialog-titlebar-close").trigger('click');});
            }
            
            function noteOk(ctrl) {

                var id = jQuery('#NOTEEDITOR_ID').val();

                var value = jQuery('#NOTEEDITOR').val();

                setNoteText('#NOTE' + id, value);

				id=id.substring(id.indexOf('_'));
                var questionIndex = id.substring(1);
				
     			var q_id = plan_detail_data.questions[questionIndex].Id;
				
				wait_for_answer(questionIndex, function(){		
	      			var search_params = {}
	      			search_params[ttg.vfp+'AM_Question__c'] = q_id;
	           		var answer = _.findWhere(plan_detail_data.answers, search_params);
	           		jQuery('#last_modified_date_' + questionIndex).text(formatDate(answer.LastModifiedDate));

				});

                jQuery('#US' + id).trigger('change');
                
                jQuery(ctrl).dialog("close");
   
            }

            function wait_for_answer(index, onComplete) {
            	wrapPutPost(packageLine(index), onComplete);
            }
            
            function setNoteText(id, v) {         
                if (v != undefined){
                    var items = v.split('\n');
                    var html = ''
                    jQuery.each(items,
                        function (index, item) {                        
                            if (html != '') {
                                html += '<br/>';
                            }
                            html += ttg.autolink(jQuery('<div/>').text(item).html(), {stripPrefix: false, newWindow: true, salesforce1: ttg_salesforce1});
                        }
                    )

                    jQuery(id).html(html);
                    if (html != '') {
                        jQuery(id).addClass('divNote');
                        jQuery(id).css('display','block' );
                        jQuery(id).click(openNoteDialog);
                        jQuery(id + " a").click(function(e){
                            e.stopPropagation();
                        });
                    }
                    else {
                        jQuery(id).removeClass('divNote');
                    }
                }
            }
            
            function getNoteText(id) {
                var html = jQuery(id).html()

                html = html.replace(/<br>/gi, '\n');

                var items = html.split('\n');
                var text = ''
                
                jQuery.each(items,
                    function (index, item) {
                        if (text != '') text += '\n';
                        text += jQuery('<div/>').html(item).text(); 
                    }
                )

                return text;
            }           

            function getQuestionsInBlock(title) {
                var i =0;
                var questions = [];

                jQuery.each(plan_detail_data.questions,
                    function (index, q) {
                        if (q[ttg.vfp+'Section_Heading__c'] == title) {
                            questions.push({ index: i, question: q })
                        }
                        i++;
                    }
                )
                
                return questions;
            }
            
            function blankSummaryBlock(prefix, criteriaInQuestion) {
                var div = jQuery('<div>').attr('id', prefix).addClass('SCOREBLOCK');

                div.append(jQuery('<div>').attr('id', prefix + '_TOTAL').addClass('SCOREBLOCK_TOTAL').text('0'))
                
                jQuery.each(criteriaInQuestion,
                    function (index, crit) {

                        div.append(jQuery('<div>').addClass('SCOREBLOCK_SCORE').addClass('divScoreUnscored').attr('id', prefix + '_' + crit.index).text(' '));
                        
                    }
                )
                return div;
            }

            function toggle() {
                var id = jQuery(this).parent().attr('id');
                var index = id.substring(id.indexOf('_') + 1);
                var expanding = false;
                 
                if (jQuery(this).hasClass('spanToggleExpanded')) {
                    expanding = false;
                    jQuery(this).removeClass('spanToggleExpanded');
                }
                else {
                    expanding = true;
                    jQuery(this).addClass('spanToggleExpanded');
                }
                
                    
                jQuery(this).parent().parent().children('div.divCriteriaBlock').each(
                    function(index, element) {
                    
                        if (expanding) {
                            jQuery(this).removeClass('HIDDEN');
                        }
                        else {
                            jQuery(this).addClass('HIDDEN');
                        }
                    }
                )                
                var planId = '{!JSENCODE(AccountPlan.id)}';
                jQuery.cookies.set(planId + id, expanding);
            }
            
            

            function questionToggle() {
                var id = jQuery(this).parent().attr('id');
                var index = id.substring(id.indexOf('_') + 1);
                var expanding = false;
                 
                if (jQuery(this).hasClass('.salesforce1 spanQToggleExpanded')) {
                    expanding = false;
                    jQuery(this).removeClass('.salesforce1 spanQToggleExpanded');
                    jQuery('.salesforce1 .tasPointer').removeClass('.salesforce1 spanToggleExpanded');
                }
                else {
                    expanding = true;
                    jQuery('.salesforce1 .tasPointer').addClass('.salesforce1 spanToggleExpanded');
                    jQuery(this).addClass('.salesforce1 spanQToggleExpanded');
                }
                
                    
                jQuery(this).parent().parent().children('.salesforce1 div.divCriteriaBlock').each(
                    function(index, element) {
                    
                        if (expanding) {
                            jQuery(this).removeClass('.salesforce1 HIDDEN');
                        }
                        else {
                            jQuery(this).addClass('.salesforce1 HIDDEN');
                        }
                    }
                )
                
                var planId = '{!JSENCODE(AccountPlan.id)}';
                jQuery.cookies.set(planId + id, expanding);

            }
            
            function setScores() {
                var ourAnswerToIndex = [];
                _debug.log('About to do plan_detail_data.answers');

                jQuery.each(plan_detail_data.answers,
                    function (index, answer) {
                        var mappedIndex = questionsToIndex[answer[ttg.vfp+'AM_Question__c']];
                        if (mappedIndex != undefined) {
                            ourAnswerToIndex[answer.Id] = mappedIndex;
                            setScoreItem(jQuery('#US_' + mappedIndex), answer[ttg.vfp+'Answer__c']);
                            setNoteText('#NOTE_' + mappedIndex, answer[ttg.vfp+'Note__c']);
                            set_attachments('#DOWNLOAD_' + mappedIndex, answer.Attachments, answer.Id);
                            updateSummaryScore(jQuery('#US_' + mappedIndex), false); 
                        }
                    }
                )
                _debug.log('Finished plan_detail_data.answers');

            }

            function set_attachments(id, attachment_info, answer_id) {
                if (attachment_info) {
                    if ((attachment_info.totalSize || 0) > 0) {
                        jQuery.each(attachment_info.records, function(key, value) {                  
                               addUploadedAttachment(id, value, value.Id, answer_id)
                        	}
                        )
                    }
                }
            }

            function setScoreItem(ctrl, answer) {
                ctrl.removeClass('selectYesAnswer');
                ctrl.removeClass('selectNoAnswer');
                ctrl.removeClass('selectUnknownAnswer');

                switch (answer) {
                    case 'Yes': ctrl.addClass('selectYesAnswer'); break;
                    case 'No': ctrl.addClass('selectNoAnswer'); break;
                    case 'Unknown': ctrl.addClass('selectUnknownAnswer'); break;
                }

                ctrl.val(answer);

                var id = ctrl.attr('id');

                applySummaryStyle(jQuery('#' + id + '_SHADOW'), answer);
                
            }
            

            function setUpMaxLimitCheck() {

                jQuery('TextArea#NOTEEDITOR').on('change keydown keyup mousedown mouseup', function() {
                    var $this = jQuery(this);
                        value = $this.val(),
                        valueLength = value.length || 0;
                    
                    if(valueLength > limitSize) {
                        $this.val(value.substring(0,limitSize));
                    }
            
                });

            };
            
            var ajaxSpinnerCnt = 0;
            
            function showAjaxSpinner(show) {
                
                if (show) { 
                    ajaxSpinnerCnt++;
                    if (ajaxSpinnerCnt == 1) {

                        jQuery('#SPINNER').append(jQuery('<img>').attr('id', 'tas_ajax_spinner').addClass('spinner').attr('src', '{!JSENCODE(URLFOR($Resource.ttgomjs, '/ttg/graph/images/loader.gif'))}'));
                        jQuery('#SPINNER').css("top", ( jQuery(window).height() - jQuery('#SPINNER').height() ) / 2+jQuery(window).scrollTop() + "px");
                        jQuery('#SPINNER').css("left", ( jQuery(window).width() - jQuery('#SPINNER').width() ) / 2+jQuery(window).scrollLeft() + "px");

                    }                   
                }
                else {

                    ajaxSpinnerCnt--;
                    if (ajaxSpinnerCnt <= 0) {                  
                        jQuery('#SPINNER').html('');
                        ajaxSpinnerCnt = 0;
                    }

                }
            }

			function deleteAttachment(attachment_id, attachment_name, ans_id) {
				var confirm_delete_attachment_dialog = jQuery('<div/>', {id: 'confirm_delete_attachment_dialog'}).text('Are you sure?');
				confirm_delete_attachment_dialog.dialog({
					title	: 'Delete Attachment?',
					buttons	: {	
									
									'Yes' 	: function() {
														doActualDeleteAttachment(attachment_id, ans_id);					
														confirm_delete_attachment_dialog.dialog('close');
														},
									'No' 	: function() { 
														confirm_delete_attachment_dialog.dialog('close'); 
														}
							}
				});
			}
			
			function errorDialog(err_message) {
				var err_dlg = jQuery('<div/>', {id: 'attach_error_dialog'}).text(capitalizeFirst(err_message)).css('color','#d74c3b');
				err_dlg.dialog({
					title	: 'Error',
					buttons	: {										
								'Close' : function() {						
											err_dlg.dialog('close');
										  }
							}
				});
			}
						
	        function addUploadedAttachment(id, att, att_id, ans_id) {
                jQuery(id).prepend(
                    jQuery('<tr>').attr('id','attachment_id_' + att_id).addClass('attachment_item').append(
                        jQuery('<td>')
                       	    .addClass('attach_image')
                       	    .append(
                                jQuery('<img>')
                                	.css('background-image', 'url(' + checkFileType(att.Name) + ')')
                                	.addClass('file_type_image')
                            )
                   ).append(
                       jQuery('<td>')
                           .append(
                               jQuery('<a>')
                               	   .addClass('attach_link')
                               	   .attr('href', plan_detail_data.urlBase + att_id)
                           .append(
                               jQuery('<span>')
                                   .addClass('attachment_name').text(att.Name)
                            )
                        ).append(
                        	jQuery('<div>')
                        		.addClass('del_link')
                        		.attr('alt' , 'Delete Attachment')
                        		.click(function(){
                        			deleteAttachment(att_id, att.Name, ans_id);
                        		})
                        )
                   )
                )
                showAjaxSpinner(false);
	        }

	        function uploadAttachment(answer, answer_id, index)
	        {
	        	(showAjaxSpinner(true));
	            var input = document.getElementById('FILE_INPUT_' + index);
	            var parent_id = answer_id;            
	            var filesToUpload = input.files;
	        
	            for(var i = 0, f; f = filesToUpload[i]; i++)
	            {
	                var reader = new FileReader();     
	        
	                // Keep a reference to the File in the FileReader so it can be accessed in callbacks
	                reader.file = f; 
	        
	                reader.onerror = function(e) 
	                {
	                    switch(e.target.error.code) 
	                    {
	                        case e.target.error.NOT_FOUND_ERR:	                            
	                            ttg.ajaxErrorFunction()({ responseText: "Failed: " + error + " : " + JSON.stringify(xhr.responseText) });
	                            break;
	                        case e.target.error.NOT_READABLE_ERR:
	                            ttg.ajaxErrorFunction()({ responseText: "Failed: " + error + " : " + JSON.stringify(xhr.responseText) });
	                            break;
	                        case e.target.error.ABORT_ERR:
	                            break; // noop
	                        default:
	                            ttg.ajaxErrorFunction()({ responseText: "Failed: " + error + " : " + JSON.stringify(xhr.responseText) });
	                    };
	                };     
	                reader.onabort = function(e) 
	                {
	                    alert('File read cancelled');
	                };
	        
	                reader.onload = function(e) 
	                {
	                    var att = new sforce.SObject("Attachment");
	                    att.Name = this.file.name;
	                    att.ContentType = this.file.type;
	                    att.ParentId = parent_id;
	
						var binary = "";
						var bytes = new Uint8Array(e.target.result);
						var length = bytes.byteLength;
						
						if (length == 0){
							showAjaxSpinner(false);
							errorDialog('Cannot upload attachment. '+ att.Name +' file size is too small. (0 bytes)');
							jQuery('.file_input_upload').val('');
							return;
						}
						
							for (var i = 0; i < length; i++) 
							{
							    binary += String.fromCharCode(bytes[i]);
							}
		
		                    att.Body = (new sforce.Base64Binary(binary)).toString();
		        
		                    sforce.connection.create([att],
		                    {
		                        onSuccess : function(result, source) 
		                        {
		                            if (result[0].getBoolean("success")) 
		                            {
		                                addUploadedAttachment('#DOWNLOAD_' + index, att, result[0].id);
		                                jQuery('.file_input_upload').val('');
										
										//Updates record but doesn't make any changes, still runs validation. Similar to 'Edit and Save' without changing anything on the page.
										var update_ans = new sforce.SObject(ttg.vfp+'AM_Answer__c');
										update_ans.Id = answer_id;
									    result = sforce.connection.update([update_ans]);									    
										jQuery('#last_modified_date_' + index).text(formatDate(new Date()));
							            showAjaxSpinner(false);
		                            }
		                            
		                            else 
		                            {
		                                showAjaxSpinner(false);
		                                var err_msg;
		                                var chk_err = result[0].errors.statusCode;
		                                if (chk_err == "MAXIMUM_SIZE_OF_ATTACHMENT"){
		                                	showAjaxSpinner(false);
		                                	err_msg = "Cannot upload attachment. " + att.Name + " exceeds the maximum size limit of 5MB.";
		                                }else{
		                                	err_msg = result[0].errors.message;
		                                }
			                            errorDialog(err_msg);
		                                jQuery('.file_input_upload').val('');
                                        showAjaxSpinner(false);
		                            }
		                        }, 
		                        onFailure : function(error, source) 
		                        {
		                            console.log("An error has occurred " + error);
		                        }
		                    });
	                };
	                reader.readAsArrayBuffer(f);
	            }
	        }

            
            function wrapPutPost (params, callback) {

                addSerialiseCalls('put', params, callback);

            }

            function wrapGet (opportunityId, callback) {

                addSerialiseCalls('get', opportunityId, callback);

            }

            function _wrapPutPost (params, callback) {

                showAjaxSpinner(true);

                var ret = function (result) { 
                	showAjaxSpinner(false); 
                	callback(result); 
                }
                
                //ttgApi.putPlanDetails('{!JSENCODE(AccountPlan.id)}', { line: packageLine(index) }, handleResponse, undefined, completedPut);
                ttgApi.putPlanDetails('{!JSENCODE(AccountPlan.id)}', { line: params }, handleResponse, undefined, ret);
                //ttgApi.putAssessment('{!JSENCODE(AccountPlan.id)}', { line: params }, handleResponse, undefined, ret);                

            }

            function _wrapGet (opportunityId, callback) {

                showAjaxSpinner(true);
                
                var ret = function (result) { showAjaxSpinner(false); callback(result); }

                ttgApi.getAssessment(opportunityId, updateRawData, undefined, ret);

            }

            var stack = [];
            function addSerialiseCalls(method, params, callback) {

                stack.push({ method: method, params: params, callback: callback });
                if (processing == 0) {
                    processSerialiseCalls();
                }
            }

            var processing = 0;

            function processSerialiseCalls() {

                
                var obj = stack.shift();

                if (obj == undefined) {
                    // Finished
                }
                else if (obj.method == 'get') {

                    processing++;
                    _wrapGet(obj.params, function (result) { try {obj.callback(result);}finally{ processedSerialiseCalls();} });

                }
                else if (obj.method == 'put') {

                    processing++;
                    _wrapPutPost(obj.params, function (result) { try {obj.callback(result);}finally{ processedSerialiseCalls();} });

                }
                
            }

            function processedSerialiseCalls() {
                processing--;
                processSerialiseCalls();
            }   
            
            that.getPlanDetails = getPlanDetails;
            return that;
            
        })(spec);

		function capitalizeFirst(str){
		    return str[0].toUpperCase() + str.slice(1);
		}

		function formatDate(date_str){
            var _dateFormat = '{!jQueryUIDateFormat}';
            var date;
            if(date_str && date_str instanceof Date && !isNaN(date_str.valueOf())) {
                date = date_str;
            }else if(date_str && /^\d\d\d\d-\d\d-\d\dT.*/.test(date_str)) {
				var dateparts = date_str.substring(0,10).split('-');
                date = new Date(dateparts[0], dateparts[1]-1, dateparts[2]);
            }

            if(date) {
                return jQuery.datepicker.formatDate(_dateFormat, date);
            } else {
                return '';
            }
		}

		function getExtension(file_name) {
		    return file_name.split('.').pop().toLowerCase();
		}
		
		function checkFileType(file) { 
		    switch(getExtension(file)) {
		        case 'jpg': case 'gif': case 'png':
		            return '{!URLFOR($Resource.Common, 'images/filetypes/doctype_image.png')}';
		            break;
		        case 'zip': case 'rar':
		            return '{!URLFOR($Resource.Common, 'images/filetypes/doctype_zip.png')}';
		            break;		
		        case 'pdf':
		            return '{!URLFOR($Resource.Common, 'images/filetypes/doctype_pdf.png')}';
		            break;
		        case 'pptx': case 'pps': case 'ppsx': case 'ppst': case 'key':
		            return '{!URLFOR($Resource.Common, 'images/filetypes/doctype_ppt.png')}';
		            break;
		        case 'docx': case 'doc': case 'pages':
		            return '{!URLFOR($Resource.Common, 'images/filetypes/doctype_word.png')}';
		            break;
		        case 'xlsx': case 'xls':
		            return '{!URLFOR($Resource.Common, 'images/filetypes/doctype_excel.png')}';
		            break;
		        default:
		            return '{!URLFOR($Resource.Common, 'images/filetypes/doctype_unknown.png')}';
		            break;
		    }
		}
		
        jQuery(
            function () {
                ttg_plandetails.getPlanDetails();
            }
        )

        jQuery(document).ready(function() {
                    
                var spec = {
                    sessionid : '{!JSENCODE($Api.Session_ID)}',
                    userId: '{!$User.id}',
                    ttgApi: ttg.apiLayer.sfdcDelegate( { sessionid : '{!JSENCODE($Api.Session_ID)}' } ),
                    planId: '{!accountPlan.Id}',
                    planname: '{!JSENCODE(accountPlan.Name)}',
                    spinnerURL: '{!JSENCODE(URLFOR($Resource.ttgomjs, '/ttg/graph/images/loader.gif'))}',
                    calendarURL: "{!URLFOR($Resource.Common, 'images/icon_calendar.png')}",
                    title: 'Plan Settings',
                    readonly: {!PlanRecordEditable == false},
                    candelete: {!Candelete},
                    inactive: {!inactive},
                    onDelete: function() { top.location.href = '/apex/AccountPlan'; },
                    hideScorecard: {!NOT(isLicensedForAccountManagerAndIsScorecardEnabled)},
                    useAccountGrouping: {!accountGroupingEnabled},
                    fiscalYearStartMonth: {!fiscalYearStartMonth},
                    usesStartDateAsFiscalYearName: {!usesStartDateAsFiscalYearName},
                    isoCode: '{!JSENCODE(currencyISO)}',
                    showAutoPostOption: {!showAutoPostOption}
                };
                
    
                var amConfiguration = ttg.am.configuration(spec);
    
                var hasCreateAccess = {!planObjectCreateable};
    
                var specClone = spec;
                specClone['clone'] = true;
                var amConfigurationClone = ttg.am.configuration(specClone);
    
                var ctrl = jQuery('#TAMADMINLINK').parent();
                jQuery('#TAMADMINLINK').remove();
                
                var a = jQuery('<a href="#" data-dropdown="#dropdown-{!accountPlan.Id}"/>').append(
                                    jQuery('<img src="{!URLFOR($Resource.Common, 'images/icon_cog.png')}" alt="Options" title="Options" ttgid="AccountPlanOPTIONSLIST"/>')
                                );
                
                var div = jQuery('<div id="dropdown-{!accountPlan.Id}" class="dropdown dropdown-relative"/>').append(
                                    jQuery('<ul class="dropdown-menu"/>').append(
                                        jQuery('<li/>').append(
                                            jQuery('<a href="#"/>').click(amConfiguration.configure).text('Settings')
                                                .attr('ttgid', "AccountPlanOPTIONSSETTINGS")
                                        )
                                    ).append(hasCreateAccess ?
                                            jQuery('<li/>').append(
                                                jQuery('<a href="#"/>').click(amConfigurationClone.configure).text('Clone')
                                                    .attr('ttgid', "AccountPlanOPTIONSCLONE")
                                            )
                                            :
                                            null
                                    )
                                );
    
                ctrl.append(a);
                ctrl.append(div);
            }
        )     
    </script>
    <apex:include pageName="DMAPP__OpportunityMapConfiguration" />
</apex:page>
<apex:page standardController="DMAPP__DM_Account_Plan__c" extensions="DMAPP.TAMStandardController" action="{!logOpportunityMapUsage}"   
    showHeader="true" sidebar="false" docType="html-5.0" tabStyle="Account_Plans__tab">


    <!--[if IE 7]>
        <link type="text/css" href="{!URLFOR($Resource.DMAPP__TAM,    'css/superGridIE7.css')}" rel="stylesheet" />
    <![endif]-->

    <c:jQuery jQueryUI="true"
        cookies="true"
        underscore="true"
        tooltip="true"
        tools="true"
        validate="true"
        paging="true"
        jqGrid="true"
        textareaMaxlength="true"
        dropdown="true"
        chosen="true"
    />
    
    <c:MobileRedirect TAM="true" />

    <style>         
        @import url("{!URLFOR($Resource.jQueryUI,   'css/custom-theme/jquery-ui-1.8.21.custom.css')}");
        @import url("{!URLFOR($Resource.ttgcss,     'ttgcss/layout.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,    'ttg/uberOpportunityMapImports.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/graph/css/political_side_panel.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/graph/css/political_map.css')}");
        @import url("{!URLFOR($Resource.ttgcss,     'ttgcss/jquery.pulse.css')}");
        @import url("{!URLFOR($Resource.TAM,        'css/uberOpportunityMapImports.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,             'ttg/graph/css/tooltip.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,             'ttg/graph/css/glyphs/style.css')}");
        @import url("{!URLFOR($Resource.jQueryUI, 'js/jquery-dropdown/jquery.dropdown.css')}");
    
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/chatter/css/chatter_side_panel.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/chatter/css/chatter_post.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/chatter/css/chatter_summary.css')}"); 
           
        @import url("{!URLFOR($Resource.ttgcss,     'ttgcss/layout.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,    'ttg/uberOpportunityMapImports.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/graph/css/political_side_panel.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/graph/css/political_map.css')}");
        @import url("{!URLFOR($Resource.ttgcss,     'ttgcss/jquery.pulse.css')}");
        @import url("{!URLFOR($Resource.TAM,        'css/uberOpportunityMapImports.css')}");
 

        @import url("{!URLFOR($Resource.ttgomjs,             'ttg/graph/css/glyphs/style.css')}");
        @import url("{!URLFOR($Resource.jQueryUI, 'js/jquery-dropdown/jquery.dropdown.css')}");
    
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/chatter/css/chatter_side_panel.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/chatter/css/chatter_post.css')}");
        @import url("{!URLFOR($Resource.ttgomjs,         'ttg/chatter/css/chatter_summary.css')}");
        @import url("{! URLFOR($Resource.TAM,             'css/solutionTooltip.css') }");
   
        BODY {
            font-size: 75%;
        }
    <apex:outputText escape="false" value="<!--[if IE]>"/>
        div.searchResultsContainer {
            overflow-x: hidden;
        }
        
        .tableContainer {
            padding-bottom: 20px;
            overflow-y: hidden;
            overflow-x: auto;
        }

    <apex:outputText escape="false" value="<![endif]-->"/>
    
    <apex:outputText escape="false" value="<!--[if lte IE 8]>"/>
        span#sidePanelToggleButton, #contactsSidePanelToggleButton {
           -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(M11=3.061616997868383e-16, M12=1, M21=-1, M22=3.061616997868383e-16, SizingMethod='auto expand')";
        }
        
        span#contactsSidePanelToggleButton {
            -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(M11=-1.8369701987210297e-16, M12=-1, M21=1, M22=-1.8369701987210297e-16, SizingMethod='auto expand')";
        }
        
        span#sidePanelToggleButton.sidePanelToggleButtonCollapsed {
            -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(M11=-1.8369701987210297e-16, M12=-1, M21=1, M22=-1.8369701987210297e-16, SizingMethod='auto expand')";
        }
        span#contactsSidePanelToggleButton.sidePanelToggleButtonCollapsed {
           -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(M11=3.061616997868383e-16, M12=1, M21=-1, M22=3.061616997868383e-16, SizingMethod='auto expand')";
        }
        
        span.accordionHeaderToggleExpanded {
           -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(M11=-1, M12=1.2246467991473532e-16, M21=-1.2246467991473532e-16, M22=-1, SizingMethod='auto expand')";
        }
        span.accordionHeaderToggleCollapsed {
            -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(M11=-1.8369701987210297e-16, M12=-1, M21=1, M22=-1.8369701987210297e-16, SizingMethod='auto expand')";
        }
        
        div#LEGEND div#legendDiv {
            height: 200px;
        }
        
        .createNewMapDialog .ui-button { margin-right: 5px; }
    <apex:outputText escape="false" value="<![endif]-->"/>
    
        td#node_edit_error {
            color       :   red;
            font-weight :   bold;
        }
        
        table#superGrid tr.child td.rowName div.simple_click {
            display     :   inline;
            background  :   none;
        }
    
            
        table#superGrid tr td.rowName div div.mini_clicker_container ,
        table#superGrid tr td.rowName div div.mini_clicker_container div {
            padding     :   0px;
            background  :   none;
            text-align  :   left;           
        }
        
        
        table#superGrid tr td.rowName div div.mini_clicker_container, 
        table#superGrid tr td.rowName div div.mini_clicker_container div.ttg-mini-clicker-menu {
            height      :   auto;
        }
        
        table#superGrid tr td.rowName div div.mini_clicker_container div.ttg-mini-clicker-menu div.ttg-mini-clicker-title,
        table#superGrid tr td.rowName div div.mini_clicker_container div.ttg-mini-clicker-menu div.ttg-mini-clicker-title div,
        table#superGrid tr td.rowName div div.mini_clicker_container div.ttg-mini-clicker-menu div.ttg-mini-clicker-menu-item,
        table#superGrid tr td.rowName div div.mini_clicker_container div.ttg-mini-clicker-menu div.ttg-mini-clicker-menu-item div
         {
            height      :   15px;
        }
        
        table#superGrid div.ttg-mini-clicker-title {
          background-color: #EFF0F4 !important;
        }
    
       table#superGrid div.ttg-mini-clicker-menu-item, table#superGrid div.ttg-mini-clicker-menu-item div {
          background-color: white !important;
          cursor: pointer;
        }
    
        SPAN#SHADOWMAP {
            background-color: #FFFFE0;
            width: 100px;
            height: 100px;
            float: right;
            display: inline-block;
        }
        
        
        .droppableAcceptionCurrent {
            background: none repeat scroll 0 0 #FFFFCC !important;
            border-bottom: 1px solid #CBD5E2 !important;
        }
        
        .droppableAcceptionWon {
            background: none repeat scroll 0 0 #FFFFCC !important;
        }
        .droppableHover {
            background: none repeat scroll 0 0 #FFFF66 !important;
        }
        
        .droppableAcceptionCurrent span, 
        .droppableAcceptionWon span {
            display: none !important;
        }       
    

        .fadedDialog {
            opacity: 0.1;
            filter: alpha(opacity=10); 
        }
        
        div.draggableOpportunity  {
            display: block;
            background: url('{!URLFOR($Resource.DMAPP__TAM, 'images/icon_drag.png')}') left center no-repeat;
            padding: 5px 10px 5px 25px;
            cursor: default;
            z-index: 11;
        }       
        
        div.draggableOpportunityHelper  {
            border : 1px outset black;
            background: url('{!URLFOR($Resource.DMAPP__TAM, 'images/icon_drag.png')}') 5px center no-repeat;            
        }        

        DIV#LEGEND {
            left: 300px;
            height: auto;
            position: absolute;            
        }
        
        DIV#LEGEND IMG {
            position: relative;
            top: -3px;
        }
        
        DIV.LEGEND_POPUP {
            background-color: #FFF;
            border: 2px solid #9C9C9C;
            border-radius: 7px;
            font-size: 9px;
            overflow: hidden;
            padding: 5px;
            position: relative;      
            z-index: 25; 
        }

        button.potential {
            background-image: none;
            background-color: #4572A7;
        }
        
        button.current {
            background-image: none;
            background-color: #89A54E;
        }
        
        button.won {
            background-image: none;
            background-color: #80699B;
        }
        
        div.LEGEND_POPUP .ttg_org_chart_legend_box_panel div {
            padding-left: 10px;
        }
        
        #legendDiv .ttg_org_chart_legend_box_panel .ttg_org_chart_legend_box_panel_title {
            height: 28px;
        }
        
        div#LEGEND div#legendDiv {
            height: auto;
            min-width: 570px;
            width: auto;           
        }
        
            #legendDiv .ttg_org_chart_legend_box_panel ul { min-height: 150px; }
        
        div#LEGEND.Competitors div#legendDiv {
            width: 430px;
        }
        
        div#mapNodeEditor {
            height: auto !important;
        }
        
        div#LEGEND.Value div#legendDiv div.tool_tip_opp_type {
            display: block;
        }
        
        div#LEGEND.Wallet div#legendDiv div.tool_tip_wallet {
            display: block;
        }
        
        div#LEGEND.Competitors div#legendDiv div.tool_tip_opp_type, 
        div#LEGEND.Wallet div#legendDiv div.tool_tip_opp_type {
            display: none;
        }
        
        div#LEGEND.Competitors div#legendDiv div.tool_tip_wallet, 
        div#LEGEND.Value div#legendDiv div.tool_tip_wallet {
            display: none;
        }
        
        .oppMapTitle .unmapped_alert {
            clear: both;
            color: #FF0000;
            font-style: italic;
            height: 30px;
            line-height: 250%;
            white-space: nowrap;
        }
        
        .unmapped_alert .unmapped {
            vertical-align: text-bottom;
            cursor: pointer;
        }
        
        TABLE.opportunities TR TD.multiline,
        td.multiline {
            background: url('{!URLFOR($Resource.DMAPP__ttgomjs, '/ttg/graph/feimages/icon_legend.png')}') left center no-repeat;
            padding-left: 30px;
        }
        table#superGrid tr.parent td.rowName span.unitname,
        table#superGrid tr.childless-parent td.rowName span.unitname {
            display: block;
            float: left;
            padding-left: 20px;
            overflow: hidden;
            max-width: 300px;
            text-overflow: ellipsis;
        }

        div.unmappedprodsection {
            margin-top: 10px;
        }
        
        span.portfoliototals {
            float: left;
            font-weight: bold;
            font-size: 1.2em;
        }
        
        td#totals {
            background-color: #E5EAF0;
        }
        
        .unmapsolname {
            display: block;
            line-height: 150%;
            padding-bottom: 5px;
        }
        .unmapsolname img {
            margin-left: 5px;
            vertical-align: text-bottom;
        }
        
        #unmappedopptable td {
            line-height: 150%;
            vertical-align: top;
        }
        
        h4.unmapped_alert {
            background: url('{!URLFOR($Resource.DMAPP__TAM, '/images/icon_link_alert.png')}') left center no-repeat;
            padding-left: 20px;
            cursor: pointer;
        }
        
        table#superGrid tr.totals td.rowName, td.cell {
            cursor: default;
        }
                
        span.unmapsolname {
            background: url('{!URLFOR($Resource.DMAPP__TAM, '/images/icon_add_solution.png')}') left center no-repeat;
            padding-left: 20px;
            cursor: pointer;
        }
        
        .progressupdate {
            color: #999999;
            font-style: italic;
            padding: 20px 0 10px;
        }
        
        table.opportunities table.innertable tr td {
            border: medium none;
            font-size: 100%;
            padding: 0;
        }
        
        div.tabMainContainerInner {
            max-height: 450px;
            overflow-y: auto;
        }
        
        TABLE#superGrid TR TD.rowName span.ACCOUNTNAME {
            clear: both;
            color: #C0C0C0;
            display: block;
            font-size: 10px;
            font-style: italic;
            padding-right: 10px;
            vertical-align: text-top;
            margin-left: 5px;
            text-align: left;
        }
        
        TABLE#superGrid TR.level0 TD.rowName span.ACCOUNTNAME {
            padding-left: 15px;
        }
        
        div#sideSubsSection.accordionSection {
            max-height: 380px;
            overflow-y: auto;
        }
        
        div#contactSidePanelDiv {
            z-index: 1002;
        }
        
        div#sidePanelDiv {
            z-index: 1004;
        }
        
        div.ttg-oc-dragging-helper {
            z-index: 1003;
        }
        
        div.node div.node_contact {
            z-index: 1003;
        }     
        
        div.node div.attributes {
            z-index: 1004;
        }          
        
        div.mini_clicker_container {
            z-index: 1005 !important;
        } 
        
        DIV.DLGTARGET {
            display: inline-block;
            float: right;
            text-align: right;
            width: 100%;
            padding: 10px 0;
        }
        
        span.icon-svg_app_target {
            background-image: url('{!URLFOR($Resource.DMAPP__ValueMap, 'icon_targeted.png')}');
            background-position: center center;
            background-repeat: no-repeat;
            padding: 8px;               
        }
        
        span.icon-svg_app_target.white {
            background-image: url('{!URLFOR($Resource.DMAPP__ValueMap, 'icon_targeted_white.png')}');
            background-position: center center;
            background-repeat: no-repeat;
            padding: 8px;               
        }

        TABLE#QUESTIONS TD {
            padding-right: 20px;
        }

        .solution_info {
            background-image: url('{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/graph/feimages/icon_info.png')}');
            width: 12px;
            height: 12px;
			float: right;
			display: block;
        }

	        .solution_icon {
	            margin-top: -5px;
				margin-right: -5px;
	        }
			
			/* firefox conditional CSS */
			@-moz-document url-prefix() { 
		        .solution_icon {
		            margin-top: -20px;
					margin-right: -5px;
		        }
			}
        
        .dmsegtooltip {
            position: absolute;
        }

        .dropdown-relative {
            margin-top: -5px !important;
            margin-left: -55px !important;
        }
    
        .dropdown .dropdown-menu,
        .dropdown .dropdown-panel {
            min-width: 90px !important;
        }
        
        div#outerDiv div#legendDiv {
            min-width: 715px;
            width: auto;
        }
                
        /* Restores AJAX spinner size to normal (AMOF-813) */
        .spinner {
            height: auto;
            width: auto;
        }
        
        /* IE9/10 forgets to rerender box-shadow (AMOF-875) */
        div#sidePanelDiv:after, div#contactSidePanelDiv:after { content: ''; }
        
        /* Adds spacing to the Create and Cancel buttons on the Strategy Map in IE10 (AMOF-859) */
        .ie10 .createNewMapDialog .ui-button { margin-right: 5px; }
                
        /* New Legend Styling */
        div#LEGEND.Competitors div#legendDiv {
            min-width: 440px;
            width: 440px;
        }
        
        DIV#LEGEND IMG#LEGENDCLOSER {
            position: absolute;
            right: 5px;
            top: 5px;
            z-index: 100;
        }
               
        .contactTabClosed{
            display:none !important;
        }
        
        
        /* ADDS SPACING AND CORRECTS SIZE OF COACH TEXT IN POL MAP (AMOF-1208) */       
        div.side_panel_rule_advice {
            margin-bottom: 10px;
        }
        
        #sidePanelTabContainer, #contactsSidePanelTabContainer {
            font-size: 11px;
        }

        .sidePanelTabContainerCollapsed{
            height:30px !important;
        }
        
        .hideTab{
            display:none;
            overflow-x:hidden;
            overflow-y:hidden;
            padding: 0em 0em !important;
            height:0px !important;
        }
        
        #reapplyFiltersButton {
            left: 30px !important;
        }
        
        div#buyingroleedit_chosen { width: 150px !important; }
        
        ul.ui-autocomplete { z-index: 9999999 !important; }
        
        div.tasZoomControl { z-index: 8 !important; }        
        
        span.buttons  .plan_unit_btn{
            background: transparent url('{!URLFOR($Resource.DMAPP__TAM, 'images/icon_new_tab.png')}') ;
            background-repeat: no-repeat;
            background-size: 12px 12px;
            background-position: center !important;
            float: left;
            margin-right: 5px;
            height: 18px;
            width: 18px;
            text-indent: -999em;
            position: relative;
            border: 1px solid #CCCCCC;
            border-radius: 4px;
            -moz-border-radius: 4px;
            -webkit-border-radius: 4px;
            cursor: pointer;
        }

        
        div.plan_unit_dropdown{
            background: #FFF;
            border: solid 1px #DDD;
            border: solid 1px rgba(0, 0, 0, .2);
            border-radius: 6px;
            box-shadow: 0 5px 10px rgba(0, 0, 0, .2);
            list-style: none;
            margin: 0;
            max-width: 230px;
            min-width: 160px;
            overflow: auto;
            padding: 0 0 4px;
            float: left;
        }
            
            div.plan_unit_dropdown .plan_unit_list{
                text-align: left;
                color: #000;
                font-weight: bold;
                padding: 0;
                margin: 0;  
            }
            
                .plan_unit_list .plan_unit_list_header{
                    list-style: none;
                    background-color: #DDD;
                    color: black;
                    font-weight: bold;
                    line-height: 18px;
                    padding: 4px 8px;
                    cursor: default !important;
                    margin:0;
                }

                div.plan_unit_dropdown .plan_unit_list_items{
                    line-height: 18px;
                    list-style: none;
                    margin: 0;
                    padding: 0; 
                    cursor: pointer;
                    font-weight: 100;
                    padding: 2px 14px;
                }
                
                div.plan_unit_dropdown .plan_unit_list_items:hover{
                    color:#fff;
                    background-color:#0088cc
                }
            
              
    /*  iPAD PORTRAIT STYLES  */    
    @media only screen 
        and (min-device-width : 768px) 
        and (max-device-width : 1024px) 
        and (orientation : portrait) {
            .salesforce1 #TAS {
                height:1024px !important;
            }

            .salesforce1 div.plan_unit_dropdown{
                max-height: 155px;   
            }

            .salesforce1 DIV#TAS SPAN.filterOther {
                padding-left: 0px !important;
                margin-right: -4px !important;
            }
            
            .salesforce1 DIV#TAS SPAN.filterTitle {
                padding-left: 0px !important;
            }

            .salesforce1 .oppMapBulkImport {
                width: 130px !important;
                margin-right: -10px;
            }
            
            .salesforce1 #oppMapCurrency{
                margin-right: -10px;
            }
            
            .salesforce1 button#bulkImportButton{
                float: none;
            }
            
            .salesforce1 .rowNameContainer, .rowName {
                min-width: 150px !important;
                width: 150px !important;
            }

            .salesforce1 DIV#LEGEND {
                left: 148px;
            }

            .salesforce1 #legendDiv { 
                left: 0; 
            }

            .salesforce1 .intersectionDialogContainer {
                width: 95% !important;
            }

            .salesforce1 div.smartOMHelpLink {
                float: right;
                margin: 0px;
                margin-right: -6px;
            }
            
            /*segmentationDialogContainer*/
            .salesforce1 .segmentationDialogContainer{
                max-width: 758px;
            }
            
            .salesforce1 .intersectionDialogParent{
                left: 20px !important;
                top: 245px !important;
            }
            
            
            /* OPP MAP MAPS  - !important TO OVERWRITE INLINE DIALOG STYING */
            .salesforce1 .S1InsightMap, 
            .salesforce1 .S1PolMap{
                max-width: 758px !important;
                width: 758px !important;
                height: 970px !important;
                max-height: 970px !important;
                left: 0 !important;
                top: 10px !important;
            }
            
            .salesforce1 .S1InsightMap #outerMapDiv{
                width: 730px !important;    
                height: 930px !important;           
            }
            
            .salesforce1 .S1InsightMap #popupMapCanvasDiv{
                width: 730px !important;
                height: 900px !important;           
            
            }
            
            .salesforce1 .S1InsightMap #popupMapCanvas{
                width: 730px !important;
                height: 900px !important;           
            
            }
            
            .salesforce1 .S1PolMap #outerDiv{
                width: 730px !important;    
                height: 930px !important;           
                
            }
            
            .salesforce1 .S1PolMap #popupCanvasDiv{
                width: 730px !important;
                height: 900px !important;           
            
            }
            
            .salesforce1 .S1PolMap #popupCanvas{
                width: 730px !important;
                height: 900px !important;           
            }
            
            .salesforce1 .mapBtn0{
                left: 680px !important;
            }
            
            .salesforce1 .mapBtn1{
                left: 643px !important;             
            }
            
            .salesforce1 .mapBtn2{
                left: 606px !important;
            }

    }
            
        
    @media only screen 
        and (min-device-width : 768px) 
        and (max-device-width : 1024px) 
        and (orientation : landscape) { 
            .salesforce1 #TAS{
                width:100% !important;
                height:100% !important;
            }

            .salesforce1 div.plan_unit_dropdown{
                max-height: 155px;   
            }
            
            .salesforce1 .intersectionDialogParent{
                left: 165px !important;
                top: 245px !important;
            }
                        
            /* OPP MAP MAPS  - !important TO OVERWRITE INLINE DIALOG STYING */
            .salesforce1 .S1InsightMap, 
            .salesforce1 .S1PolMap{
                max-height: 690px !important;
                height: 690px !important;
                width: 1010px !important;
                max-width: 1010px !important;
                left: 3px !important;
                top: 10px !important;
            }
        
            .salesforce1 .S1InsightMap #outerMapDiv{
                width: 990px !important;    
                height: 660px !important;           
            }
            
            .salesforce1 .S1InsightMap #popupMapCanvasDiv{
                width: 980px !important;
                height: 630px !important;           
        
            }
            
            .salesforce1 .S1InsightMap #popupMapCanvas{
                width: 980px !important;
                height: 630px !important;           
        
            }
            
             
            .salesforce1 .S1PolMap #outerDiv{
                width: 990px !important;    
                height: 660px !important;           
                
            }
            
            .salesforce1 .S1PolMap #popupCanvasDiv{
                width: 980px !important;
                height: 630px !important;               
        
            }
            
            .salesforce1 .S1PolMap #popupCanvas{
                width: 980px !important;
                height: 630px !important;               
        
            }

            .salesforce1 .mapBtn0{
                left: 940px !important;
            }
            
            .salesforce1 .mapBtn1{
                left: 903px !important;             
            }
            
            .salesforce1 .mapBtn2{
                left: 866px !important;
            }
            

    }
    
    /* start: OpportunityMapConfiguration.page */
    
/* Contents of this CSS file, were formerly in OpportunityMapConfiguration.page */

/*********************** From TAMSummaryTab ************************/
        /* FIX - PLAN SETTINGS DIALOG smartOMHelplink STYLES WERE BEING OVERWRITTEN BY smartOMTabContainer smartOMHelplink STYLES. */
        .AMCONFIGURATION div.smartOMHelpLink{
            padding: 0px !important;
            margin: 0px !important;
        }
    
        .smartOMPanel {
            top: -16px;
            z-index: 45; /* Needed to make chatter popups display fine on IE7 */
        }

        .smartOMOpportunitySummary {
            font-size: 1.2em;
            margin: 10px 0 15px 15px;
        }
        
        .smartOMOpportunitySummary a {
            text-decoration: none;
        }
        
        .smartOMOpportunitySummary a:hover {
            text-decoration: underline;
        } 
        
        .chatterContainer {
            float: right;
        }
        
        .smartOMTabContainer {
            clear: both;
            float: left;
            width: 100%;
        }
        
        .smartOMLink div.planDetails {
            padding-left: 20px;
            padding-right: 20px;
            width: 40px;
        }
        
        .smartOMLink div.longTitleTab {
            width: 80px;
            padding: 5px 15px;
        }
        
        div.planDetails .smartOMTabInfo, div.longTitleTab .smartOMTabInfo {
            display: none !important;
        }   
        
        .smartOMTab {
            background: #405773 url('{!URLFOR($Resource.DMAPP__SmartOM, 'tabs/bg_nav_off.jpg')}') left top repeat-x;
            border: 1px solid  #374A61;
            border-radius: 5px 5px 0px 0px;
            -moz-border-radius: 5px 5px 0px 0px;
            -webkit-border-radius: 5px 5px 0px 0px;
            bottom: -1px;
            float: left;
            line-height: 1.5em;
            margin-right: 5px;
            padding: 5px 15px;
            position: relative;
            text-align: center;
            color: #FFFFFF;
            text-shadow: 0px -1px 0px rgba(0,0,0,0.8);
            box-shadow: 0 1px 0 rgba(255, 255, 255, 0.3) inset;
        }       
        
        .smartOMTabSelected {
            background: #FFFFFF none !important;
            border-bottom: 1px solid #FFFFFF;
            color:  #374A61;
            text-shadow:0px 1px 0px rgba(255,255,255,0.8);
        }
        .smartOMTab strong {
            display: block;
        }
        .smartOMTab .smartOMTabInfo {
            visibility: visible;
            font-size:0.85em;
            color:#C8D1DA;
        }
        .smartOMTabSelected .smartOMTabInfo {
            visibility: hidden;
        }       
        
        .smartOMLink {
            text-decoration: none;
        }

        .smartOMLink:hover .smartOMTab {
            background: #4A6688 url('{!URLFOR($Resource.DMAPP__SmartOM, 'tabs/bg_nav_hover.jpg')}') left top repeat-x;
            text-decoration: none;
        }           
        
        .smartOMTabContainerBottom {
            background-color:  #374A61;
            clear: both;
            height: 1px;
            margin-bottom: 10px;
        }
        
        div.smartOMBackLink {
            float:left; 
            margin:10px;
        }

            div.smartOMBackLink a {
                float:left;
                display:block;
                text-indent: -999em;
                width:24px;
                height:24px;
                background: url('{!URLFOR($Resource.DMAPP__SmartOM, 'tabs/btn_back_link.png')}') center center no-repeat;  
            }
            
        div.TAMAdminLink {
            float:right;    
            margin: 10px 10px 0 0;
        }
        
        div.TAMAdminLink a {
/*            float:left; */
            display:block;
/*            background: url('{!URLFOR($Resource.DMAPP__TAM, 'images/icon_admin.png')}') left center no-repeat; */
            padding:5px 0px 5px 20px;
            text-decoration:none;
            color:#405773;
            cursor: pointer; 
        }
        
        div.smartOMHelpLink {
            float:right;    
            margin:10px;
        }
        
        div.smartOMHelpLink a {
            float:left;
            display:block;
            background: url('{!URLFOR($Resource.DMAPP__SmartOM, 'tabs/icon_help.png')}') left center no-repeat;
            padding:5px 0px 5px 20px;
            text-decoration:none;
            color:#405773;
            cursor: pointer; 
        }        
        
        div.smartOMPPTLink {
            float:right;    
            margin:10px;
        }
        
        div.smartOMPPTLink a {
            float:left;
            display:block;
            background: url('{!URLFOR($Resource.DMAPP__SmartOM, 'tabs/icon_ppt.png')}') left center no-repeat;
            padding:5px 0;
            text-decoration:none;
            color:#405773;
            cursor: pointer;
            width: 16px;
            height: 16px;
        }
        
        
        @media all and (min-device-width: 768px) and (max-device-width : 1024px) {
            div.TAMAdminLink {
                float:right;    
                margin:0px;
            }        
            
            div.smartOMHelpLink {
                float:right;    
                margin:0;
            }        
        }                   
        
        .readOnlyText {
            color: red;
        }       
        
        
/*********************** OpportunityMapConfiguration ************************/
        
        div.AMCONFIGURATION { // height: auto !important; }
        
        DIV.AMCONFIGURATION.ui-tabs .ui-tabs-nav {
            background: url("") repeat scroll 0 0 transparent;
            border-bottom: 1px solid #364861;
            border-radius: 0 0 0 0;
            margin: 0;
            padding: 0.2em 0.2em 0;
        }
        DIV.AMCONFIGURATION .LABEL {
            font-weight: bolder;
        }
        DIV.AMCONFIGURATION .ITEM {
            cursor: pointer;
            font-weight: normal;
            padding: 2px;
            text-overflow: ellipsis;
        }
        DIV.AMCONFIGURATION .ROOTSORTABLE .ITEM {
            border-radius: 4px 4px 4px 4px;
            margin-bottom: 0;
            padding: 4px;
            width: 200px;
            padding-left: 20px;
        }

        DIV.AMCONFIGURATION DIV#AVAILABLESOLUTIONS {
            border: 1px solid #C0C0C0;
            float: left;
            height: 300px;
            overflow: auto;
            overflow-x: hidden; /* Removes horizontal scrollbar for Solutions in Plan Settings (AMOF-812) */
            width: 255px;
        }
        DIV.AMCONFIGURATION DIV#SELECTEDSOLUTIONS {
            border: 1px solid #C0C0C0;
            float: right;
            height: 300px;
            overflow: auto;
            overflow-x: hidden;
            width: 255px;
        }
        DIV.AMCONFIGURATION DIV#ADDUNITS,
        DIV.AMCONFIGURATION DIV#ADDPLANS {
            border: 0 none;
            display: none;
            height: 40px;
            overflow: auto;
            text-align: center;
            width: 100%;
        }
        DIV.AMCONFIGURATION DIV#SELECTEDUNITS,
        DIV.AMCONFIGURATION DIV#SELECTEDPLANS {
            border: 1px solid #C0C0C0;
            height: 300px;
            overflow: auto;
            width: 100%;
            overflow-x:hidden;
        }
        .ROOTSORTABLE {
            min-width: 160px;
        }
        .SORTABLE {
            list-style-type: none;
            margin: 0;
            padding: 0;
        }
        .SORTABLE li {
            margin: 4px;
            padding: 3px;
        }
        .AMCONFIGURATION .AVAILABLE {
            background-color: #FCEFA1;
            border: 1px solid #FFCC00;
            display: inline-block;
        }
        
        .AMCONFIGURATION .SELECTED.TARGETED {
            background-color: #AABD68;
            border: 1px solid #8CA23E;
        }
         
        .AMCONFIGURATION .SELECTED {
            background-color: #A0B5CA;
            border: 1px solid #5C7AA4;
            color: #363636;
            display: inline-block;
        }

        .AMCONFIGURATION .UNITSELECTED {
            border: 0px solid #5C7AA4;
            color: #60758A;
            display: inline-block;
            font-weight: bolder;
        }


        .AMCONFIGURATION .UNITAVAILABLE {
            border: 0px solid #FFCC00;
            display: inline-block;
            font-weight: bolder;
            color: orange;
        }

        DIV#SELECTEDUNITS ul,
        DIV#SELECTEDPLANS ul {
            list-style: none outside none;
            margin: 0 !important;
            padding: 0 !important;
        }
        DIV#SELECTEDUNITS li,
        DIV#SELECTEDPLANS li {
            border-bottom: 1px solid #CCCCCC;
            margin: 0;
            padding: 5px 0;
            position: relative;
        }
        DIV#SELECTEDUNITS li ul,
        DIV#SELECTEDPLANS li ul {
            margin: 0 !important;
            padding: 0 !important;
        }
        DIV#SELECTEDUNITS li li,
        DIV#SELECTEDPLANS li li {
            border-bottom: 0 solid #CCCCCC;
            border-top: 1px dashed #CCCCCC;
            margin: 10px 0 0;
            padding-left: 20px;
        }
        UL#ROOTUNITSORTING,
        UL#ROOTPLANSORTING {
            padding-left: 2px;
        }
        UL#ROOTUNITSORTING UL,
        UL#ROOTPLANSORTING UL {
            padding-left: 2px;
        }
        UL#ROOTUNITSORTING LI.ui-state-highlight,
        UL#ROOTPLANSORTING LI.ui-state-highlight {
            height: 20px;
        }
        UL#ROOTUNITSORTING .SELECTED,
        UL#ROOTPLANSORTING .SELECTED {
            background-color: transparent;
            border: 0 solid white;
            color: #60758A;
            font-weight: bolder;
        }
        UL#ROOTUNITSORTING .AVAILABLE,
        UL#ROOTPLANSORTING .AVAILABLE {
            background-color: transparent;
            border: 0 solid white;
            color: orange;
            font-weight: bolder;
        }
        UL#ROOTUNITSORTING A,
        UL#ROOTPLANSORTING A {
            padding-left: 4px;
            padding-right: 4px;
        }
        UL#ROOTUNITSORTING .ACCOUNTNAME {
            clear: both;
            color: #C0C0C0;
            display: block;
            font-size: 10px;
            font-style: italic;
            padding-right: 10px;
            vertical-align: text-top;
        }
        UL#ROOTUNITSORTING SPAN.TOPLEVEL {
            color: #364861;
        }
        SPAN.EDITUNITLABEL {
            display: inline-block;
            font-weight: bolder;
            width: 60px;
        }
        A#ADDUNITLINK {
            cursor: pointer;
        }
        DIV.AMCONFIGURATION DIV#ADDUSER,
        DIV.AMCONFIGURATION DIV#ADDPLAN {
            display: none;
        }
        DIV.AMCONFIGURATION .del_link {
            background: url('{!URLFOR($Resource.DMAPP__TAM, 'images/icon_delete.png')}') no-repeat scroll left top transparent;
            cursor: pointer;
            display: block;
            float: left;
            height: 16px;
            margin: 0;
            text-decoration: none;
            text-indent: -999em;
            width: 16px;
        }
        DIV.AMCONFIGURATION .OPPORTUNITYCOUNT {
            background: url("{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/orgchart/images/icon_selected.png')}") no-repeat scroll center center transparent;
            background-color: #FFFFFF;
            border-radius: 3px 3px 3px 3px;
            color: transparent;
            display: block;
            float: right;
            height: 16px;
            line-height: 16px;
            margin-left: 5px;
            margin-top: 0;
            position: relative;
            text-align: center;
            width: 16px;
        }
        DIV.AMCONFIGURATION .UNITOPPORTUNITYCOUNT {
            background: url("{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/orgchart/images/icon_selected.png')}") no-repeat scroll center center transparent;
            background-color: #CBD5E2;
            border-radius: 3px 3px 3px 3px;
            color: transparent;
            display: block;
            float: left;
            height: 16px;
            line-height: 16px;
            margin-left: 5px;
            margin-top: 2px;
            position: relative;
            text-align: center;
            width: 16px;
        }
        DIV.AMCONFIGURATION .UNITOPPORTUNITYCOUNT.UNITACCOUNTTYPE {
            background: none;
            background-color: #CBD5E2;
            color: black;
        }
        SPAN.LOCK {
            float: right;
            position: fixed;
        }
        SPAN.UNLOCK {
            float: right;
            position: fixed;
        }
        .UNITSORTABLE a.EDIT {
            background: url('{!URLFOR($Resource.DMAPP__DecisionCriteria, 'icon_edit_criteria.png')}') left top no-repeat;
            height: 16px;
            position: absolute;
            right: 31px;
            text-indent: -999em;
            top: 5px;
            width: 16px;
        }
        .UNITSORTABLE a.DELETE,
        .PLANSORTABLE a.DELETE {
            background: url('{!URLFOR($Resource.DMAPP__TAM, 'images/icon_delete.png')}') left top no-repeat;
            height: 16px;
            position: absolute;
            right: 5px;
            text-indent: -999em;
            top: 5px;
            width: 16px;
        }
        .UNITSORTABLE a.ADD {
            background: url('{!URLFOR($Resource.DMAPP__TAM, 'images/icon_add_task.png')}') left top no-repeat;
            height: 16px;
            position: absolute;
            right: 57px;
            text-indent: -999em;
            top: 5px;
            width: 16px;
        }
        span.UNITNAME {
            float: left;
            line-height: 20px;
            margin-right: 10px;
            padding-left: 5px;
            max-width: 400px;
            display: inline-block;
            text-overflow: ellipsis;
            overflow: hidden;
            background-color: white;
            margin-right: 35px;
        }

        #SELECTEDUNITS span.UNITNAME {
            margin-left: 35px;
            margin-right: 0px;
        }

        SPAN.LINE SPAN.PARENTUNITNAME {
            margin-left: 0px;
        }

        span.PLANNAME {
            line-height: 20px;
            margin-right: 10px;
            padding-left: 5px;
            max-width: 400px;
            display: inline-block;
            text-overflow: ellipsis;
            overflow: hidden;
            background-color: white;
            margin-left: 5px;
            white-space: nowrap;
        }

        UL#ROOTUNITSORTING .ACCOUNTNAME,
        UL#ROOTPLANSORTING .PLANOWNERNAME {
            margin-left: 40px;
        }
        table.DATERANGE {
            margin-bottom: 15px;
        }
        table.DATERANGE tr td {
            padding-right: 5px;
        }
        table.DATERANGE tr td img.ui-datepicker-trigger {
            margin: 0 20px 0 3px;
            vertical-align: text-bottom;
        }
        DIV.GENERALTAB SPAN {
            padding-right: 5px;
        }
        DIV.GENERALTAB INPUT {
            margin-right: 5px;
        }
        
        .MAGNIFY {
            background: url('{!URLFOR($Resource.DMAPP__Common, 'images/icon_magnify_glass.png')}') no-repeat;
            width:16px;
            height:16px;
            display: inline-block;
        }
        
        a.MAGNIFY {
            margin-left: 0;
        }
        
        .DRAGABLE {     
            background: url('{!URLFOR($Resource.DMAPP__TAM, 'images/icon_drag.png')}') left center no-repeat;          
            cursor: move;
        }
        
        .UNITDRAGABLE {
            float: left;
            display: inline-block;
        }

        DIV.AMCONFIGURATION LI SPAN.PLANNAME {
            display: inline-block;
            text-overflow: ellipsis;
            overflow: hidden;
        }

        DIV.AMCONFIGURATION LI .del_link {
            float: right;
            margin-top: 4px;
        }
        
        LI SPAN.SOLUTIONNAME {
            width: 140px;
            display: inline-block;
            text-overflow: ellipsis;
            overflow: hidden;
        }
        
        BUTTON.DELETE {
        
            background-color: maroon;
        
        }
        
        DIV.DRAGGINGFORDUMMIES {
            margin-bottom: 10px;
        
        }
        DIV.UNITINFO.DRAGGINGFORDUMMIES {
            white-space: pre-line;
        }

        DIV#USERS {

            overflow-y: auto;
            width: 540px;           
        
        }

        DIV#USERS TABLE {

            width: 520px;

        }
        
        .omcDisableClicks {
            float: right;
            position: absolute;
            
            /* Required for IE 5, 6, 7 */
            zoom: 1; 
                
            /* Theoretically for IE 8 and 9 (more valid) */ 
            /* ...but not required as filter works too */
            /* should come BEFORE filter */
            -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
            
            /* This works in IE 8 and 9 too */
            /* ... but also 5, 6, 7 */
            filter: alpha(opacity=0);
            
            /* Older than Firefox 0.9 */
            -moz-opacity:0;
            
            /* Safari 1.x (pre WebKit!) */
            -khtml-opacity: 0;
            
            /* Modern!
            /* Firefox 0.9+, Safari 2?, Chrome any?
            /* Opera 9+, IE 9+ */
            opacity: 0;

            background-color: white;
        }
        
        div#unitMemberAccountsTableScroll {
            overflow-y: auto;
            height: 190px;
            max-height: 190px;
            margin-bottom: 10px;
        }
        
        table#unitMemberAccountsTable td a.DELETE {
            background: url('{!URLFOR($Resource.DMAPP__TAM, 'images/icon_delete.png')}') center center no-repeat;
            height: 16px;
            cursor: pointer;
            padding: 8px;
            text-indent: -999em;
            width: 16px;
        }
        
        #unitMemberAccountsSlideContainer {
            margin-top: 15px;
        }
        
        #unitMemberAccountsSlideButton {
            background: url("{!URLFOR($Resource.DMAPP__TAM, '/images/icon_arrow_up.png')}") left center no-repeat;
            text-align: left;
            cursor: pointer;
            margin: 15px 0 10px;
            padding-left: 15px;
            text-align: left;           
        }
        
        #unitMemberAccountsSlideButton:hover {
            text-decoration: underline;
        }
        
        #unitMemberAccountsSlideButton.collapsed {
            background: url("{!URLFOR($Resource.DMAPP__TAM, '/images/icon_arrow_down.png')}") left center no-repeat !important;
        }
        
        #unitMemberAccountsTable {
            border-collapse: collapse;
            border: 1px solid #405773;
            min-width: 320px;
            width: 100%;
        }
        
        #unitMemberAccountsTable th, #unitMemberAccountsTable td {
            padding: 5px;
        }
        
        #unitMemberAccountsTable th {
            background: url('{!URLFOR($Resource.DMAPP__SmartOM, 'tabs/bg_nav_off.jpg')}') repeat-x scroll left top #405773;
            color: white;
        }
        
        #unitMemberAccountsTable tr td a {
            color: #015BA7;
            cursor: pointer;
            text-decoration: underline;
        }
        
        #unitMemberAccountsButtonBar {
            margin: 5px 0px;
        }       
            
/*********************** From SegmentationJS ************************/
        SPAN#SHADOWMAP {
            background-color: #FFFFE0;
            width: 100px;
            height: 100px;
            float: right;
            display: inline-block;
        }

        DIV.UNIT {
            color: #000000;
        }
        
        SPAN.UNITSELECTED {
            background-color: #609060;
            border-radius: 16px;
            box-shadow: 3px 2px 3px 2px #C0C0C0;
            color: #FFFFFF;
        }

        DIV.CHILDBLOCK {
            background-color: #ffffff;
        }

        SPAN.TOGGLENAME {
            overflow: hidden;
            width:4px;
        }
        
        DIV.HEADERBAR {
            background: url('{!URLFOR($Resource.DMAPP__SmartOM, 'tabs/bg_nav_off.jpg')}') repeat-x scroll left top #405773;
        }
        
        div.revenueTargetsTitle {
            padding: 2px 5px 5px 5px;
            font-weight: bold;
            font-size: 1.1em;
        }
        
        #TARGETSTABLE {
            margin-bottom: 5px;
        }
        
        #TARGETSTABLE td {
            padding: 2px 5px 2px 5px;
        }
        
        #TARGETSTABLE tr.totalRevenueTargetRow, #EDITTARGETSTABLE tr.totalRevenueTargetRow {
            font-weight: bold;
        }
        
        #EDITTARGETSTABLE {
            margin-bottom: 5px;
        }
        
        #revenueTargetValidationErrorDiv, #editTargetsDialogErrorMsg, #metricsValidationErrorMsg {
            border: 1px solid #E57F7F;
            color: #CC0000;
            background-color: #F3CBCB;
            border-radius: 4px;
            display: inline;
            margin-left: 10px;
            padding: 3px 5px;
            text-align: center;
            width: 350px;           
        }
        
        #metricsValidationErrorMsg {
            display: block;
            margin: 20px auto auto;
            width: 480px;
        }
        
        /*SPAN#TARGET {
            background-color: #FFFFE0;
            width: 100px;
            height: 100px;
            float: right;
            *display: inline-block;
        }*/
        
        SPAN.TARGET {
            width: 16px;
            height: 16px;
        }
        
        SPAN.TARGET_UNIT {
            display: block;
            float: left;
            position: absolute;     
        }
        
        SPAN.TARGETED {
            background-image: url('{!URLFOR($Resource.DMAPP__ValueMap, 'icon_targeted.png')}');
            background-position: center 6px;
            background-repeat: no-repeat;
            margin: 0 3px;
            padding: 8px;            
        }

        SPAN.UNTARGETED {
            background-image: url('{!URLFOR($Resource.DMAPP__ValueMap, 'icon_untargeted.png')}');
            background-position: center 6px;
            background-repeat: no-repeat;
            margin: 0 3px;
            padding: 8px;               
        }

        SPAN.TARGET_UNIT.PARENT {
            background: url("{!URLFOR($Resource.DMAPP__TAM, '/images/icon_arrow_down.png')}");
            background-position: center 0px;
            background-repeat: no-repeat;
            margin: 0 3px;
            padding: 8px;
        }
        
        span#planCopyNameLabel {
            font-weight: bold;
            margin-right: 5px;
        }
        
        #AMReportsList {
            float: right;
            margin: 13px;
            width: 300px;
        }     
        
        @media only screen 
        and (min-device-width : 768px) 
        and (max-device-width : 1024px)  {
            div.customReportsDropdown {
                margin: 4px 10px 10px 14px !important;
            }                                    
            div#smartOMPPTLink {
                margin: 1px 20px 0 0;
            }
        }
        
        div.customReportsDropdown {
            float: right;
            margin: 14px 10px 10px 14px;
            padding: 1px;   
            cursor: pointer;
            position: relative;
        }   
        
        div.customReportsDropdownContainer {
            background-color: white;
            border: 1px solid #646464;
            padding: 1px;
            position: absolute;
            margin-left: -2px;
            width: 300px;
            bottom: -75px;
            z-index: 50;
            right: 0;
        }   
        
        a.customReportsDropdownOptionLink {
            color: black !important;
            text-decoration: none !important;
            cursor: default !important;
        }
        
        a.customReportsDropdownOptionLink:visited {
            color: black !important;
        }       
        
        a.customReportsDropdownOptionLink:hover {
            background-color: #3399ff !important;
            text-decoration: none !important;
            color: white !important;
        }       
        
        div.customReportsDropdownOption {
            color: black;
            width: 100%;
            text-decoration: none;
            cursor: default;            
        }
        
        div.customReportsDropdownOption:hover {
            background-color: #3399ff;
            text-decoration: none;
            color: white;
        }
        
        #unitMemberAccountsNumberLabel {
            padding: 0px 4px;
        }
        
        .scrolledAutocomplete {
            max-height: 225px;
            overflow-y: auto;       
        }
    /* end: OpportunityMapConfiguration.page */



/*.DRAGABLE{
    z-index: 2000000 !important
}

.ITEM{
    z-index: 2000000 !important
} 

.AVAILABLE{
    z-index: 2000000 !important
}

.ui-sortable-placeholder{
    z-index: 2000000 !important
}

.ROOTSORTABLE{
    z-index: 2000000 !important
}

.AMCONFIGURATION{
    z-index: 2000 !important;
}

#AVAILABLESOLUTIONS{
    z-index: 2000 !important;
}

LI SPAN.SOLUTIONNAME{
    z-index: 2000000 !important
} */        


		#planCopyNameInput {
		    width: 65%;
		}
		
		td.blocked {
			border: 1px solid red;
			background: none repeat scroll 0 0 #f3cbcb;
		}
		
		.blockedMsg {
		    background: none repeat scroll 0 0 #f3cbcb;
		    border: 1px solid red;
		    border-radius: 5px;
		    color: red;
		    display: inline;
		    padding: 2px 5px;
		    position: absolute;
		}
 
    </style>
    
    <c:CustomLabelJSBridge />

    <!-- some images that the code makes use of -->
    <div style="display:none">
    
        <img id="ttg_oc_img_unknown"                                src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/icon_unknown.png')}"/>
        <img id="ttg_oc_img_not_set"                                src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/not_set.gif')}"/>      
        <img id="ttg_oc_img_attention"                              src="{!URLFOR($Resource.ttgomjs, 'ttg/graph/feimages/icon_approved.png')}"/>      
        <img id="ttg_oc_img_grey_x"                                 src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/grey_x.png')}"/>        
        <img id="ttg_oc_img_influences"                             src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/down_alt.png')}"/>      
        <img id="ttg_oc_img_influencedby"                           src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/up_alt.png')}"/>      
        <img id="ttg_oc_img_key_player"                             src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/icon_key_decision.png')}"/>       
        <img id="ttg_oc_influence_drag"                             src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/icon_influence_drag.png')}"/>       
        <img id="ttg_oc_selected"                                   src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/icon_selected.png')}"/>       
    
        <img id="ttg_graph_img_expand"                              src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/icon_expand.png')}"/>       
        <img id="ttg_graph_img_collapse"                            src="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/images/icon_collapse.png')}"/>       
        <img id="ttg_graph_img_loading"                             src="{!URLFOR($Resource.ttgomjs, 'ttg/graph/images/loading_icon.gif')}"/>     
        <img id="ttg_graph_img_open_contact"                        src="{!URLFOR($Resource.ttgomjs, 'ttg/graph/feimages/icon_contact_info.png')}"/>     
        <img id="ttg_graph_img_linkedin"                            src="{!URLFOR($Resource.Assessment, 'common/images/linkedIn.png')}"/>     

        <!--  strategy node type icons -->
        <img id="ttg_maps_img_strategy_goal"                            src="{!URLFOR($Resource.TAM, 'images/icon_goal.png')}"/>
        <img id="ttg_maps_img_strategy_business_driver"                 src="{!URLFOR($Resource.TAM, 'images/icon_business_driver.png')}"/>
        <img id="ttg_maps_img_strategy_initiative"                      src="{!URLFOR($Resource.TAM, 'images/icon_initiative.png')}"/>
        <img id="ttg_maps_img_strategy_csf"                             src="{!URLFOR($Resource.TAM, 'images/icon_csf.png')}"/>
        
        <img id="ttg_maps_img_plus"                                     src="{!URLFOR($Resource.ttgomjs, 'ttg/graph/feimages/icon_drag_add.png')}"/>     
    
        <!--  common map icons  -->
        <img id="ttg_maps_img_node_private"                             src="{!URLFOR($Resource.ttgomjs, 'ttg/maps/images/Icon_Locked_Padlock.png')}"/>
        <img id="ttg_maps_img_node_confirmed"                           src="{!URLFOR($Resource.ttgomjs, 'ttg/maps/images/icon_small_confirmed.png')}"/>
        <img id="ttg_maps_img_node_unconfirmed"                         src="{!URLFOR($Resource.ttgomjs, 'ttg/maps/images/icon_small_unknown.png')}"/>

        <img id="ttg_maps_img_error"                                    src="{!URLFOR($Resource.ttgomjs, 'ttg/maps/images/Icon_Error.png')}"/>
        <img id="ttg_maps_img_project"                                  src="{!URLFOR($Resource.ttgomjs, 'ttg/maps/images/Icon_Project.png')}"/>
        <img id="ttg_maps_img_warning"                                  src="{!URLFOR($Resource.ttgomjs, 'ttg/maps/images/Icon_WarningTriangle.gif')}"/>

        <!-- lor icons -->
        <img id="ttg_maps_img_lor_none"                                 src="{!URLFOR($Resource.TAM, 'images/icon_pie_0.png')}"/>
        <img id="ttg_maps_img_lor_vendor"                               src="{!URLFOR($Resource.TAM, 'images/icon_pie_1.png')}"/>
        <img id="ttg_maps_img_lor_credible"                             src="{!URLFOR($Resource.TAM, 'images/icon_pie_2.png')}"/>
        <img id="ttg_maps_img_lor_problem"                              src="{!URLFOR($Resource.TAM, 'images/icon_pie_3.png')}"/>
        <img id="ttg_maps_img_lor_trusted"                              src="{!URLFOR($Resource.TAM, 'images/icon_pie_4.png')}"/>
        
        <!-- acct types -->
        <img id="ttg_maps_img_type_none"                                src="{!URLFOR($Resource.TAM, 'images/icon_letter_exclamation.png')}"/>
        <img id="ttg_maps_img_type_a"                                   src="{!URLFOR($Resource.TAM, 'images/icon_letter_a.png')}"/>
        <img id="ttg_maps_img_type_b"                                   src="{!URLFOR($Resource.TAM, 'images/icon_letter_b.png')}"/>
        <img id="ttg_maps_img_type_c"                                   src="{!URLFOR($Resource.TAM, 'images/icon_letter_c.png')}"/>
        <img id="ttg_maps_img_type_d"                                   src="{!URLFOR($Resource.TAM, 'images/icon_letter_d.png')}"/>
        
        <!-- wallet icons -->
        <img id="ttg_maps_img_wallet_share"                             src="{!URLFOR($Resource.TAM, 'images/icon_wallet_share.png')}"/>
        <img id="ttg_maps_img_wallet"                                   src="{!URLFOR($Resource.TAM, 'images/icon_wallet.png')}"/>
        <img id="ttg_maps_img_wallet_slider_alt"                        src="{!URLFOR($Resource.TAM, 'images/img_wallet_slider_alt.png')}"/>
        <img id="ttg_maps_img_wallet_slider"                            src="{!URLFOR($Resource.TAM, 'images/img_wallet_slider.png')}"/>
                
        <!-- competitors icons -->
        <img id="ttg_maps_img_comp_other"                                src="{!URLFOR($Resource.TAM, 'images/competitors/comp_msft.png')}"/>
        <img id="ttg_maps_img_comp_msft"                                 src="{!URLFOR($Resource.TAM, 'images/competitors/comp_orcl.png')}"/>
        <img id="ttg_maps_img_comp_orcl"                                 src="{!URLFOR($Resource.TAM, 'images/competitors/comp_other.png')}"/>
        <img id="ttg_maps_img_comp_sap"                                  src="{!URLFOR($Resource.TAM, 'images/competitors/comp_sap.png')}"/>
        
    </div>
    <div id="dialogSpinner"></div>
    
    <!--[if lt IE 9]>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/lib/ie.js')}"/> 
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/lib/json2.js')}"/> 
    <!--[endif]-->
 
    <script>

    var $j = jQuery.noConflict();
        
    $j.ajaxSetup({
        jsonp: null,
        jsonpCallback: null,
        async: true
    });
    
    jQuery.fn.addBack = function (selector) {
         return this.add(selector == null ? 
          this.prevObject : this.prevObject.filter(selector));
    }

    </script>
    <script src="{!URLFOR($Resource.OpportunityMapConfiguration)}"></script>

    <apex:includeScript value="{!URLFOR($Resource.DMAPP__prefix)}"/>

    <apex:includeScript value="{!URLFOR($Resource.DMAPP__ftk, 'forcetk.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__excanvas)}"/> 
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__Raphael, 'raphael-min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__Raphael, 'rgbcolor.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__Raphael, 'canvg.js')}"/>    

    <!-- l10n data -->
    <apex:includeScript value="{!$Resource.DMAPP__l10njs}"/>
    
    <!-- Latest version of Highcharts handles IE8's CSS limitations (DMPS-1068) -->
    <apex:includeScript value="{! URLFOR($Resource.ttgomjs, 'ttg/lib/highcharts-3.0.9.js') }" /> 
  
<!-- 
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/lib/modernizr.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/lib/jquery-ui-touch-patch.js')}"/> 
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/lib/ttgutils.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/lib/simple_context.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/lib/entity_editor.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/lib/simple_printer.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/lib/ttgservice.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/simple_events.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/graph.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/graph_layout_config.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/graph_layout.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/base_renderer.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/graph_renderer.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/graph_updater.js')}"/>    
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/graphic_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/add_node_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/zoom_in_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/zoom_out_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/zoom_manager.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/pan_manager.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/nav_control.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/contact_menu.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/tappit.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/graph_validator.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/gesture_observer.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/activity_info.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/left_right_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/compass_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/simple_ui.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/add_menu_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/options_menu_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/print_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/trash_bin.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/simple_title.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/chatter_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/empty_message.js')}"/>
    
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/org_chart_node_renderer.js')}"/>   
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/org_chart_node_updater.js')}"/> 
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/edit_contact.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/side_panel_editor.js')}"/>    
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/org_chart_metadata.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/display_graph.js')}"/>  
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/import_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/import_dialog.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/influence_highlighter.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/popup_org_chart.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/create_contact_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/influence_line_renderer.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/add_contact_menu_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/show_influences_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/show_owners_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/show_legend_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/legend_box.js')}"/>
    
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/lib/DMServiceImpl.js')}"/> 
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/graph2.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/graph_layout2.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/channel_layout.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/graph_layout3.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/graph_renderer2.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/graph/js/graph_renderer3.js')}"/>
        
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/map_metadata.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/map_node_renderer.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/map_node_updater.js')}"/>      
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/map.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/map_node_editor.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/new_node_dnd.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/popup_map.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/create_map_dialog.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/map_selector.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/select_plan_opp.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/import_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/show_hide_private_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/show_hide_solutions_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/import_dialog.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/importer.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/exporter.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/renamer.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/maps/js/deleter.js')}"/>
    
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/synthetic_node_renderer.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/create_synthetic_node_button.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/contact_subs_side_panel.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/subs_node_renderer.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/orgchart/js/subs_bench_manager.js')}"/>
    
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/search-widget/searchWidgetController.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/search-widget/searchWidgetModel.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/search-widget/searchWidgetRenderer.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/search-widget/searchWidgetDataExtractor.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.ttgomjs, 'ttg/lib/highcharts.js')}"/>-->


     <apex:includeScript value="{!URLFOR($Resource.DMAPP__ttgomjs, 'ttg/alljs.js')}"/>

    <!--  This plugin is from the good people at ISOCRA consulting, thanks -->    
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__ttgomjs, 'jquery.tablednd.0.7.min.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__Common, 'js/util.js')}"/>


    
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__Underscore, 'underscore-min.js')}"/>  

    <apex:includeScript value="{!URLFOR($Resource.DMAPP__CoachMe, 'new_coach/parser.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__CoachMe, 'new_coach/engine.js')}"/>
    <apex:includeScript value="{!URLFOR($Resource.DMAPP__CoachMe, 'new_coach/coach_manager.js')}"/>
    <apex:include pageName="DMAPP__AMPoliticalMapCoachRules"/>
        
    <c:SegmentationJS />
    <apex:include pageName="DMAPP__OpportunityMapDialog" />
    <apex:include pageName="DMAPP__OpportunityMapBulkImportDialog" />
    <apex:include pageName="DMAPP__CRUD" />
    <apex:include pageName="DMAPP__UnMappedOppLineDialog" />

    <script>
        var ttg = ttg || {};        
        ttg.pre_fetch = ttg.pre_fetch || {};        
        ttg.pre_fetch['DMAPP.TAMStandardController.getOpportunityMap'] = '{!JSENCODE(preFetchOpportunityMap)}';
                
    </script>

    <apex:include pageName="DMAPP__JSRemoting" />
        
    <div id="TAS" >
        <apex:include pageName="DMAPP__TAMSummaryTab"/> 

        <div class="clearer"></div>
               
        <div class="superGridContainer">
              
              <div class="oppMapHeader">               
                <div class="oppMapTitle">
                    <h2>Opportunity Map</h2>
                    <br/>
                    <h4 style="display: none;" class="unmapped_alert">Not all opportunities are fully mapped to solutions</h4>
                </div>
                
                <div id='LEGEND'><img id='LEGENDTOGGLER' src="{!URLFOR($Resource.ttgomjs, '/ttg/graph/feimages/icon_legend.png')}"/></div>
                
                <div class="oppMapFilters">
                    <form action="#">
                        <div class="formItem">
                            <label for="oppMapField">View:</label>
                            <select class="customSelect" id="oppMapField">
                                <option>Value</option>
                                <option>Wallet</option>
                                <option>Competitors</option>
                            </select>
                            <select class="customSelect smallSelect" id="oppMapCurrency">
                            </select>
                        </div>
                        
                        <div class="formItem">
                            <label for="oppMapFilterBy">Opportunities:</label>
                            <select class="customSelect" id="oppMapFilterBy">
                                <option value="0">All</option>
                                <option value="1">Targets</option>
                            </select>
                        </div>
                        <br class="clear"/>
                    </form>
                </div>
                
                <div class="oppMapBulkImport" style="visibility:hidden;" layout="opportunity">
                    <label id="bulkImportLabel">Import Opportunities</label>
                    <button id="bulkImportButton" value="Import"></button>
                </div>                  
                <br class="clear"/>
            </div>
            
            <div class="tableContainer">
            </div>
        </div>    
        
    </div>

<script>

    /* 
     * Copyright © The TAS Group. All rights reserved.
     *  
     */    

    // Targets IE10 web browsers
    if (/*@cc_on!@*/false && document.documentMode === 10) {
        document.documentElement.className += ' ie10';
    } 
     
    var ttg = ttg || {};
    ttg.am = ttg.am || {};    
    
    ttg.context.decision_criteria_base =  '{!$Resource.DecisionCriteria}' ;
    ttg.context.orgchartbase =  '{!$Resource.ttgomjs}' ;
    ttg.context.orgId = 'RANDOM_ORG_ID';
    ttg.context.sessionId = '{!JSENCODE($Api.Session_ID)}';
    ttg.context.url = 'RANDOM_URL';
    
    /* OM {! isLicensedForOppManager  } */
    /* PMX {! isLicensedForPoliticalMapExpress  } */
    var spec = { 
        sessionid       : '{!JSENCODE($Api.Session_ID)}',
        hasAM           : {!isLicensedForAccountManager},
        hasOM           : {! OR( isLicensedForOppManager, isLicensedForPoliticalMapExpress ) },
        calledFromAM    : ('{!$CurrentPage.Name}'.indexOf('OpportunityMap') > 0)
    };
    var apilayer = ttg.apiLayer.sfdcDelegate( spec );
    
    jQuery.extend(apilayer, apilayer.am);
    
    ttg.am.renderer = (function(spec) {
    
        var setCompetitorIcon = function(element, attachmentId, url) {
            if(attachmentId) {
                element.css('background', '#FFFFFF url(/servlet/servlet.FileDownload?file=' + attachmentId + ') center center no-repeat');
            }
            else if(url) {
                element.css('background', '#FFFFFF url({!$Resource.CompetitorLogos}/' + url + ') center center no-repeat');
            }
            else {
                element.css('background', '#FFFFFF url({!URLFOR($Resource.TAM, 'images/competitors/comp_other.png')}) center center no-repeat');
            }
        };
        
        var setOurIcon = function(element, attachmentId) {
            if(attachmentId) {
                element.css('background-image', 'url(/servlet/servlet.FileDownload?file=' + attachmentId + ')');
            }
            else {
                element.css('background-image', 'url({!URLFOR($Resource.TAM, 'images/our_logo_default.png')})');
            }
        };

        return {
            setCompetitorIcon   : setCompetitorIcon,
            setOurIcon          : setOurIcon
        };
        
    
    })();
    
    ttg.am.settings = (function() {
    
        var ourCompanyLogoId = null;
        var getOurCompanyLogo = function() {            
            apilayer.getOurCompanyLogo(function(data) {
                if(data) {
                    ourCompanyLogoId = data;
                }                           
            }, function() {}, function() {});           
        };
        
        getOurCompanyLogo();
        
        return {
            getOurCompanyLogoId : function() { return ourCompanyLogoId; }
        }   
    
    })();

    ttg.am.oppmap = (function(spec) {
        
        var api = spec.api;
        var planid = spec.planid;
        var userid = spec.userid;
        var user = spec.user;
        var childnodemargin = 20;
        var maxBlockReasonText = 45;
        var map = null;
        var accountGrouping = spec.accountGrouping;
        var iPad = ttg.isTouchScreen(); //navigator.userAgent.match(/iPad/i) != null; 
        
        var unmappedOppsLines = (function() {
            var length = 0;
            var hashStore = {};
            
            function putAll(arr) {
                if(! arr) { return; }
            
                for(var i = 0; i < arr.length; i++) {
                    put(arr[i]);
                }
            }
            
            function put(object) {
                if(! contains(object)) {
                    length++;
                }
                hashStore[object.lineItemId] = object;
            }
            
            function remove(object) {
                if(contains(object)) {
                    delete hashStore[object.lineItemId];
                    length--;
                }
            }
            
            function removeAll(arr) {
                if(! arr) {return;}
                
                for(var i = 0; i < arr.length; i++) {
                    remove(arr[i]);
                }
            }
            
            function contains(object) {
                return hashStore[object.lineItemId] != null;
            }
            
            function size() {
                return length;
            }
            
            function isEmpty() {
                return size() == 0;
            }
            
            return {
                size: size,
                put: put,
                putAll: putAll,
                remove: remove,
                removeAll: removeAll,
                contains: contains,
                isEmpty: isEmpty 
            };
        })();
        
        var dialog = ttg.am.oppmapdialog( spec );
        var importDialog = ttg.am.oppmapimportdialog( spec );
         
        var view = {value: 'Value', competitor: 'Competitors', wallet: 'Wallet'};
        var currentview = view.value;
        var currentRedenomination = "3";
        
        var targeted = false;
        
        var renderer = ttg.am.renderer;
        
        var cookie = jQuery.cookies.get('ccy_setting');
        if(cookie == null) {
            jQuery.cookies.set('ccy_setting', '3');
        } else {
            currentRedenomination = cookie;
        }
        cookie = jQuery.cookies.get('view_setting');
        if(cookie == null) {
            jQuery.cookies.set('view_setting', view.value);
        } else {
            currentview = cookie;
            jQuery('select#oppMapField').val(cookie);
        }
        cookie = jQuery.cookies.get('target_setting');
        if(cookie == null) {
            jQuery.cookies.set('target_setting', false);
        } else {
            targeted = cookie == true;
            if(targeted) {
                jQuery('select#oppMapFilterBy').val('1');
            } else {
                jQuery('select#oppMapFilterBy').val('0');
            }
        }
        
        function updatePreference(key, val) {
            //console.log(id + ' is opened? ' + open);
            jQuery.cookies.set(key, val);
        }
        
        function changeCurrencyFigures(val) {
            if(map == null) {
                return;
            }
            
            updatePreference('ccy_setting', val);
            currentRedenomination = val;
            doRender(jQuery('table#superGrid'), map);
        }
        
        function changeTargeted(val) {
            if(map == null) {
                return;
            }
            
            updatePreference('target_setting', val);
            targeted = val;
            render(val);
        }
        
        var changeView = function(viewname) {
            if(map == null) {
                return;
            }
            
            updatePreference('view_setting', viewname);
            currentview = viewname;
            doRender(jQuery('table#superGrid'), map);
        }
        
        var working = function() {
        
        }
        
        var complete = function() {
        
        }

        
        /*
        author: Rob Eberhardt
        desc: fix MinWidth for IE6 & IE7
        params: none
        returns: nothing
        notes: cannot yet fix childless elements like INPUT or SELECT
        history:
           2006-11-20 revised for standards-mode compatibility
           2006-11-17 first version
        */
        var fixMinWidthForIE = function () {
           var elems=document.getElementsByTagName("*");
           for(e=0; e<elems.length; e++){
              var eCurStyle = elems[e].currentStyle;
              var l_minWidth = (eCurStyle.minWidth) ? eCurStyle.minWidth : eCurStyle.getAttribute("min-width"); //IE7 : IE6
              if(l_minWidth && l_minWidth != 'auto'){
                 var shim = document.createElement("DIV");
                 shim.style.cssText = 'margin:0 !important; padding:0 !important; border:0 !important; line-height:0 !important; height:0 !important; BACKGROUND:RED;';
                 shim.style.width = l_minWidth;
                 shim.appendChild(document.createElement("&nbsp;"));
                 if(elems[e].canHaveChildren){
                    elems[e].appendChild(shim);
                 }else{
                    //??
                 }
              }
           }
        }
        
        var renderComplete = function(table) {
        
                function getChildren(row) {
                    var children = [], level = row.attr('data-level');
                    while(row.next().attr('data-level') > level) {
                         children.push(row.next());
                         row = row.next();
                    }
                    return children;
                }

                table.find('.parent').on('click', function() {
                    var thems = jQuery(this);
                    var unitid = thems.attr('unitid');
                    thems.toggleClass("collapsed");
                    thems.toggleClass('final_row');
                    var collapsed = thems.hasClass("collapsed");
                    if(collapsed) {
                        thems.addClass('final_row');
                        thems.attr('closed', 'closed');
                        jQuery.cookies.set('UNIT_' + unitid, true);
                    } else {
                        thems.removeAttr('closed');
                        jQuery.cookies.set('UNIT_' + unitid, false);
                    }
                    
                    var children = getChildren(thems);
                    var currLevel = (thems.attr('data-level') * 1) + 1;
                    var ignoring = false;
                    var firstpass = true;
                    
                    jQuery.each(children, function() {
                        if(!collapsed) {
                            if(jQuery(this).attr('data-level') <= currLevel && !firstpass) {//reset when move back up a level ....
                              currLevel = jQuery(this).attr('data-level');
                              ignoring = false;
                              firstpass = true;
                            }
                        
                            if(!ignoring && jQuery(this).attr('closed') == 'closed') {
                               ignoring = true;
                               firstpass = true;
                               currLevel = jQuery(this).attr('data-level');
                            }
                            
                            if(jQuery(this).attr('data-level') > currLevel) {
                               firstpass = false;
                               
                               if(ignoring) {
                                 return true;
                               }
                            }
                        }
                        
                        if(collapsed) {
                            jQuery(this).toggle(false);
                        } else {
                            jQuery(this).toggle(true);
                        }
                    })
                });
                
                <!-- DO COLUMN AND ROW HIGHLIGHTING -->
                table.delegate('td','mouseover mouseleave', function(e) {
                    if (e.type == 'mouseover') {
                        jQuery(this).parent().addClass("hover");
                        jQuery("colgroup").eq(jQuery(this).index()).addClass("hover");
                    }
                    else {
                        jQuery(this).parent().removeClass("hover");
                        jQuery("colgroup").eq(jQuery(this).index()).removeClass("hover");
                    }
                });
            }
        
        var renderHeader = function(oppmap, table) {
            jQuery('<colgroup/>').attr('style','background-color:#FFFFFF !important;').appendTo(table);//for start cell
            jQuery('<colgroup/>').appendTo(table);//for total
            jQuery.each(oppmap.plan.solutions, function(index, solution) {
                jQuery('<colgroup/>').appendTo(table);
            });
            
            var headerrow = jQuery('<tr class="header"/>');
            var sol_array = [];
            jQuery('<th/>').addClass('rowName').appendTo(headerrow);//empty cell
            jQuery('<th class="total"/>').text('Total').appendTo(headerrow);
            jQuery.each(oppmap.plan.solutions, function(index, solution) {
				sol_array.push(solution)
                var soldisplayname = solution.name || '';
                if(soldisplayname.length > 15) {
                    soldisplayname = soldisplayname.substring(0,12) + '...';
                }
                            
                var lv_th = jQuery('<th class="cell"/>')
                             .attr({'ttgid':'solname' + index})
                             .text(soldisplayname);
                                           	
              	var info_icon = jQuery('<div/>')
				              		.addClass('solution_info')
				              		.addClass('solution_icon')
				              		.attr('id', 'NOTEINFOICON_' + index)
				              		.css('visibility', !iPad ? 'visible' : 'hidden')
				              		.appendTo(lv_th);
              
                if(solution.targeted) {
                    jQuery('<span/>')
                        .css('margin-left', '5px')
                        //.addClass('icon-svg_app_key')
                        .addClass('icon-svg_app_target white')
                        .appendTo(lv_th);
                }
                             
                if(solution.active == false) {
                     lv_th.addClass('inactive');
                }
                
                lv_th.appendTo(headerrow);

				if (!iPad) {
            		jQuery(info_icon).tooltip({ delay: 0, showURL: false, bodyHandler: function() { return getHelpInformation(jQuery(this).attr('id'), sol_array); } });
				}

            });

            headerrow = jQuery('<thead/>').append(headerrow);
            
            jQuery(table).append(headerrow);
                    
        }
        
        var renderUnits = function(oppmap, table) {
            var tbod = jQuery('<tbody/>');
            var baseName = 'totals';
            var row = jQuery('<tr class="totals"/>');
            var config = oppmap.plan.config;
            if(oppmap.plan.units.length > 1 && currentview == view.value) {
                tbod.append(row);
            }          
            row.attr({'ttgid': baseName });

            var unitcol = jQuery('<td class="rowName"/>').attr('id', 'totals');
            var unitdiv = jQuery('<div class="rowNameContainer"/>');
            unitcol.append(unitdiv);
            
            var unitname = jQuery('<span class="unitname portfoliototals"/>')
                            .attr('ttgid', 'unitname_' + baseName)
                            .text('Totals');
            unitname.appendTo(unitdiv);
            unitcol.appendTo(row);
            

            
            var total = jQuery('<td class="total"/>')
            var totPot = addRowDetails(total, 'value_potential', {}, {}, 'potential', config, false, baseName)
            var totCurr = addRowDetails(total, 'value_current', {}, {}, 'current', config, false, baseName);
            var totClosed = addRowDetails(total, 'value_won', {}, {}, 'won', config, false, baseName);
            total.appendTo(row);
            
            var portfoliototals = {};
            
            jQuery.each(oppmap.plan.solutions, function(solIndex, solution) {
                var cell = jQuery('<td class="cell"/>').attr('solution', solution.id);
                    var solPot = addUnitCellDetails(cell, 'value_potential', {}, solution, 
                                                   null, 'potential', false, 
                                                   false, config, baseName + '_sol_' + solIndex
                                 );
                    var solCurr = addUnitCellDetails(cell, 'value_current', {}, solution, 
                                                   null, 'current', false, 
                                                   false, config, baseName + '_sol_' + solIndex
                                 );
                    var solClosed = addUnitCellDetails(cell, 'value_won', {}, solution, 
                                                   null, 'won', false, 
                                                   false, config, baseName + '_sol_' + solIndex
                                 );
                cell.appendTo(row);
                
                portfoliototals[solution.id + '-totals-potential'] = {
                   total: 0, count: 0, div: solPot.div, type: 'potential', 
                   baseName: baseName + '_sol_' + solIndex + '_pot'
                };
                portfoliototals[solution.id + '-totals-current'] = {
                   total: 0, count: 0, div: solCurr.div, type: 'current', 
                   baseName: baseName + '_sol_' + solIndex + '_curr'
                };
                portfoliototals[solution.id + '-totals-won'] = {
                   total: 0, count: 0, div: solClosed.div, type: 'won', 
                   baseName: baseName + '_sol_' + solIndex + '_won'
                };
            });

            portfoliototals['totals-potential'] = {total: 0, count: 0, div: totPot.div};
            portfoliototals['totals-current'] = {total: 0, count: 0, div: totCurr.div};
            portfoliototals['totals-won'] = {total: 0, count: 0, div: totClosed.div};
            
            jQuery.each(oppmap.plan.units, function(index, unit) {
                renderUnit(oppmap, unit, tbod, 0, {}, index, portfoliototals);
            });

            //use portfoliototals to render correct data
            for (var prop in portfoliototals) {
                if (portfoliototals.hasOwnProperty(prop)) {
                   var isTotal = true;
                
                    if(portfoliototals[prop].div && portfoliototals[prop].baseName) {
                       portfoliototals[prop].div.attr({'ttgid': portfoliototals[prop].type + '_' + portfoliototals[prop].baseName});
                    }
                    
                    if(isTotal || portfoliototals[prop].total > 0) 
                    {
                        var tots = portfoliototals[prop].total ? getCcyDisplay(portfoliototals[prop].total, config) : '-';
                        
                        portfoliototals[prop].div.append(jQuery('<span class="oppNum"/>')
                                                           .text(portfoliototals[prop].count)
                                                           .attr({'ttgid': 'oppCount_' + 
                                                                   portfoliototals[prop].type + '_' + 
                                                                   portfoliototals[prop].baseName})
                                                      );
                        portfoliototals[prop].div.append(jQuery('<span class="oppAmt"/>')
                                                           .text(tots)
                                                           .attr({'ttgid': 'oppAmt_' + 
                                                                   portfoliototals[prop].type + '_' + 
                                                                   portfoliototals[prop].baseName})
                                                     );
                    }
                }
            }
            
            tbod.appendTo(table);
        }
        
        var renderUnit = function(oppmap, unit, table, depth, parenttotals, index, portfoliototals, parentcollapsed) {
            if(! parenttotals['ttgid']) {
                parenttotals['ttgid'] = 'unit' + index;
            } else {
                parenttotals['ttgid'] += '_' + index;
            }
            var baseName = parenttotals['ttgid'];
            
            var row = jQuery('<tr/>');
            row.attr({'unitid': unit.id, 'ttgid': baseName });
            row.addClass('_row');
            
            var toplevel = depth == 0;
            if(toplevel) {
                if(unit.children && unit.children.length > 0) {
                    row.addClass('parent');
                } else {
                    row.addClass('childless-parent');
                }
            } else {
                row.addClass('child');
                row.attr('style', 'display: table-row;');
                if(unit.children && unit.children.length > 0) {
                    row.addClass('parent');
                }
            }
            row.attr('data-level', depth);
            row.addClass('level' + depth);
            
            //is this unit closed?
            var closed = false;
            if(row.hasClass('parent')) {
                var cookie = jQuery.cookies.get('UNIT_' + unit.id);
                if(cookie == null) {
                    jQuery.cookies.set('UNIT_' + unit.id, false);
                } else {
                    closed = cookie == true;
                }
            }
            
            if(parentcollapsed === true) {
                row.css('display', 'none');
                row.addClass('final_row');
            }
            
            if(closed) {
                row.attr('closed', 'closed');
                row.toggleClass("collapsed");//add collapsed class
                row.toggleClass("final_row");//add final_row class
                parentcollapsed = true;
            }
            
            var unitcol = jQuery('<td class="rowName"/>').attr('id', unit.id);
            var unitdiv = jQuery('<div class="rowNameContainer"/>');

            unitcol.append(unitdiv);
            
            var unitname = jQuery('<span class="unitname"/>')
                            .attr('ttgid', 'unitname_' + baseName)
                            .text(unit.name);
            unitname.appendTo(unitdiv);
            
            jQuery('<span/>')
                .css('margin-left', '5px')
                .css('float', 'left')
                //.addClass('icon-svg_app_key')
                .addClass(unit.targeted ? 'icon-svg_app_target' : null)
                .addClass('targeted')
                .appendTo(unitdiv);
            
            if(! unit.accountName || (unit.accountName && accountGrouping && unit.memberAccounts && unit.memberAccounts.length > 0)) {
                if(accountGrouping && unit.memberAccounts) {
                    /*jQuery('<span/>')
                        .addClass('ACCOUNTNAME')
                        .text('(Multiple Accounts)')   
                        .appendTo(unitdiv);*/
                }
                else {
                    jQuery('<span/>')
                        .addClass('ACCOUNTNAME')
                        .text('(No Access)')   
                        .appendTo(unitdiv);
                }
            }
            else {
                    /*jQuery('<span/>')
                        .addClass('ACCOUNTNAME')
                        .text('(' + unit.accountName + ')')   
                        .appendTo(unitdiv);  */             
            }
            
            var btnspan = jQuery('<span class="buttons"/>');
            
            jQuery('<button class="map" value="strategy"/>')
                    .attr({'id': unit.id, 'ttgid': 'strategymap_' + baseName})
                    .text('Strategy')
                    .click(function() {
                        jQuery(this).removeClass('noStrategy').addClass('strategy');
                                               
                        var newLocation = window.location.href.substring(0, window.location.href.indexOf('apex/')) + 'apex/am_desktop_insight_app?id=' + unit.id  + '&fullscreen=true';

						if((typeof window.sforce != 'undefined') && (window.sforce != null) && (typeof window.sforce.one != 'undefined') && (window.sforce.one != null)) {
							window.sforce.one.navigateToURL(newLocation);
						} else {
							window.location.href = newLocation;
						}
                       	
                        return false;
                    })
                    .appendTo(btnspan)
                    .addClass(unit.hasStrategyMap ? 'strategy':'noStrategy');
                    
                              
            jQuery('<button class="map" value="political"/>')
                    .attr({'id': unit.id, 'ttgid': 'politicalmap_' + baseName})
                    .text('Political')
                    .click(function() {
                        jQuery(this).removeClass('noPolitical').addClass('political');
                        openOrgChart(unit, oppmap);
                        return false;
                    })
                    .appendTo(btnspan)
                    .addClass(unit.mapid ? 'political':'noPolitical');
                    
            //work out unit type
            var type = 'none';
            if(unit.accountType) {
                type = unit.accountType.toLowerCase();
                switch(type) {
                    case 'a':
                    case 'b':
                    case 'c':
                    case 'd':
                        break;
                        
                    default:
                        type = 'none';
                }
            }
            
            // Only display segementation map if it is enabled.
            if (unit.children.length == 0 && "{!IsLicensedForAccountManagerAndIsSegementationMapEnabled}" === "true") {
                jQuery('<button class="map type"/>')
                .attr({'id': unit.id, 'ttgid': 'unittype_' + baseName})
                .text(type)
                .addClass(type)
                .click(function() {
                    openSegmentation(unit, oppmap);
                    return false;
                })
                .appendTo(btnspan);
            }

            btnspan.appendTo(unitdiv);

            createMiniClicker(unit, btnspan, true, lorAttrMetadata, baseName);

            if('{!UnitCustomListEnabled}' === 'true'){
                jQuery('<button class="_map"/>')
                        .attr({'id': 'btn_id_' + unit.id, 'ttgid': 'plan_unit_' + baseName})
                        .text('Plan Unit')
                        .click(function() {
                            openPlanUnitList(this, unitdiv, unit.id);
                            return false;
                        })
                        .appendTo(btnspan)
                        .addClass('plan_unit_btn');
                        btnspan.css('width','120px');
             }
            
            unitcol.appendTo(row);

            jQuery(table).append(row);
            
            var unitTotals = oppmap.plan.unitTotals;
            var tots = oppmap.plan.rowTotals;
            var competitorData = oppmap.plan.competitors;
            var canOpenDialog = true;
            //only childless parents or childless children can be dialog opened ....
            if(unit.children && unit.children.length > 0) {
                canOpenDialog = false;
            }

            var config = oppmap.plan.config;
            var total = jQuery('<td class="total"/>').click(function() {
                return false;//stop toggling behaviour
            });
            
            switch(currentview) {
            
                case view.competitor:
                    var topComp = jQuery('<div class="comp_1"/>');
                    var nextComp = jQuery('<div class="comp_2"/>');
                    var otherComp = jQuery('<div class="comp_3"/>');
                
                    if(toplevel) {
                        parenttotals['total-comp'] = {
                            wallet: 0, topCompDiv: topComp, otherWallet: 0, 
                            nextCompDiv: nextComp, otherCompDiv: otherComp,
                            competitors: {},
                            'baseName': baseName
                        };
                    } else {
                        parenttotals[unit.id + '-total-comp'] = {
                            wallet: 0, topCompDiv: topComp, otherWallet: 0, 
                            nextCompDiv: nextComp, otherCompDiv: otherComp,
                            competitors: {},
                            'baseName': baseName
                        };
                    }

                    total.append(topComp).append(nextComp).append(otherComp);
                break;

                case view.wallet:
                    var totWall = jQuery('<div class="wallet_total"/>');
                    var ourPerc = jQuery('<div class="wallet_slider"/>');
                    var ourWall = jQuery('<div class="wallet_share"/>');

                    if(toplevel) {
                        parenttotals['total-wallet'] = {
                           wallet: 0, walletdiv: totWall, oursize: 0, sharediv: ourWall, 
                           percdiv: ourPerc, 'baseName': baseName
                        };
                    } else {
                        parenttotals[unit.id + '-total-wallet'] = {
                            wallet: 0, walletdiv: totWall, oursize: 0, sharediv: ourWall, 
                            percdiv: ourPerc, 'baseName': baseName
                        };
                    }

                    total.append(totWall).append(ourPerc).append(ourWall);
                break;
                
                default:
                //do values ...
                var totPot = addRowDetails(total, 'value_potential', unit, tots, 'potential', config, canOpenDialog, baseName);
                var totCurr = addRowDetails(total, 'value_current', unit, tots, 'current', config, canOpenDialog, baseName);
                var totClosed = addRowDetails(total, 'value_won', unit, tots, 'won', config, canOpenDialog, baseName);

                if(!canOpenDialog) {
                    if(toplevel) {
                        parenttotals['total-potential'] = {total: 0, count: 0, div: totPot.div, 'type': 'potential', 'baseName': baseName};
                        parenttotals['total-current'] = {total: 0, count: 0, div: totCurr.div, 'type': 'current', 'baseName': baseName};
                        parenttotals['total-closed'] = {total: 0, count: 0, div: totClosed.div, 'type': 'won', 'baseName': baseName};
                    } else {
                        parenttotals[unit.id + 'total-potential'] = {total: 0, count: 0, div: totPot.div, 'type': 'potential', 'baseName': baseName};
                        parenttotals[unit.id + 'total-current'] = {total: 0, count: 0, div: totCurr.div, 'type': 'current', 'baseName': baseName};
                        parenttotals[unit.id + 'total-closed'] = {total: 0, count: 0, div: totClosed.div, 'type': 'won', 'baseName': baseName};
                    }
                } else {
                    //can open so will be either a childless parent or a leaf child
                    if(parenttotals['total-potential']) {
                        parenttotals['total-potential'].total += totPot.amt; 
                        parenttotals['total-potential'].count += totPot.count; 
                    }
                    
                    if(parenttotals['total-current']) {
                        parenttotals['total-current'].total += totCurr.amt; 
                        parenttotals['total-current'].count += totCurr.count; 
                    }
                    
                    if(parenttotals['total-closed']) {
                        parenttotals['total-closed'].total += totClosed.amt; 
                        parenttotals['total-closed'].count += totClosed.count; 
                    }
                    
                    if(parenttotals[unit.parentId + 'total-potential']) {
                        parenttotals[unit.parentId + 'total-potential'].total += totPot.amt;
                        parenttotals[unit.parentId + 'total-potential'].count += totPot.count;
                    }
                    if(parenttotals[unit.parentId + 'total-current']) {
                        parenttotals[unit.parentId + 'total-current'].total += totCurr.amt;
                        parenttotals[unit.parentId + 'total-current'].count += totCurr.count;
                    }
                    if(parenttotals[unit.parentId + 'total-closed']) {
                        parenttotals[unit.parentId + 'total-closed'].total += totClosed.amt;
                        parenttotals[unit.parentId + 'total-closed'].count += totClosed.count;
                    }
                    
                    portfoliototals['totals-potential'].total += totPot.amt;
                    portfoliototals['totals-potential'].count += totPot.count;
                    
                    portfoliototals['totals-current'].total += totCurr.amt;
                    portfoliototals['totals-current'].count += totCurr.count;
                    
                    portfoliototals['totals-won'].total += totClosed.amt;
                    portfoliototals['totals-won'].count += totClosed.count;
                }
            }
            
            total.appendTo(row);
            
            jQuery.each(oppmap.plan.solutions, function(solIndex, solution) {
                var cell = jQuery('<td class="cell"/>').attr('solution', solution.id).attr('unit', unit.id);
                
                //check if blocked
                var blocked = oppmap.plan.blocked[unit.id] && oppmap.plan.blocked[unit.id][solution.id];
                var blockReason = null;
                if(blocked) {
                    blockReason = oppmap.plan.blocked[unit.id][solution.id].reason;
                    if(blockReason.length > maxBlockReasonText) {
                        blockReason = blockReason.substring(0, maxBlockReasonText) + '...';
                    }
                }
                
                switch(currentview) {
                
                    case view.competitor:
                    
                    var compdata = addUnitCompetitorDetails(
                                        cell, unit, solution, competitorData, blocked, blockReason, 
                                        canOpenDialog, baseName + '_sol_' + solIndex
                                   );

                    if(!canOpenDialog) {
                        if(toplevel) {
                             parenttotals[solution.id + '-comp'] = {
                                wallet: 0, topCompDiv: compdata.topCompDiv, otherWallet: 0, 
                                nextCompDiv: compdata.nextCompDiv, otherCompDiv: compdata.otherCompDiv,
                                competitors: {}, 'baseName': baseName + '_sol_' + solIndex
                            };
                        } else {
                             parenttotals[unit.id + '-' + solution.id + '-comp'] = {
                                wallet: 0, topCompDiv: compdata.topCompDiv, otherWallet: 0, 
                                nextCompDiv: compdata.nextCompDiv, otherCompDiv: compdata.otherCompDiv,
                                competitors: {}, 'baseName': baseName + '_sol_' + solIndex
                            };
                        }
                    } else {
                        if(parenttotals[solution.id + '-comp']) {
                            parenttotals[solution.id + '-comp'].wallet += compdata.wallet;
                            parenttotals[solution.id + '-comp'].otherWallet += parseFloat(compdata.otherWallet);

                            //combine competitors
                            combineCompetitors(compdata.competitors, 
                                parenttotals[solution.id + '-comp'].competitors);
                        }
                        if(parenttotals[unit.parentId + '-' + solution.id + '-comp']) {
                            parenttotals[unit.parentId + '-' + solution.id + '-comp'].wallet += compdata.wallet;
                            parenttotals[unit.parentId + '-' + solution.id + '-comp'].otherWallet += parseFloat(compdata.otherWallet);

                            //combine competitors
                            combineCompetitors(compdata.competitors, 
                                parenttotals[unit.parentId + '-' + solution.id + '-comp'].competitors);
                        }
                        if(parenttotals['total-comp']) {
                            parenttotals['total-comp'].otherWallet += compdata.otherWallet;
                            parenttotals['total-comp'].wallet += compdata.wallet;
                            combineCompetitors(compdata.competitors, 
                                parenttotals['total-comp'].competitors);
                        }
                        if(parenttotals[unit.id + '-total-comp']) {
                            parenttotals[unit.id + '-total-comp'].otherWallet += parseFloat(compdata.otherWallet);
                            parenttotals[unit.id + '-total-comp'].wallet += compdata.wallet;
                            combineCompetitors(compdata.competitors, 
                               parenttotals[unit.id + '-total-comp'].competitors);
                        }
                        if(parenttotals[unit.parentId + '-total-comp']) {
                            parenttotals[unit.parentId + '-total-comp'].otherWallet += parseFloat(compdata.otherWallet);
                            parenttotals[unit.parentId + '-total-comp'].wallet += compdata.wallet;
                            combineCompetitors(compdata.competitors, 
                               parenttotals[unit.parentId + '-total-comp'].competitors);
                        }
                    }

                    break;

                    case view.wallet:
                    var walletdata = addUnitWalletDetails(
                                        cell, unit, solution, competitorData, 
                                        blocked, blockReason, config, canOpenDialog, baseName + '_sol_' + solIndex
                                     );

                    if(!canOpenDialog) {
                        if(toplevel) {
                            parenttotals[solution.id + '-wallet'] = {
                                wallet: 0, walletdiv: walletdata.walletdiv, oursize: 0, 
                                sharediv: walletdata.sharediv, percdiv: walletdata.percdiv,
                                'baseName': baseName + '_sol_' + solIndex
                            };
                        } else {
                            parenttotals[unit.id + '-' + solution.id + '-wallet'] = {
                                wallet: 0, walletdiv: walletdata.walletdiv, oursize: 0, 
                                sharediv: walletdata.sharediv, percdiv: walletdata.percdiv,
                                'baseName': baseName + '_sol_' + solIndex
                            };
                        }
                        
                    } else {
                        if(parenttotals['total-wallet']) {
                            parenttotals['total-wallet'].wallet += walletdata.wallet;
                            parenttotals['total-wallet'].oursize += walletdata.oursize;
                        }
                        if(parenttotals[unit.id + '-total-wallet']) {
                            parenttotals[unit.id + '-total-wallet'].wallet += walletdata.wallet;
                            parenttotals[unit.id + '-total-wallet'].oursize += walletdata.oursize;
                        }
                        if(parenttotals[unit.parentId + '-total-wallet']) {
                            parenttotals[unit.parentId + '-total-wallet'].wallet += walletdata.wallet;
                            parenttotals[unit.parentId + '-total-wallet'].oursize += walletdata.oursize;
                        }
                        if(parenttotals[solution.id + '-wallet']) {
                            parenttotals[solution.id + '-wallet'].wallet += walletdata.wallet;
                            parenttotals[solution.id + '-wallet'].oursize += walletdata.oursize;
                        }
                        if(parenttotals[unit.parentId + '-' + solution.id + '-wallet']) {
                            parenttotals[unit.parentId + '-' + solution.id + '-wallet'].wallet += walletdata.wallet;
                            parenttotals[unit.parentId + '-' + solution.id + '-wallet'].oursize += walletdata.oursize;
                        }
                    }
                    
                    break;
                    
                    default:
                    //do values ...
                    
                    if(blocked) {
                        cell.append(
                            jQuery('<div class="blank_info"/>')
                                .attr({'ttgid': 'blank_' + baseName + '_sol_' + solIndex})
                                .click(function() {
                                    dialog.openIntersectionPopup(
                                        unit, solution, 'won', config, 
                                        jQuery('select#oppMapFilterBy').val() == 1
                                    );
                                    return false;
                                })
                                .append(jQuery('<span/>').text(blockReason))
                        );
                        //<div class="blank_info"><span>You are blocked</span></div>
                        //solCurr.div.append(jQuery('<span style="text-align:left; margin-left:0"/>').text(blockReason));
                    }
                    
                    var solPot = addUnitCellDetails(cell, 'value_potential', unit, solution, 
                                                   unitTotals, 'potential', blocked, 
                                                   canOpenDialog, config, baseName + '_sol_' + solIndex
                                 );
                    var solCurr = addUnitCellDetails(cell, 'value_current', unit, solution, 
                                                   unitTotals, 'current', blocked, 
                                                   canOpenDialog, config, baseName + '_sol_' + solIndex
                                 );
                    var solClosed = addUnitCellDetails(cell, 'value_won', unit, solution, 
                                                   unitTotals, 'won', blocked, 
                                                   canOpenDialog, config, baseName + '_sol_' + solIndex
                                 );
    
                    if(!canOpenDialog) {
                        if(toplevel) {
                            parenttotals[solution.id + '-potential'] = {
                               total: 0, count: 0, div: solPot.div, 'type': 'potential', 
                               'baseName': baseName + '_sol_' + solIndex
                            };
                            parenttotals[solution.id + '-current'] = {
                               total: 0, count: 0, div: solCurr.div, 'type': 'current', 
                               'baseName': baseName + '_sol_' + solIndex
                            };
                            parenttotals[solution.id + '-closed'] = {
                               total: 0, count: 0, div: solClosed.div, 'type': 'won', 
                               'baseName': baseName + '_sol_' + solIndex
                            };
                        } else {
                            parenttotals[unit.id + '-' + solution.id + '-potential'] = {
                               total: 0, count: 0, div: solPot.div, 'type': 'potential', 
                               'baseName': baseName + '_sol_' + solIndex
                            };
                            parenttotals[unit.id + '-' + solution.id + '-current'] = {
                               total: 0, count: 0, div: solCurr.div, 'type': 'current', 
                               'baseName': baseName + '_sol_' + solIndex
                            };
                            parenttotals[unit.id + '-' + solution.id + '-closed'] = {
                               total: 0, count: 0, div: solClosed.div, 'type': 'won', 
                               'baseName': baseName + '_sol_' + solIndex
                            };
                        }
                    } else {
                        if(parenttotals[solution.id + '-potential']) { 
                            parenttotals[solution.id + '-potential'].total += solPot.amt; 
                            parenttotals[solution.id + '-potential'].count += solPot.count;
                        }
                        if(parenttotals[solution.id + '-current']) { 
                            parenttotals[solution.id + '-current'].total += solCurr.amt; 
                            parenttotals[solution.id + '-current'].count += solCurr.count;
                        }
                        if(parenttotals[solution.id + '-closed']) { 
                            parenttotals[solution.id + '-closed'].total += solClosed.amt; 
                            parenttotals[solution.id + '-closed'].count += solClosed.count; 
                        }
                        if(parenttotals[unit.parentId + '-' + solution.id + '-potential']) {
                            parenttotals[unit.parentId + '-' + solution.id + '-potential'].total += solPot.amt;
                            parenttotals[unit.parentId + '-' + solution.id + '-potential'].count += solPot.count;
                        }
                        if(parenttotals[unit.parentId + '-' + solution.id + '-current']) {
                            parenttotals[unit.parentId + '-' + solution.id + '-current'].total += solCurr.amt;
                            parenttotals[unit.parentId + '-' + solution.id + '-current'].count += solCurr.count;
                        }
                        if(parenttotals[unit.parentId + '-' + solution.id + '-closed']) {
                            parenttotals[unit.parentId + '-' + solution.id + '-closed'].total += solClosed.amt;
                            parenttotals[unit.parentId + '-' + solution.id + '-closed'].count += solClosed.count;
                        }
                        
                        portfoliototals[solution.id + '-totals-potential'].total += solPot.amt;
                        portfoliototals[solution.id + '-totals-potential'].count += solPot.count;
                        
                        portfoliototals[solution.id + '-totals-current'].total += solCurr.amt;
                        portfoliototals[solution.id + '-totals-current'].count += solCurr.count;
                        
                        portfoliototals[solution.id + '-totals-won'].total += solClosed.amt;
                        portfoliototals[solution.id + '-totals-won'].count += solClosed.count;
                    }
                }
                
                cell.appendTo(row);
            });
            
            depth++;
            if(unit.children) {
                jQuery.each(unit.children, function(_index, child) {
                    parenttotals['ttgid'] = baseName;
                    renderUnit(oppmap, child, table, depth, parenttotals, _index, portfoliototals, parentcollapsed);
                });
            }
            
            if(toplevel) {
                switch(currentview) {
                
                    case view.competitor:
                    renderCompetitorTotals(parenttotals, config);
                    break;
                    
                    case view.wallet:
                    renderWalletTotals(parenttotals, config);
                    break;
                    
                    default:
                    //do values ...
                    renderValueTotals(parenttotals, config);
                }
            }
        }


        function getHelpInformation(id, sol_array) {
            try {
                id=id.substring(id.indexOf('_'));
                var solution_index = id.substring(1);
                return jQuery('<div class="HOVERHELP">').html(sol_array[solution_index].tooltip)
            }
            catch(e) {
                return '';
            }
        }

        function renderValueTotals(parenttotals, config) {
            for (var prop in parenttotals) {
                if (parenttotals.hasOwnProperty(prop)) {
                   var isTotal = (prop.indexOf('total-potential') > -1 || 
                                   prop.indexOf('total-current') > -1 || 
                                   prop.indexOf('total-closed')  > -1 );
                
                    if(parenttotals[prop].div && parenttotals[prop].baseName) {
                       parenttotals[prop].div.attr({'ttgid': parenttotals[prop].type + '_' + parenttotals[prop].baseName});
                    }
                    
                    if(isTotal || parenttotals[prop].total > 0) 
                    {
                        var tots = parenttotals[prop].total ? getCcyDisplay(parenttotals[prop].total, config) : '-';
                        
                        parenttotals[prop].div.append(jQuery('<span class="oppNum"/>')
                                                           .text(parenttotals[prop].count)
                                                           .attr({'ttgid': 'oppCount_' + 
                                                                   parenttotals[prop].type + '_' + 
                                                                   parenttotals[prop].baseName})
                                                      );
                        parenttotals[prop].div.append(jQuery('<span class="oppAmt"/>')
                                                           .text(tots)
                                                           .attr({'ttgid': 'oppAmt_' + 
                                                                   parenttotals[prop].type + '_' + 
                                                                   parenttotals[prop].baseName})
                                                     );
                    }
                }
            }
        }

        function renderWalletTotals(parenttotals, config) {
            for (var prop in parenttotals) {
                if (parenttotals.hasOwnProperty(prop)) {
                   
                    if(parenttotals[prop].walletdiv) {
                        parenttotals[prop].walletdiv.attr({'ttgid': 'wallet_' + parenttotals[prop].baseName});
                    }
                    if(parenttotals[prop].percdiv) {
                        parenttotals[prop].percdiv.attr({'ttgid': 'perc_' + parenttotals[prop].baseName});
                    }
                    if(parenttotals[prop].sharediv) {
                        parenttotals[prop].sharediv.attr({'ttgid': 'share_' + parenttotals[prop].baseName});
                    }
                    
                    if(parenttotals[prop].wallet > 0) {
                        var tots = getCcyDisplay(parenttotals[prop].wallet, config);
                        var share = getCcyDisplay(parenttotals[prop].oursize, config);
                        var perc = Math.round(parenttotals[prop].oursize / parenttotals[prop].wallet * 100) + '%';
                        
                        parenttotals[prop].walletdiv.append(jQuery('<span class="wallet_purse"/>')
                                                                   .text(tots)
                                                                   .attr({'ttgid': 'wallet_' + parenttotals[prop].baseName})
                                                            );
                        
                        var spangraph = jQuery('<span class="slider_graphic"/>');
                        var divgraph = jQuery('<div class="wallet_slider_container"/>')
                                         .append(jQuery('<div class="wallet_slider_value"/>').attr('style', 'width:' + perc));
                        spangraph.append(divgraph);
                        spangraph.append(jQuery('<div class="wallet_slider_percentage"/>')
                                                   .text(perc)
                                                   .attr({'ttgid': 'ourperc_' + parenttotals[prop].baseName})
                                         );
                        parenttotals[prop].percdiv.append(spangraph);
                        
                        var absoluteShare = jQuery('<span class="absolute_share"/>')
                                                   .text(share)
                                                   .attr({'ttgid': 'ourshare_' + parenttotals[prop].baseName});
                        renderer.setOurIcon(absoluteShare, ttg.am.settings.getOurCompanyLogoId()); 
                        parenttotals[prop].sharediv.append(absoluteShare);
                    }
                }
            }
        }

        function renderCompetitorTotals(parenttotals, config) {
            for (var prop in parenttotals) {
                if (parenttotals.hasOwnProperty(prop)) {
                
                   if(parenttotals[prop].topCompDiv) {
                       parenttotals[prop].topCompDiv.attr('ttgid', 'topcomp_' + parenttotals[prop].baseName)
                   }
                   if(parenttotals[prop].nextCompDiv) {
                        parenttotals[prop].nextCompDiv.attr('ttgid', 'nextcomp_' + parenttotals[prop].baseName);
                   }
                   if(parenttotals[prop].otherCompDiv) {
                        parenttotals[prop].otherCompDiv.attr('ttgid', 'othershare_' + parenttotals[prop].baseName);
                   }
                   
                   if(parenttotals[prop].wallet > 0) {
                        var otherperc = Math.round(parenttotals[prop].otherWallet / parenttotals[prop].wallet * 100);
                        addCompDetail(parenttotals[prop].otherCompDiv, '', otherperc, 'othershare', null, null, parenttotals[prop].baseName);
        
                        //find top 2 competitors in list
                        var lv_comps = parenttotals[prop].competitors;
                        var lv_topComp = null;
                        var lv_nextComp = null;
        
                        for (var innerprop in lv_comps) {
                            var lv_comp = lv_comps[innerprop];
                            
                            if(lv_comp == null || ! lv_comp.ticker) {
                                continue;
                            }
                            
                            if(lv_topComp == null) {
                                lv_topComp = lv_comp;
                            } else if(lv_nextComp == null) {
                                if(lv_comp.walletsize > lv_topComp.walletsize) {
                                    lv_nextComp = lv_topComp;
                                    lv_topComp = lv_comp;
                                } else {
                                    lv_nextComp = lv_comp;
                                }
                            } else {
                                if(lv_comp.walletsize > lv_topComp.walletsize) {
                                    lv_nextComp = lv_topComp;
                                    lv_topComp = lv_comp;
                                } else if(lv_comp.walletsize > lv_nextComp.walletsize) {
                                    lv_nextComp = lv_comp;
                                }
                            }
                        }
        
                        if(lv_topComp) {
                            otherperc = parenttotals[prop].wallet ? 
                                            Math.round(lv_topComp.walletsize / parenttotals[prop].wallet * 100) : 0;
                            addCompDetail(
                                parenttotals[prop].topCompDiv, lv_topComp.ticker, otherperc, 'topComp', 
                                lv_topComp.attachedIconId, lv_topComp.logo, parenttotals[prop].baseName
                            );
                        }
        
                        if(lv_nextComp) {
                            otherperc = parenttotals[prop].wallet ? 
                                            Math.round(lv_nextComp.walletsize / parenttotals[prop].wallet * 100) : 0;
                            addCompDetail(
                               parenttotals[prop].nextCompDiv, lv_nextComp.ticker, otherperc, 'nextComp', 
                               lv_nextComp.attachedIconId, lv_nextComp.logo, parenttotals[prop].baseName
                            );
                        }
                    }
                }
            }
        }

        function createMetaData() {
            if(map == null) {
                return null;
            }
            var lorMetadata = {
                displayName     :   'Level of Relationship',
                name            :   'level_of_relationship',
                values          :   [],
                images          :   {
                    none                :   "{!URLFOR($Resource.TAM, 'images/icon_pie_0.png')}"
                },
                callback        :   function(unit, unitId, newVal) {
                    api.saveUnitLOR(unitId,newVal, function() {
                        
                        var btn = jQuery('button#' + unitId + '.lor');
                        //remove all lorclass ...
                        btn.removeClass('lor0 lor1 lor2 lor3 lor4');
                        
                        for(var i = 0; i  < lorAttrMetadata.values.length; i++) {
                            if(lorAttrMetadata.values[i].name == newVal) {
                                btn.addClass(lorAttrMetadata.values[i].css);
                                break;
                            }
                        }
                        
                        unit.level_of_relationship = newVal;
                        
                    }, function() {});
                }
            };
            var md = map.plan.metadata;
            jQuery.each(md.attributedefinitions.attributedefinition, function(index, data) {
                if(data.type == 'level_of_relationship') {
                    
                    jQuery.each(data.attributevalues.attributevalue, function(jdx, attr) {
                        lorMetadata.values[lorMetadata.values.length] = {
                            name            : attr.name,
                            displayValue    : attr.displayvalue,
                            displayName     : attr.displayname
                        };
                    });
                    return false;
                }
            });
            
            if(lorMetadata.values.length > 0) {
                switch(lorMetadata.values.length) {
                case 1:
                    lorMetadata.values[0].css = 'lor4';
                    lorMetadata.images[lorMetadata.values[0].name] = "{!URLFOR($Resource.TAM, 'images/icon_pie_4.png')}";
                    break;
                case 2:
                    lorMetadata.values[0].css = 'lor2';
                    lorMetadata.images[lorMetadata.values[0].name] = "{!URLFOR($Resource.TAM, 'images/icon_pie_2.png')}";                
                    lorMetadata.values[1].css = 'lor4';
                    lorMetadata.images[lorMetadata.values[1].name] = "{!URLFOR($Resource.TAM, 'images/icon_pie_4.png')}";
                    break;
                case 3:
                    lorMetadata.values[0].css = 'lor2';
                    lorMetadata.images[lorMetadata.values[0].name] = "{!URLFOR($Resource.TAM, 'images/icon_pie_2.png')}";                
                    lorMetadata.values[1].css = 'lor3';
                    lorMetadata.images[lorMetadata.values[1].name] = "{!URLFOR($Resource.TAM, 'images/icon_pie_3.png')}";
                    lorMetadata.values[2].css = 'lor4';
                    lorMetadata.images[lorMetadata.values[2].name] = "{!URLFOR($Resource.TAM, 'images/icon_pie_4.png')}";
                    break;
                case 4:
                    lorMetadata.values[0].css = 'lor1';
                    lorMetadata.images[lorMetadata.values[0].name] = "{!URLFOR($Resource.TAM, 'images/icon_pie_1.png')}";                
                    lorMetadata.values[1].css = 'lor2';
                    lorMetadata.images[lorMetadata.values[1].name] = "{!URLFOR($Resource.TAM, 'images/icon_pie_2.png')}";
                    lorMetadata.values[2].css = 'lor3';
                    lorMetadata.images[lorMetadata.values[2].name] = "{!URLFOR($Resource.TAM, 'images/icon_pie_3.png')}";
                    lorMetadata.values[3].css = 'lor4';
                    lorMetadata.images[lorMetadata.values[3].name] = "{!URLFOR($Resource.TAM, 'images/icon_pie_4.png')}";
                    break;
                    
                case 5:
                    lorMetadata.values[0].css = 'lor1';
                    lorMetadata.images[lorMetadata.values[0].name] = "{!URLFOR($Resource.TAM, 'images/icon_pie_1.png')}";                
                    lorMetadata.values[1].css = 'lor2';
                    lorMetadata.images[lorMetadata.values[1].name] = "{!URLFOR($Resource.TAM, 'images/icon_pie_2.png')}";
                    lorMetadata.values[2].css = 'lor3';
                    lorMetadata.images[lorMetadata.values[2].name] = "{!URLFOR($Resource.TAM, 'images/icon_pie_3.png')}";
                    lorMetadata.values[3].css = 'lor4';
                    lorMetadata.images[lorMetadata.values[3].name] = "{!URLFOR($Resource.TAM, 'images/icon_pie_4.png')}";
                    lorMetadata.values[4].css = 'lor0';
                    lorMetadata.images[lorMetadata.values[4].name] = "{!URLFOR($Resource.TAM, 'images/icon_pie_0.png')}";
                    break;                                    
                
                default:
                
                    //anything over 4 is undefined - will whack everyone above 4 as same as full pie
                    for(var i = 0; i < lorMetadata.values.length; i++) {
                        if(i > 3) {
                            lorMetadata.values[i].css = 'lor4';
                            lorMetadata.images[lorMetadata.values[i].name] = "{!URLFOR($Resource.TAM, 'images/icon_pie_4.png')}";
                        } else {
                            lorMetadata.values[i].css = 'lor' + (i + 1);
                            lorMetadata.images[lorMetadata.values[i].name] = "{!URLFOR($Resource.TAM, 'images/')}" + 'icon_pie_' + (i + 1) + '.png';
                        }
                    
                    }
                    
                }
            }
            return lorMetadata;
        }

        var lorAttrMetadata = null;

        function createMiniClicker(obj, parent, useImages, attrMetadata, unitname) {

            var clickFunc = function(evt) {
                    miniClicker(obj,attrMetadata, parent, useImages, evt, jQuery(this));                
                    return false;
                };
        
          var css = 'lor0';
          var lorHover = null;
          if(obj.level_of_relationship) {
              for(var i = 0; i < lorAttrMetadata.values.length; i++) {
                  if(lorAttrMetadata.values[i].name.toLowerCase() == obj.level_of_relationship.toLowerCase()) {
                      css = lorAttrMetadata.values[i].css;
                      lorHover = lorAttrMetadata.values[i].displayName;
                      break;
                  }
              }
          }

           var btn = jQuery('<button class="map lor" value="political"/>')
                        .attr({'id': obj.id, 'ttgid': 'lor_' + unitname})
                        .text('LOR').click(clickFunc)
                        .addClass('lor_' + obj.id)
                        .addClass(css)
                        ;
           
           if(lorHover) {
                btn.attr('title', lorHover);
           }
           
           if(map.plan.readonly) {
                btn.attr('disabled', 'true');
           }
           
           btn.appendTo(parent);
        
        }
        
        
        function miniClicker(obj, attrMetadata, parent, useImages,evt, button) {       
                            
            jQuery('div.mini_clicker_container_container').remove();
    
            var titleDiv = jQuery('<div/>', {
                tabindex: 1
            }).addClass('ttg-mini-clicker-title').text(attrMetadata.displayName)
              .click(function() {
                 return false;
              });

            var menuDiv = jQuery('<div/>').addClass('ttg-mini-clicker-menu').append(titleDiv)
 
            var currentVals = obj[attrMetadata.name] ? jQuery.makeArray(obj[attrMetadata.name]) : [];
            
            jQuery.each(attrMetadata.values, function(idx, val) {
    
                function newValue() {
                    attrMetadata.callback(obj, obj.id,val.name);
                    
                    jQuery('button.lor#' + obj.id).attr('title', val.displayName);
                    
                    containerDiv.remove();                                  
                    return false;
                }
    
                var menuIconSrc = attrMetadata.images[val.name];
                menuIconSrc = menuIconSrc ? menuIconSrc.substring(0, menuIconSrc.indexOf('.png')) : '';
                var valIcon = useImages ? jQuery('<img/>', {src: menuIconSrc + '_trans.png'}) : jQuery('<span/>').text(val.displayValue);
    
                var valName = jQuery('<div/>').text(val.displayName);
    
                var isSelected = obj[attrMetadata.name] != null && 
                                    obj[attrMetadata.name].toLowerCase() == val.name.toLowerCase()
    
                var selected = jQuery('<div/>').addClass('ttg-mini-clicker-menu-item-selected');
    
                if (isSelected) {
                    selected.append(jQuery('<img/>', {
                        src: "{!URLFOR($Resource.TAM, 'images/icon_selected.png')}"
                    }));
                }
    
                menuDiv.append(
                    jQuery('<div/>')
                        .addClass('ttg-mini-clicker-menu-item')
                        .append(selected)
                        .append(
                            jQuery('<div/>')
                                .addClass('ttg-mini-clicker-menu-item-icon')
                                .append(valIcon)
                        )
                        .append(valName)
                        .on('click', newValue)
                    );
            });
            
            //var x = button.position().left;
            //var y = button.position().top + 20;
            
            //var x = evt.pageX - parent.prop('offsetLeft');
            //var y = evt.pageY - parent.prop('offsetTop');
            
            var containerDiv = 
                jQuery('<div class="mini_clicker_container_container"/>')
                    //.css({ position : 'absolute', top : y + 'px' , left : x + 'px', height : '0px', width : '200px', 'z-index':999})
                    .css({ position : 'absolute', height : '0px', width : '200px', 'z-index':999})
                    .append(
                        jQuery('<div/>').css({
                            position: 'absolute',
                            width: '200px',
                            //top: y + 'px',
                            //left: x + 'px',
                            overflow: 'visible',
                            'background-color': 'white',
                            'z-index': 11
                        })
                        .addClass('mini_clicker_container')
                    )
                    .append(menuDiv)
                    .mouseleave(function() {
                            //containerDiv.remove();
                            jQuery('div.mini_clicker_container_container').remove();
                        })
                    .appendTo(parent)
                ;
            
            titleDiv.focus();
            
            if(ttg_salesforce1){
                if(jQuery('.lor_' + obj.id).parent().parent().parent().parent().hasClass('final_row')){
                    menuDiv.parent().css('margin-top', '-85px');
                }
            }
        }
                


        var combineCompetitors = function(localCompetitors, savedCompetitors) {
             for (var prop in localCompetitors) {
                 if (localCompetitors.hasOwnProperty(prop)) {
                     if(savedCompetitors[prop]) {
                         //add comp data
                         var lv_comp = localCompetitors[prop];
                         var lv_savedComp = savedCompetitors[prop];
                         
                         var lv_comp_wallet = lv_comp.wallet || 0;
                         lv_savedComp.walletsize = parseFloat(lv_savedComp.walletsize) + parseFloat(lv_comp_wallet);
                     } else {
                         savedCompetitors[prop] = jQuery.extend({}, localCompetitors[prop]);
                         savedCompetitors[prop].walletsize = savedCompetitors[prop].walletsize || savedCompetitors[prop].wallet || 0;
                     }
                 }
             }
        }
        
        var addRowDetails = function(cell, clazz, unit, totals, opptype, config, canOpenDialog, baseName) {
            var div = jQuery('<div/>').addClass(clazz);
            var amt = null;
            var count = null;
            
            if(canOpenDialog) {
                if(totals[unit.id] && totals[unit.id][opptype]) {
                    amt = totals[unit.id][opptype].amt;
                    count = totals[unit.id][opptype].count;

                    div.append(jQuery('<span class="oppNum"/>')
                                   .text(count)
                                   .attr({'ttgid': 'oppCount_' + opptype + '_' + baseName})
                              );
                    div.append(jQuery('<span class="oppAmt"/>')
                                   .text(getCcyDisplay(amt, config))
                                   .attr({'ttgid': 'oppAmt_' + opptype + '_' + baseName})
                              );
                } else {
                    div.append(jQuery('<span class="oppNum"/>')
                                    .text(0)
                                    .attr({'ttgid': 'oppCount_' + opptype + '_' + baseName})
                               );
                    div.append(jQuery('<span class="oppAmt"/>')
                                    //.text(getCcyDisplay(0, config))
                                    .text('-')
                                    .attr({'ttgid': 'oppAmt_' + opptype + '_' + baseName})
                               );
                }
            }
            
            div.appendTo(cell);
            
            return {div: div, amt: amt, count: count};
        }
        
        var addUnitCompetitorDetail = function(clazz, data, attribute, baseName) {
            var div = jQuery('<div/>').click(function() {
                return false;
            });
            if(clazz) {
                div.addClass(clazz);
            }
            
            if(! data[attribute] && !(data[attribute] === 0)) {
                div.append(jQuery('<span/>'));
                return div;
            }
            
            var compData = data[attribute];
            var ticker = compData.ticker || '';
            var share = 'othershare' != attribute ? compData.share : data.othershare;
            var attachedIconId = compData.attachedIconId;
            var logo = compData.logo;
            
            if(share < 0) {
                share = 0;
            } else if(share > 100) {
                share = 100;
            }
            
            
            addCompDetail(div, ticker, share, attribute, attachedIconId, logo, baseName);
            
            return div;
        }
        //addCompDetail(div, ticker, share, attribute)
        var addCompDetail = function(div, nom, share, attribute, attachedIconId, logo, baseName) {
            if(share > 100) {
                share = 100;
            } else if(share < 0) {
                share = 0;
            }
            share = Math.round(share);
            
            var img = "{!URLFOR($Resource.TAM, 'images/competitors/')}";
            if('othershare' != attribute) {
                img = img + 'comp_' + nom.toLowerCase() + '.png';
                //TODO need better way of doing this so
                var compspan = jQuery('<span class="comp_name"/>');
                //compspan.addClass('comp_' + nom);
                var compicon = jQuery('<span class="comp_icon"/>').appendTo(compspan);
                renderer.setCompetitorIcon(compicon, attachedIconId, logo); 
                jQuery('<span class="comp_ticker"/>')
                    .text(nom)
                    .attr({'ttgid': attribute + '_ticker_' + baseName})
                    .appendTo(compspan);
                
                div.append(compspan);
                div.append(jQuery('<span class="comp_percentage"/>')
                                    .text(share + '%')
                                    .attr({'ttgid': attribute + '_share_' + baseName})
                          );
            } else {
                img = img + 'comp_other.png';
                var comspan = jQuery('<span class="comp_name comp_OTHER"/>');
                jQuery('<span class="comp_icon"/>').appendTo(comspan);
                jQuery('<span class="comp_ticker"/>').text('Other').appendTo(comspan)
                comspan.appendTo(div);
                div.append(jQuery('<span class="comp_percentage"/>')
                                    .text(share + '%')
                                    .attr({'ttgid': 'othershare_' + baseName})
                          );
            }
        }
        
        var addUnitWalletDetail = function(clazz, data, baseName) {
            var div = jQuery('<div/>').click(function() {
                return false;
            });
            if(clazz) {
                div.addClass(clazz);
            }
            
            switch(clazz) {
            case 'wallet_total':
                div.append(jQuery('<span class="wallet_purse"/>')
                                    .text(data)
                                    .attr({'ttgid': 'wallet_' + baseName})
                          );
            break;
            case 'wallet_slider':
                if(data) {
                    var spangraph = jQuery('<span class="slider_graphic"/>');
                    var divgraph = jQuery('<div class="wallet_slider_container"/>')
                            .append(jQuery('<div class="wallet_slider_value"/>').attr('style', 'width:' + data));
                    spangraph.append(divgraph);
                    spangraph.append(jQuery('<div class="wallet_slider_percentage"/>')
                                           .text(data)
                                           .attr({'ttgid': 'ourperc_' + baseName})
                                     );
                    div.append(spangraph);
                }
            break;
            case 'wallet_share':
                var absoluteShare = jQuery('<span class="absolute_share"/>')
                                        .text(data)
                                        .attr({'ttgid': 'ourshare_' + baseName});
                renderer.setOurIcon(absoluteShare, ttg.am.settings.getOurCompanyLogoId()); 
                div.append(absoluteShare);                
            break;
            
            }

            return div;
        }
        
        var addUnitWalletDetails = function(cell, unit, solution, competitorData, blocked, 
                                            blockReason, config, canOpenDialog, baseName) 
        {
            var wallet = 0;
            var oursize = 0;
            var walletdiv = jQuery('<div class="wallet_total"/>');
            var percdiv = jQuery('<div class="wallet_slider"/>');
            var ourdiv = jQuery('<div class="wallet_share"/>');
            
            if(blocked) {
               cell.addClass('blank');
               //percdiv.append(jQuery('<span style="text-align:left; margin-left:0"/>').text(blockReason));
            }
            
            if(canOpenDialog && competitorData[unit.id] && competitorData[unit.id][solution.id]) {
                 var data = competitorData[unit.id][solution.id];
                 
                 if(data.wallet && data.wallet != 0) {
                     walletdiv = addUnitWalletDetail('wallet_total', getCcyDisplay(data.wallet, config), baseName);
                  
                     var ourpercshare = Math.round((data.ourwalletsize || 0) / data.wallet * 100);
                     percdiv = addUnitWalletDetail('wallet_slider', ourpercshare + '%', baseName);
                     ourdiv = addUnitWalletDetail('wallet_share', getCcyDisplay(data.ourwalletsize, config), baseName);
              
                     percdiv = percdiv
                     wallet = data.wallet;
                     oursize = data.ourwalletsize;
                 
                 }
             }
            
            cell.append(walletdiv).append(percdiv).append(ourdiv);
            
            var currdivs = [{div: walletdiv, type: 'potential', wallettype: 'wallet'}, 
                            {div: percdiv, type: 'current', wallettype: 'perc'}, 
                            {div: ourdiv, type: 'won', wallettype: 'share'}];

            for(var i = 0; i < currdivs.length; i++) {
                if(canOpenDialog) {
                    var currdivtype = 'wallet';//currdivs[i].type;
                    addClickListenerForDiv(
                        currdivs[i].div, unit, solution, currdivtype, 
                        blocked, currdivs[i].wallettype + '_' + baseName
                    );
                } else {
                    currdivs[i].div.click(function() {
                        return false;
                    });
                }
            }
            
            return { wallet: wallet, oursize: oursize, walletdiv: walletdiv, sharediv: ourdiv, percdiv: percdiv};
        }

        var addClickListenerForDiv = function(div, unit, solution, currdivtype, blocked, baseName) {
            div.attr({'ttgid': baseName})
            div.click(function() {
                dialog.openIntersectionPopup(
                    unit, solution, currdivtype, map.plan.config, jQuery('select#oppMapFilterBy').val() == 1
                );
                return false;
            });
        }
        
        var addUnitCompetitorDetails = function(cell, unit, solution, competitorData, blocked, blockReason, canOpenDialog, baseName) {
            
            var compdiv1 = jQuery('<div class="comp_1"/>');
            var compdiv2 = jQuery('<div class="comp_2"/>');
            var compdiv3 = jQuery('<div class="comp_3"/>');
            var wallet = 0;
            var otherWallet = 0;
            var competitors = {};
            
            if(blocked) {
               cell.addClass('blank');
            }
            
            if(canOpenDialog && competitorData[unit.id] && competitorData[unit.id][solution.id]) {
                var lv_compData = competitorData[unit.id][solution.id];
                compdiv1 = addUnitCompetitorDetail('comp_1', lv_compData, 'topcomp', baseName);
                compdiv2 = addUnitCompetitorDetail('comp_2', lv_compData, 'nextcomp', baseName);
                
                // https://thetasgroup.onjira.com/browse/DMPS-179
                if(lv_compData && ((lv_compData.competitors && _.keys(lv_compData.competitors).length > 0) || (lv_compData.wallet !== null && lv_compData.wallet > 0))) {
                    compdiv3 = addUnitCompetitorDetail('comp_3', lv_compData, 'othershare', baseName);
                }
                
                wallet = (lv_compData.wallet || 0);
                otherWallet = (lv_compData.otherwalletsize || 0);
                competitors = (lv_compData.competitors || {});
            }

            cell.append(compdiv1);
            cell.append(compdiv2);
            cell.append(compdiv3);
            
            var currdivs = [{div: compdiv1, type: 'potential', comptype: 'topcomp'}, 
                {div: compdiv2, type: 'current', comptype: 'nextcomp'}, 
                {div: compdiv3, type: 'won', comptype: 'othershare'}];

            for(var i = 0; i < currdivs.length; i++) {
                if(canOpenDialog) {
                    var currdivtype = currdivs[i].type;
                    addClickListenerForDiv(
                        currdivs[i].div, unit, solution, currdivtype, blocked, 
                        currdivs[i].comptype + '_' + baseName
                    );
                } else {
                    currdivs[i].div.click(function() {
                        return false;
                    });
                }
            }

            return {
                wallet: wallet, topCompDiv: compdiv1, otherWallet: otherWallet, 
                 nextCompDiv: compdiv2, otherCompDiv: compdiv3,
                 competitors: competitors
            };
        }
        
        var getCcyDisplay = function(amt, config) {
            if(amt == null) {
                return '';
            }
        
            var displayamt = null;
            var suffix = '';
            switch(currentRedenomination) {
                case '1':
                case 1:
                    displayamt = amt;
                    return displayamt.ttg_formatCurrency(config.ccy, config.thousandSeparator);
                    break;
                case '2':
                case 2:
                    displayamt = amt / 1000;
                    suffix = 'K';
                    break;
                default:
                    displayamt = amt / 1000000;
                    suffix = 'M';
            }

            return displayamt.ttg_formatCurrency(config.ccy, config.thousandSeparator, config.decimalSeparator) + suffix;
        }
        
        var addUnitCellDetails = function(cell, clazz, unit, solution, unitTotals, 
                                        opptype, blocked, canOpenOppsDialog, config, baseName) 
        {
            var div = jQuery('<div/>')
                        .addClass(clazz)
                        .attr({'ttgid': opptype + '_' + baseName});
            var amt = null;
            var count = null;
            if(canOpenOppsDialog) {
                div.click(function() {
                    dialog.openIntersectionPopup(
                        unit, solution, opptype, config, jQuery('select#oppMapFilterBy').val() == 1
                    );
                    return false;
                });
            } else {
               div.click(function() {
                    return false;
                });
            }
            
            if(blocked) {
               cell.addClass('blank');
            } else {
               unit.solutiontotals = unit.solutiontotals || {};
            
               if(canOpenOppsDialog && unitTotals[unit.id] && unitTotals[unit.id][solution.id] 
                    && unitTotals[unit.id][solution.id][opptype]) {
                    
                    amt = unitTotals[unit.id][solution.id][opptype].amt;
                    count = unitTotals[unit.id][solution.id][opptype].count;

                    div.append(jQuery('<span class="oppNum"/>')
                                   .attr({'ttgid': 'oppCount_' + opptype + '_' + baseName})
                                   .text(count)
                              );
                    div.append(jQuery('<span class="oppAmt"/>')
                                    .attr({'ttgid': 'oppAmt_' + opptype + '_' + baseName})
                                    .text(getCcyDisplay(amt, config))
                              );
                }
            }
            
            var options = {
                drop : function(event, ui) {
                    if(jQuery(this).position().left < 
                        (jQuery('div.tableContainer').width() + jQuery('div.tableContainer').position().left)) 
                    {
                        ui.draggable.trigger('ttg_add_drop_callback', [
                            {unitId : unit.id, solutionId : solution.id, accountSolutionId : solution.accountSolutionId}
                        ]);
                    }
                },
                accept : function(draggable) {
                    
                    var memberAccounts = null;
                    var isGroupedAccount = false;
                    var accountsInDraggable = draggable.attr('ttg_add_opp_accountid');
                    if(unit && unit.memberAccounts && accountsInDraggable) {
                        memberAccounts = _.pluck(unit.memberAccounts, 'id')
                        if(!memberAccounts || memberAccounts.length === 0) {
                            if(unit.accountId) {
                                memberAccounts.push(unit.accountId);
                            }
                        }
                        isGroupedAccount = _.reduce(memberAccounts, function(prev, accountId) { return prev || accountsInDraggable.indexOf(accountId) !== -1; }, false);
                    }
                
                    return draggable.attr('ttg_add_opp_opptype') === opptype 
                        && (!unit.children || unit.children.length === 0) 
                        && !blocked 
                        && ((!memberAccounts || memberAccounts.length === 0) ? (draggable.attr('ttg_add_opp_accountid').indexOf(unit.accountId) !== -1) : isGroupedAccount);
                        //&& (draggable.attr('ttg_add_opp_accountid').indexOf(unit.accountId) !== -1 || isGroupedAccount);
                },
                activeClass : (opptype === 'current') ? 'droppableAcceptionCurrent' : 'droppableAcceptionWon',
                hoverClass : 'droppableHover',
                tolerance : 'pointer'
            };
            div.droppable(options);
            
            div.appendTo(cell);
            
            return {div:div, amt: amt, count: count};
        }
        
        var gatherCellTotals = function(oppmap) {
            oppmap.plan.unitTotals = {};
            oppmap.plan.rowTotals = {};
            oppmap.plan.blocked = {};
            oppmap.plan.competitors = {};
            
            jQuery.each(oppmap.plan.summaryData, function(index, data) {
                if(oppmap.plan.unitTotals[data.unitId] == null) {
                    oppmap.plan.unitTotals[data.unitId] = {};
                }
                if(oppmap.plan.unitTotals[data.unitId][data.solutionId] == null) {
                    oppmap.plan.unitTotals[data.unitId][data.solutionId] = {};
                }
                
                oppmap.plan.unitTotals[data.unitId][data.solutionId][data.opportunityType.toLowerCase()] = 
                    {'amt' : data.total, 'formattedAmt': data.formattedTotal, 'count': data.oppcount};
            });
            
            jQuery.each(oppmap.plan.totalData, function(index, data) {
                if(oppmap.plan.rowTotals[data.unitId] == null) {
                    oppmap.plan.rowTotals[data.unitId] = {};
                }
                oppmap.plan.rowTotals[data.unitId][data.opportunityType.toLowerCase()] =
                    {'amt' : data.total, 'formattedAmt': data.formattedTotal, 'count': data.oppcount};
            });
            
            jQuery.each(oppmap.plan.blockedCells, function(index, data) {
                if(oppmap.plan.blocked[data.unitId] == null) {
                    oppmap.plan.blocked[data.unitId] = {};
                }
                
                if(oppmap.plan.blocked[data.unitId][data.solutionId] == null) {
                    oppmap.plan.blocked[data.unitId][data.solutionId] = { reason: (data.blockReason || '') };
                }
            });
            
            jQuery.each(oppmap.plan.competitorData, function(index, data) {
                // Competitors will be displayed even if the total wallet is zero check with nathan
                /*if(! data.wallet) {
                    return true;
                }*/
                
                if(oppmap.plan.competitors[data.unitId] == null) {
                    oppmap.plan.competitors[data.unitId] = {};
                }
                
                if(oppmap.plan.competitors[data.unitId][data.solutionId] == null) {
                    var cellcompetitordata = { wallet: data.wallet, ourshare: data.ourshare, 
                        ourwalletsize: data.ourwalletsize, otherwalletsize: data.otherwalletsize };
                    
                    var compsshare = 0;
                    if(data.competitors && data.competitors.length > 0) {
                        if(data.competitors.length == 1) {
                            cellcompetitordata.topcomp = { ticker: data.competitors[0].ticker, share: data.competitors[0].walletshare, logo: data.competitors[0].logo, attachedIconId: data.competitors[0].attachedIconId };
                            compsshare = data.competitors[0].walletshare;
                        } else {
                            cellcompetitordata.topcomp = { ticker: data.competitors[0].ticker, share: data.competitors[0].walletshare, logo: data.competitors[0].logo, attachedIconId: data.competitors[0].attachedIconId };
                            cellcompetitordata.nextcomp = { ticker: data.competitors[1].ticker, share: data.competitors[1].walletshare, logo: data.competitors[1].logo, attachedIconId: data.competitors[1].attachedIconId };
                            compsshare = data.competitors[0].walletshare + data.competitors[1].walletshare;
                        }
                        
                        cellcompetitordata.competitors = {};
                        jQuery.each(data.competitors, function(idx, comp) {
                            cellcompetitordata.competitors[comp.competitorId] = comp;
                        });
                    }

                    cellcompetitordata.othershare = 100 - (data.ourshare ? data.ourshare : 0) - (compsshare ? compsshare : 0);  //check with nathan
                    cellcompetitordata.otherwalletsize = cellcompetitordata.wallet ? 
                            (cellcompetitordata.othershare / 100 * cellcompetitordata.wallet) : 0;
                    
                    oppmap.plan.competitors[data.unitId][data.solutionId] = cellcompetitordata;
                }
            });
            
        }
        
        var doRender = function(table, oppmap) {
            jQuery('div.tableContainer').empty();
            table = jQuery('<table id="superGrid"/>');
        
            //do currency display
            var sel = jQuery('select#oppMapCurrency');
            sel.empty();
            if(oppmap.plan.config.multiCurrency) {
                sel.css('width', '70px');
            }
            var ccy = oppmap.plan.config.ccy;
            jQuery('<option/>').text(ccy).val('1').appendTo(sel);
            jQuery('<option/>').text(ccy + 'K').val('2').appendTo(sel);
            jQuery('<option/>').text(ccy + 'M').val('3').appendTo(sel);
            sel.val(currentRedenomination);
            
            if(oppmap.plan.readonly) {
                jQuery('.oppMapBulkImport').remove();
            }
            else {
                jQuery('.oppMapBulkImport').css('visibility', 'visible');
            }            
            
            if(unmappedOppsLines.isEmpty() === false) {
                jQuery('.unmapped_alert').toggle(true);
            } else {
                jQuery('.unmapped_alert').toggle(false);
            }
            
            if(currentview != view.value) {
                jQuery('select#oppMapFilterBy').attr('disabled', 'disabled');
                jQuery('#bulkImportButton').hide();
                jQuery('#bulkImportLabel').hide();
            } else {
                jQuery('select#oppMapFilterBy').removeAttr('disabled');
                jQuery('#bulkImportButton').show();
                jQuery('#bulkImportLabel').show();
            }
            
            jQuery('#LEGEND')
                .removeClass('Value Competitors Wallet')
                .addClass(currentview);
            
            table.removeClass('Value Competitors Wallet');
            table.addClass(currentview);
        
            gatherCellTotals(oppmap);//make it easier to populate the grid
            renderHeader(oppmap, table);
            renderUnits(oppmap, table);
            renderComplete(table);
            
            jQuery('div.tableContainer').append(table);
            
            
            eventManager.removeEventListener('unit_target_change', 'opp_map_unit_target_change');
            eventManager.addEventListener(
                'unit_target_change', 
                'opp_map_unit_target_change',
                function(event) {
                    var ctrl = jQuery('td#' + event.unitId + '.rowName div.rowNameContainer span.targeted');
                    if(ctrl) {
                        if(event.targeted) {
                           if(! ctrl.hasClass('icon-svg_app_target')) {
                               ctrl.addClass('icon-svg_app_target');
                           }
                        } else {
                               ctrl.removeClass('icon-svg_app_target');
                        }
                    }

                    //edit the underlying model object for account type change
                    var unit = _.filter(oppmap.plan.units, function(unit) {return unit.id == event.unitId;});
                    if(unit && unit.length > 0) {
                        unit[0].accountType = event.type;
                    }
                } 
            );
            
            /* REPLACEMENT FOR DEPRECATED .browser() AS OF JQUERY v1.9  */
            if(navigator.appVersion.indexOf('MSIE 7.') != -1){
                try {
                    fixMinWidthForIE();
                } catch(ex) {
                
                }
                       
            }
        }
        
        var render = function() {
            var table = null;
            if(jQuery('table#superGrid').length > 0) {
                table = jQuery('table#superGrid');
            } else {
                table = jQuery('<table id="superGrid"/>');
            }

            api.getOpportunityMap(planid, targeted, function(oppmap) {
                map = oppmap;
                
                var unmapdlgspec = {planid: planid, api: api, config: map.plan.config};
                unmapdlgspec.refresh = function() {
                    top.location.href = '/apex/OpportunityMap?id=' + encodeURIComponent('{!accountPlan.Id}');
                };
                var unmapdialog = ttg.am.unmappeddialog(unmapdlgspec);
                jQuery('h4.unmapped_alert').unbind('click');
                jQuery('h4.unmapped_alert').click(unmapdialog.show);
                
                if(map.plan.unmappedProductLines && map.plan.unmappedProductLines.length) {
                    var unmapps = [];
                    for(var i = 0; i < map.plan.unmappedProductLines.length; i++) {
                        unmapps[unmapps.length] = {lineItemId: map.plan.unmappedProductLines[i].id};
                    }
                    unmappedOppsLines.putAll(unmapps);
                }
                
                dialog.setPlanDates(map.plan.fromDate, map.plan.toDate);
                importDialog.setPlanDates(map.plan.fromDate, map.plan.toDate);
                lorAttrMetadata = createMetaData();
                
                if(jQuery('div#legendDiv').length == 0) {
                    jQuery('#LEGEND')
                        .append(legend());
                        
                    jQuery('#LEGEND IMG#LEGENDTOGGLER').click(toggleOppMapLegend);
                }

                doRender(table, oppmap);
            });
        }

        if('{!UnitCustomListEnabled}' === 'true'){
            var openPlanUnitList = function (elem, unitdiv, unitId) {   
                    
                var plan_unit_list_items = {!getPlanUnitList};
                                
                if(plan_unit_list_items.length == 0){
                
                    errorDialog('No URLs added to list');
                
                }else{
                
                    jQuery('div.plan_unit_dropdown').remove();
                    var plan_unit_ul = jQuery('<ul>')
                            .addClass('plan_unit_list');        
                    plan_unit_ul.append(
                        jQuery('<li>')
                            .text('Related Pages')
                            .addClass('plan_unit_list_header')
                    )
    
                    var plan_unit_dropdown = jQuery('<div>')
                            .addClass('plan_unit_dropdown')
                            .append(plan_unit_ul);
                            
                    var plan_unit_container = jQuery('<div class="plan_unit_container_container"/>')
                            .css({ position : 'absolute', height : '0px', width : '200px', 'z-index':999})                    
                            .mouseleave(function() {        
                                    plan_unit_container.remove();
                                    jQuery('div.plan_unit_container_container').remove();
                                })
                            .appendTo(unitdiv.children('span.buttons'))
                        ;           
        
                    plan_unit_dropdown.appendTo(plan_unit_container);
            
                    jQuery.each(plan_unit_list_items, function (idx, val) {
                        //console.log(plan_unit_list_items);
                        plan_unit_ul.append(jQuery('<li>')
                                              .addClass('plan_unit_list_items')
                                              .text(val.Name)
                                              .click(function() {
                                                  window.open(val[ttg.vfp+'Url__c'] + '?unitId=' + unitId, '_blank');
                                               })
                                            );
                    });
                    
                    if(ttg_salesforce1){
                        if(jQuery('#btn_id_' + unitId).parent().parent().parent().parent().hasClass('final_row')){
                            plan_unit_ul.parent().parent().css('margin-top', '-85px');
                        }
                    }   
                }
    
            };
        }


        function errorDialog(err_message) {
            var err_dlg = jQuery('<div/>', {id: 'attach_error_dialog'}).text(err_message).css('color','#d74c3b');
            err_dlg.dialog({
                title   : 'Error',
                buttons : {                                     
                            'Close' : function() {                      
                                        err_dlg.dialog('close');
                                      }
                        }
            });
        }

        
        var openOrgChart = function(unit, oppmap) {

            var associatedAccountIds = _.pluck(unit.memberAccounts, 'id');
            var accountGrouping = associatedAccountIds && associatedAccountIds.length > 0;
            associatedAccountIds = associatedAccountIds.length > 0 ? _.uniq(associatedAccountIds) : [ unit.accountId ];
    
            var associatedAccountNames = _.pluck(unit.memberAccounts, 'name');
            associatedAccountNames = associatedAccountNames.length > 0 ? _.uniq(associatedAccountNames) : [ unit.accountName ];

            var url = '';
            if(unit.mapid) {
                url = '/apex/' + ttg.vfp + 'Account_Pol_Map?id=' + unit.mapid + '&oppmapid=' + '{!accountPlan.Id}' + '&planunitid=' + unit.id + '&fullscreen=true';
            } else {
                url = '/apex/' + ttg.vfp + 'Account_Pol_Map?account=' + associatedAccountIds[0] + '&oppmapid=' + '{!accountPlan.Id}' + '&planunitid=' + unit.id + '&fullscreen=true';
            }
            
            if((typeof window.sforce != 'undefined') && (window.sforce != null) && (typeof window.sforce.one != 'undefined') && (window.sforce.one != null)) {
                sforce.one.navigateToURL(url);
            } else {
               window.location.href = url;
            }

            /**
            var spec = {
                    graphId                 :   unit.id,
                    orgId                   :   ttg.context.orgId,
                    sessionId               :   ttg.context.sessionId,
                    url                     :   ttg.context.url,
                    orgChartType            :   'account',//unit.getIsCompany() ? 'account' : 'unit',
                    accountid               :   unit.id,//unit.getIsCompany() ? unit.getAccountId() : '',     
                    unitid                  :   '',//unit.getIsCompany() ? '' : unit.getId(),
                    planid                  :   oppmap.plan.id,
                    orgChartName            :   unit.name,
                    readonly                :   oppmap.plan.readonly,
                    associatedAccountId     :   unit.accountId,
                    associatedAccountName   :   unit.accountName,
                    accountGrouping         :   accountGrouping,
                    associatedAccountIds    :   associatedAccountIds,
                    associatedAccountNames  :   associatedAccountNames,                    
                    printUrl                :   'AM_Political_Map_Page_Print?id=' + oppmap.plan.id + '&',
                    metadataOptions         :   {
                        skipAttributes : ['buyingrole','approval']
                    },
                    displayTitle            :   [ unit.name ],
                    apiMetadataTimestamp    :   'apiMetadataTimestamp',
                    ttgApi                  :   apilayer,
                    add_contact_def_search_field    : 'AccountId',
                    hasAM                           : {!isLicensedForAccountManager},
                    hasOM                           : {! OR( isLicensedForOppManager, isLicensedForPoliticalMapExpress ) },
                    calledFromAM                    : ('{!$CurrentPage.Name}'.indexOf('OpportunityMap') > -1),
                    nodeHeight                      :   110,
                    nodeWidth                       :   120,
                    dateFormat                      :   '{!jQueryUIDateFormat}',
                    userName                        :   '{!JSENCODE(currentUserName)}',
                    userId                          :   '{!JSENCODE(currentUserId)}',
                    disableContactCreation          : {!disableCreationOfContacts},
                    disableCoaching                 : false,
                    hideActions                     : true,
                    politicalMapCoachRules          : {
                        contact_coaching_rules  : ttg.coach_am_political_map_contact_rules,
                        contact_profile_rules   : ttg.coach_am_political_map_profile_rules,
                        map_rules               : ttg.coach_am_political_map_rules
                    },                    
                    skin                            : '{!JSENCODE(politicalMapSkin)}',
                    socialSettings                  : '{!JSENCODE(socialMediaSettings)}'
            };
                ttg.popupOrgChart(spec);
            **/
                /* IF S1 IS PRESENT, ADDS CLASS TO POL MAP TO ALLOW FOR S1 STYLES*/
                if (ttg_salesforce1) {
                    jQuery('#outerDiv').parent().addClass('S1PolMap');
                }
        }
        
        
        var addBulkImportListener = function() {
            jQuery('button#bulkImportButton').on('click', function() {
                // Prevents an error if you click on the import button before the oppmap is loaded
                if(map) {
                
            		importDialog.openImportDialog(map, jQuery(this), jQuery('select#oppMapFilterBy').val() == 1);
                
                }
            });
            
            
            if(importDialog.onAddOpportunities) {
                importDialog.onAddOpportunities(addOpportunities);
            }          
            
        }
        
         	               
        var addOpportunity = function(opp) {        
            var solutionid = opp.solutionid; 
            var unitid = opp.unitid;
            var opportunitytype = opp.opportunitytype;
            var oppcount = opp.oppcount;
            var oppamountsum = opp.oppamountsum;
            var summarycount = opp.summarycount || oppcount;
            
            var found = false;
            var indxToRemove = -1;
            for(var i = 0; i < map.plan.summaryData.length; i++) {
                if(solutionid == map.plan.summaryData[i].solutionId && unitid == map.plan.summaryData[i].unitId 
                        && opportunitytype.toLowerCase() == map.plan.summaryData[i].opportunityType.toLowerCase()) {
                    
                    map.plan.summaryData[i].total = (map.plan.summaryData[i].total || 0) + (oppamountsum || 0);
                    map.plan.summaryData[i].oppcount = map.plan.summaryData[i].oppcount + summarycount;
                    
                    if(map.plan.summaryData[i].oppcount == 0 && map.plan.summaryData[i].total == 0) {
                        indxToRemove = i;
                    }
                    
                    found = true;
                    break;
                }
            }
            
            if(!found) {
                //add in entry
                map.plan.summaryData[map.plan.summaryData.length] = {
                    unitId              :   unitid,
                    solutionId          :   solutionid,
                    total               :   oppamountsum,
                    opportunityType     :   opportunitytype,
                    oppcount            :   summarycount
                };
            }
            
            if(indxToRemove > -1) {
                map.plan.summaryData.splice(indxToRemove, 1);
            }
            
            //repeat rinse for total data
            found = false;
            indxToRemove = -1;
            for(var i = 0; i < map.plan.totalData.length; i++) {
                if(unitid == map.plan.totalData[i].unitId && 
                    opportunitytype.toLowerCase() == map.plan.totalData[i].opportunityType.toLowerCase()) {
                    
                    map.plan.totalData[i].total = (map.plan.totalData[i].total || 0) + (oppamountsum || 0);
                    map.plan.totalData[i].oppcount = map.plan.totalData[i].oppcount + oppcount;
                    
                    if(map.plan.totalData[i].oppcount == 0 && map.plan.totalData[i].total == 0) {
                        indxToRemove = i;
                    }
                    
                    found = true;
                    break;
                }
            
            }
            
            if(!found) {
                //add in entry
                map.plan.totalData[map.plan.totalData.length] = {
                    unitId              :   unitid,
                    solutionId          :   'total',
                    total               :   oppamountsum,
                    opportunityType     :   opportunitytype,
                    oppcount            :   oppcount
                };
            }
            
            if(indxToRemove > -1) {
                map.plan.totalData.splice(indxToRemove, 1);
            }
        }
                
        var modifyWalletData = function(unitid, solutionid, wallet, ourwalletsize, competitors) {
            if(! map) { return; }
            
            var lv_competitors = competitors || {};
            lv_competitors.sort(function(a, b) {
                return  parseFloat((b.wallet || 0)) -  parseFloat((a.wallet || 0));
            });
            
            var found = false;
            jQuery.each(map.plan.competitorData, function(idx, data) {
                if(data.solutionId == solutionid && data.unitId == unitid) {
                    data.wallet = wallet;
                    data.ourwalletsize = ourwalletsize || 0;
                    data.ourshare = ourwalletsize ? wallet / data.ourwalletsize * 100 : 0;
                    
                    data.otherwalletsize = null;
                    
                    data.competitors = [];
                    jQuery.each(lv_competitors, function(jdx, competitor) {
                        data.competitors[data.competitors.length] =
                            {competitorId: competitor.competitorId, ticker: competitor.ticker, logo: competitor.logo,
                            walletsize: competitor.wallet, walletshare: competitor.walletshare, attachedIconId: competitor.attachedIconId};
                    });
                    
                    found = true;
                    return false;
                }
            });
            
            if(! found) {
                var _competitors = [];
                jQuery.each(lv_competitors, function(jdx, competitor) {
                    _competitors[_competitors.length] =
                        {competitorId: competitor.competitorId, ticker: competitor.ticker, 
                        walletsize: competitor.wallet, walletshare: competitor.walletshare};
                });
            
                map.plan.competitorData[map.plan.competitorData.length] = {
                    unitId: unitid,
                    solutionId: solutionid,
                    wallet: wallet,
                    ourwalletsize: ourwalletsize || 0,
                    ourshare: (ourwalletsize ? wallet / ourwalletsize * 100 : 0),
                    competitors: competitors,
                    otherwalletsize: null
                };
            }

            doRender(jQuery('table#superGrid'), map);
        }
        
        var addOpportunities = function(opps, unmappedOpps) {
            if(! map) { return; }
            //expect array of obj {amount, solutionId, unitId, opportunityType}

            if(unmappedOpps) {
                unmappedOppsLines.putAll(unmappedOpps.added);
                unmappedOppsLines.removeAll(unmappedOpps.removed)
            }

            for(var i = 0; i < opps.length; i++) {
                addOpportunity(opps[i]);
            }
            
            doRender(jQuery('table#superGrid'), map);
        }
        
        var toggleBlocked = function(unitid, solutionid, block, reason) {
            //add or remove a new blocked section in the blocked map
            if(! map) { return; }
            
            if(block) {
                map.plan.blockedCells[map.plan.blockedCells.length] = 
                    { solutionId: solutionid , unitId: unitid, blockReason: reason };
            } else {
                //find and remove element
                var idx = -1;
                for(var i = 0; i < map.plan.blockedCells.length; i++ ) {
                    if(solutionid == map.plan.blockedCells[i].solutionId && unitid == map.plan.blockedCells[i].unitId) {
                        idx = i;
                        break;
                    }
                }
                
                if(idx > -1) {
                    map.plan.blockedCells.splice(idx, 1);
                }
            }
            
            doRender(jQuery('table#superGrid'), map);
        }
    
        function toggleOppMapLegend(evt) {
            if ("{!IsLicensedForAccountManagerAndIsSegementationMapEnabled}" === "true") {
                jQuery('div#legendDiv').css({ 'left': (ttg_salesforce1 ? 'initial' : 30), 'top': -40 });
            } else {
                jQuery('div#legendDiv').css({ 'height': '120px', 'left': (ttg_salesforce1 ? 'initial' : 30), 'padding-right': '15px', 'top': -40, 'width': '440px' });
            }
            
            jQuery('div#legendDiv').toggle();
            if(evt) {
                evt.stopPropagation();
            }
        }

        function createGraphicLegend(imgsrc, legenddetails) {
            return jQuery('<li/>')
                    .append(jQuery('<img/>', 
                                  { 
                                     height : '15px', 
                                     width : '15px', 
                                     src : imgsrc 
                                  }
                            )
                            .css('vertical-align','middle')
                    )
                    .append(jQuery('<span/>')
                                .text(
                                    ' = ' + legenddetails
                                )
                    );
        }
        
        function createBoxLegend(style, legenddetails) {
            return jQuery('<li/>')
                    .append(jQuery('<button/>', 
                                  { 
                                     height : '15px', 
                                     width : '15px'
                                  }
                            )
                            .css('vertical-align','middle')
                            .addClass(style)
                    )
                    .append(jQuery('<span/>')
                                .text(
                                    ' = ' + legenddetails
                                )
                    );
        }
        
        function createOppTypeLegend() {
            var list = jQuery('<ul/>');
    
            var displayDiv = 
                jQuery('<div/>')
                    .addClass('ttg_org_chart_legend_box_panel tool_tip_opp_type')
                    .append(jQuery('<div/>').addClass('ttg_org_chart_legend_box_panel_title').text('Opportunity Types')
                    )
                    .append(list)
                    ;
            
            list.append(createBoxLegend('potential', 'Potential'));
            list.append(createBoxLegend('current', 'Current'));
            list.append(createBoxLegend('won', 'Closed Won'));
                        
            return displayDiv;
        }
        
        function createButtonsLegend() {
            var list = jQuery('<ul/>');
    
            var displayDiv = 
                jQuery('<div/>')
                    .addClass('ttg_org_chart_legend_box_panel')
                    .append(jQuery('<div/>').addClass('ttg_org_chart_legend_box_panel_title').text('Plan Unit Actions')
                     )
                    .append(list)
                    ;
            
            list.append(createGraphicLegend("{!URLFOR($Resource.TAM, 'images/icon_btn_strategy.png')}", 'Insight Map'));
            list.append(createGraphicLegend("{!URLFOR($Resource.TAM, 'images/icon_btn_political.png')}", 'Political Map'));
                        
            return displayDiv;
        }

        function createLORLegend() {
            var list = jQuery('<ul/>');
    
            var displayDiv = 
                jQuery('<div/>')
                    .addClass('ttg_org_chart_legend_box_panel ttg_org_chart_legend_box_panel_last')
                    .append(jQuery('<img/>', {src: ttg.context.orgchartbase + '/ttg/graph/feimages/icon_delete.png', id: 'LEGENDCLOSER'}).click(toggleOppMapLegend))
                    .append(jQuery('<div/>')
                                .addClass('ttg_org_chart_legend_box_panel_title')
                                .text(lorAttrMetadata.displayName)
                           )
                    .append(list)
                    ;
            
            var menuIconSrc = lorAttrMetadata.images['none'];
            menuIconSrc = menuIconSrc ? menuIconSrc.substring(0, menuIconSrc.indexOf('.png')) : '';
            list.append(createGraphicLegend(menuIconSrc + '_trans.png', 'Unknown'));
            jQuery.each(lorAttrMetadata.values, function(idx, lor) {
                menuIconSrc = lorAttrMetadata.images[lor.name];
                menuIconSrc = menuIconSrc ? menuIconSrc.substring(0, menuIconSrc.indexOf('.png')) : '';
                list.append(createGraphicLegend(menuIconSrc + '_trans.png', lor.displayName));
            });

            return displayDiv;
        }

        function createSegmentationLegend() {
            var list = jQuery('<ul/>');
    
            var displayDiv = 
                jQuery('<div/>')
                    .addClass('ttg_org_chart_legend_box_panel')
                    .append(jQuery('<div/>')
                                .addClass('ttg_org_chart_legend_box_panel_title')
                                .text('Segmentation')
                           )
                    .append(list)
                    ;
            
            list.append(createGraphicLegend(
                            "{!URLFOR($Resource.TAM, 'images/icon_letter_exclamation.png')}",
                            'Unknown'));
            list.append(createGraphicLegend(
                            "{!URLFOR($Resource.TAM, 'images/icon_letter_a.png')}",
                            'Top Right'));
            list.append(createGraphicLegend(
                            "{!URLFOR($Resource.TAM, 'images/icon_letter_b.png')}",
                            'Top Left'));
            list.append(createGraphicLegend(
                            "{!URLFOR($Resource.TAM, 'images/icon_letter_c.png')}",
                            'Bottom Right'));
            list.append(createGraphicLegend(
                            "{!URLFOR($Resource.TAM, 'images/icon_letter_d.png')}",
                            'Bottom Left'));

            return displayDiv;
        }

        function createWalletLegend() {
            var list = jQuery('<ul/>');
    
            var displayDiv = 
                jQuery('<div/>')
                    .addClass('ttg_org_chart_legend_box_panel tool_tip_wallet')
                    .append(jQuery('<div/>')
                                .addClass('ttg_org_chart_legend_box_panel_title')
                                .text('Wallet')
                            )
                    .append(list)
                    ;
            
            list.append(createGraphicLegend(
                            "{!URLFOR($Resource.TAM, 'images/icon_wallet.png')}",
                            'Wallet Amount'));
            list.append(createGraphicLegend(
                            "{!URLFOR($Resource.TAM, 'images/img_wallet_slider_alt.png')}",
                            'Our Wallet Share %'));
                            
            var ourWalletLegend = createBoxLegend('empty', 'Our Wallet Share Value');
            jQuery(ourWalletLegend.find('button').css('background-position', 'center'));
            renderer.setOurIcon(
                jQuery(ourWalletLegend.find('button')), 
                ttg.am.settings.getOurCompanyLogoId()
            );
            list.append(ourWalletLegend);

            return displayDiv;
        }

        function legend() {
            //o   4 symbols for Strategy Map, Relationship Map etc
            //o   Colors for Potential vs Current vs Won
            
            var jqLegend = jQuery('<div id="legendDiv"/>')
                        .addClass('LEGEND_POPUP')
                        .addClass('ttg_org_chart_legend_box_initial')
                        .attr('style', 'display:none;')
                        .append(createOppTypeLegend())
                        .append(createWalletLegend())
                        .append(createButtonsLegend())
                        ;

            if ("{!IsLicensedForAccountManagerAndIsSegementationMapEnabled}" === "true") {
                jqLegend.append(createSegmentationLegend());
            }
            
            jqLegend.append(createLORLegend())
            .draggable();
                        
            return jqLegend;
        }
    
    
        var openSegmentation = function(unit, oppmap) {
            if (!oppmap.readonly) {
                segmentation.segment(unit.id);
            }        
        }
        
        addBulkImportListener();

        

        var that = {};
        
        if(dialog.onBlockCell) {
            dialog.onBlockCell(toggleBlocked);
        }
        if(dialog.onAddOpportunities) {
            dialog.onAddOpportunities(addOpportunities);
        }
        if(dialog.onModifyWallet) {
            dialog.onModifyWallet(modifyWalletData);
        }
        
        that.render = render;
        that.changeView = changeView;
        that.changeCurrencyFigures = changeCurrencyFigures;
        that.changeTargeted = changeTargeted;
        that.getCurrentView = function() { return currentview; };        
        return that;
        
    })({
        api                 :   apilayer,
        planid              :   '{!accountPlan.Id}',
        renderComplete      :   ttg.am.setupoppmap,
        userid              :   '{!$User.Id}',
        user                :   '{!JSENCODE($User.FirstName)} {!JSENCODE($User.LastName)}',
        readonly            :   {!Editable == false},
        amountField         :   '{!oppAmountField}',
        accountGrouping     :   {!accountGroupingEnabled}        
    });

    var eventManager = ttg.events();
    var segmentation;

    
    jQuery(document).ready(function() { 
                      
            if('{!settingsOk}' == false || '{!settingsOk}' == 'false') {
                var toErr = ttg.ajaxErrorFunction(
                                  null, 
                                  null, 
                                  {showDetail: false, 
                                  title: 'Error Opening Dealmaker Opportunity Map'}
                            );
                toErr({responseText: 'BAD_CUSTOM_AM_SETTINGS'});
                return;
            }
            
            var oppmap = ttg.am.oppmap;
            var isipad = ttg.isTouchScreen(); //navigator.userAgent.toLowerCase().indexOf('ipad') > -1;
            
            jQuery('select#oppMapField').change(function() {
                //alert(jQuery(this).val());
                oppmap.changeView(jQuery(this).val());
            });
            
            jQuery('select#oppMapFilterBy').change(function() {
                var targeted = '1' == jQuery(this).val();
                oppmap.changeTargeted(targeted);
            });
            
            jQuery('select#oppMapCurrency').change(function() {
                oppmap.changeCurrencyFigures(jQuery(this).val());
            });
            
            if(isipad) {
                jQuery('html').mouseout(function(evt){
                    //if not on a miniclicker then remove miniclicker - simples
                    if(jQuery('div.mini_clicker_container_container').length > 0) {
                        if(jQuery.contains(jQuery('div.mini_clicker_container_container').get(0), 
                            evt.originalEvent.relatedTarget) == false) 
                        {
                            jQuery('div.mini_clicker_container_container').remove();
                        }
                    }
                    
                    if(jQuery('div.plan_unit_container_container').length > 0) {
                        if(jQuery.contains(jQuery('div.plan_unit_container_container').get(0), 
                            evt.originalEvent.relatedTarget) == false) 
                        {
                            jQuery('div.plan_unit_container_container').remove();
                        }
                    }
                    
                });
            }
          
            oppmap.render();

            segmentation = ttg.am.segmentation ({
                dateformat:   '{!JSENCODE(dateFormat)}',
                ttgApi: ttg.apiLayer.sfdcDelegate( { sessionid : '{!JSENCODE($Api.Session_ID)}' } ),
                planId: '{!accountPlan.Id}',
                readonly: {!Editable == false},
                eventManager: eventManager,
                readonly: {!Editable == false},
                surpressSpinner: true
            })

            segmentation.setup();
            
                        
            var spec = {
                sessionid : '{!JSENCODE($Api.Session_ID)}',
                userId: '{!$User.id}',
                ttgApi: ttg.apiLayer.sfdcDelegate( { sessionid : '{!JSENCODE($Api.Session_ID)}' } ),
                planId: '{!accountPlan.Id}',
                planname: '{!JSENCODE(accountPlan.Name)}',
                spinnerURL: '{!JSENCODE(URLFOR($Resource.ttgomjs, '/ttg/graph/images/loader.gif'))}',
                calendarURL: "{!URLFOR($Resource.Common, 'images/icon_calendar.png')}",
                title: 'Plan Settings',
                clone: false,
                readonly: {!PlanRecordEditable == false},
                candelete: {!Candelete},
                inactive: {!inactive},
                onDelete: function() { top.location.href = '/apex/AccountPlan'; },
                hideScorecard: {!NOT(isLicensedForAccountManagerAndIsScorecardEnabled)},
                useAccountGrouping: {!accountGroupingEnabled},
                fiscalYearStartMonth: {!fiscalYearStartMonth},
                usesStartDateAsFiscalYearName: {!usesStartDateAsFiscalYearName}                    
            };

            var amConfiguration = ttg.am.configuration(spec);

            var hasCreateAccess = {!planObjectCreateable};

            var specClone = spec;
            specClone['clone'] = true;
            var amConfigurationClone = ttg.am.configuration(specClone);

            var ctrl = jQuery('#TAMADMINLINK').parent();
            jQuery('#TAMADMINLINK').remove();
            
            var a = jQuery('<a href="#" data-dropdown="#dropdown-{!accountPlan.Id}"/>').append(
                                jQuery('<img src="{!URLFOR($Resource.Common, 'images/icon_cog.png')}" alt="Options" title="Options" ttgid="AccountPlanOPTIONSLIST"/>')
                            );
            
            var div = jQuery('<div id="dropdown-{!accountPlan.Id}" class="dropdown dropdown-relative"/>').append(
                                jQuery('<ul class="dropdown-menu"/>').append(
                                    jQuery('<li/>').append(
                                        jQuery('<a href="#"/>').click(amConfiguration.configure).text('Settings')
                                            .attr('ttgid', "AccountPlanOPTIONSSETTINGS")
                                    )
                                ).append(hasCreateAccess ?
                                        jQuery('<li/>').append(
                                            jQuery('<a href="#"/>').click(amConfigurationClone.configure).text('Clone')
                                                .attr('ttgid', "AccountPlanOPTIONSCLONE")
                                        )
                                        :
                                        null
                                )
                            );

            ctrl.append(a);
            ctrl.append(div);
        
            var fetchapi = ttg.apiLayer.sfdcDelegate( { sessionid : '{!$Api.Session_ID}', disableContactCreation : {!disableCreationOfContacts} } );
            ttg.fetch.metadata('Opportunity', fetchapi);
            ttg.fetch.metadata('Account', fetchapi);
            ttg.fetch.metadata('Contact', fetchapi);
                        
            /* DMDEV-3771 */
            jQuery('._row').last().addClass("final_row");

    });
      
</script>

</apex:page>